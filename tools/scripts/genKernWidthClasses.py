#!/usr/bin/python3

# Outputs a set of classes based on the width of the glyphs.
# These classes are intended to be used for bariyeh tail kerning.

# Run this script from the tools/scripts directory where the file is located.

from fontParts.world import *
import sys

def format_name(gname):
	cc = len(gname);
	result = gname
	while len(result) < 30:
		result += " "
	return result
# end of format_name	

# Main routine

# Open UFO
ufo = sys.argv[1]
font = OpenFont(ufo)
#font = OpenFont('../source/masters/AwamiNastaliq-Regular.ufo')

outfile = "../../source/bariyehKernClasses.feax"
fout = open(outfile, 'w');

iniZero = dict();
iniNarrow = dict();
iniMedium = dict();
iniWide = dict();
iniExtra = dict();

medZero = dict();
medNarrow = dict();
medMedium = dict();
medWide = dict();
medExtra = dict();

for glyph in font:
		aw = glyph.width
		gname = glyph.name
		if gname[0:3]== "abs" or gname[0:3] == "nlq":
			if gname[-3:] == "Med" or "Med." in gname or "Med_" in gname:
				# Medial base that we're interested in.
				#print(glyph.name + ", ", aw, file=fout)
				if aw < 100:
					medZero[gname] = aw;
				elif aw < 500:
					medNarrow[gname] = aw;
				elif aw < 900:
					medMedium[gname] = aw;
				elif aw < 1300:
					medWide[gname] = aw;
				else:
					medExtra[gname] = aw;
				
			if gname[-3:] == "Ini" or "Ini." in gname or "Ini_" in gname:
				# Initial base
				#print(glyph.name + ", ", aw, file=fout)
				if aw < 100:
					iniZero[gname] = aw;
				elif aw < 500:
					iniNarrow[gname] = aw;
				elif aw < 900:
					iniMedium[gname] = aw;
				elif aw < 1300:
					iniWide[gname] = aw;
				else:
					iniExtra[gname] = aw;

# OUTPUT

print("# This file was generated by the genKernWidthClasses.py script.\n\n", file=fout)
	
print("@KZeroIni = [", file=fout);
for gn in iniZero:
	print("  " + format_name(gn) + "# " + str(iniZero[gn]), file=fout);
print("];\n", file=fout);

print("@KNarrowIni = [", file=fout);
for gn in iniNarrow:
	print("  " + format_name(gn) + "# " + str(iniNarrow[gn]), file=fout);
print("];\n", file=fout);

print("@KMediumIni = [", file=fout);
for gn in iniMedium:
	print("  " + format_name(gn) + "# " + str(iniMedium[gn]), file=fout);
print("];\n", file=fout);

print("@KWideIni = [", file=fout);
for gn in iniWide:
	print("  " + format_name(gn) + "# " + str(iniWide[gn]), file=fout);
print("];\n", file=fout);

print("@KExtraIni = [", file=fout);
for gn in iniExtra:
	print("  " + format_name(gn) + "# " + str(iniExtra[gn]), file=fout);
print("];\n", file=fout);

print("@KZeroMed = [", file=fout);
for gn in medZero:
	print("  " + format_name(gn) + "# " + str(medZero[gn]), file=fout);
print("];\n", file=fout);

print("@KNarrowMed = [", file=fout);
for gn in medNarrow:
	print("  " + format_name(gn) + "# " + str(medNarrow[gn]), file=fout);
print("];\n", file=fout);

print("@KMediumMed = [", file=fout);
for gn in medMedium:
	print("  " + format_name(gn) + "# " + str(medMedium[gn]), file=fout);
print("];\n", file=fout);

print("@KWideMed = [", file=fout);
for gn in medWide:
	print("  " + format_name(gn) + "# " + str(medWide[gn]), file=fout);
print("];\n", file=fout);

print("@KExtraMed = [", file=fout);
for gn in medExtra:
	print("  " + format_name(gn) + "# " + str(medExtra[gn]), file=fout);
print("];\n", file=fout);

fout.close()

font.close()
