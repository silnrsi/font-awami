#!/usr/bin/python3

# Outputs a set of rules to perform bariyeh tail kerning.

# Run this script from the tools/scripts directory where the file is located:
#		python3 genBariyehKernRules.py

import sys

def ExpandSeq(seqSoFar, slotTotal, depth):
	print("ExpandSeq" + " " + str(slotTotal) + " depth=" + str(depth))
	print(seqSoFar)
	
	if len(seqSoFar) >= slotTotal:
		needed = OutputRuleIfNeeded(seqSoFar)
		return needed
	else:
		for wc in range(numClasses):
			nextSeq = seqSoFar.copy()
			nextSeq.append(wc)
			#print("nextSeq=")
			#print(nextSeq)
			needed = ExpandSeq(nextSeq, slotTotal, depth+1)
			print("return to ExpandSeq depth " + str(depth))
			if not needed:
				return True		# nothing more is needed for this sequence, but something might be needed for another
		return True
		
# end of ExpandSeq

def OutputRuleIfNeeded(seq):
	print("OutputRuleIfNeeded")
	print(seq)
	totalWidth = 0
	
	if seq[0] == 0:
		return True;	# don't bother with KZeroIni, since the class is empty
		
	if TooManyZeroSlots(seq):
		return True;
		
	for w in seq:
		totalWidth += TypicalWidth(w)
	print("totalWidth=" + str(totalWidth))
	if totalWidth < BariyehWidth:
		kernValue = BariyehWidth - totalWidth
		OutputRule(seq, kernValue)
		#OutputTextString(seq)
		print("return True")
		return True
	else:
		print("return False")
		return False

# end of OutputRuleIfNeeded

def OutputRule(seq, kernValue):
	outputStr = "pos "
	first = True
	suffix = "Ini"
	for slot in seq:
		c = ClassName(slot) + suffix
		outputStr += "@" + c
		if first:
			outputStr += "' " + str(kernValue) + "  "
		first = False
		suffix = "Med  "
	outputStr += "nlqBariyehFin;"
		
	print(outputStr, file=fout)
# end of Output Rule

def TooManyZeroSlots(seq):
	# Zero-width glyphs are relatively rare (mainly medial jeems), so if there are 
	# a lot of them in the rule, don't bother.
	zeros = 0
	for s in seq:
		if s == 0:
			zeros += 1
			if zeros > 3:
				return True
	return False
	
def TypicalWidth(w):
	if w == 0:		# zero
		return 50
	elif w == 1:	# narrow
		return 400
	elif w == 2:	# medium
		return 800
	elif w == 3:	# wide
		return 1200
	else:
		return 1600		# extra wide
		
def ClassName(w):
	if w == 0:		# zero
		return "KZero"
	elif w == 1:	# narrow
		return "KNarrow"
	elif w == 2:	# medium
		return "KMedium"
	elif w == 3:	# wide
		return "KWide"
	else:
		return "KExtra"

# -----------------------------
# Main routine

BariyehWidth = 2700
outfile = "../../source/opentype/bariyehKernRules.feax"
fout = open(outfile, 'w');

print("# This file was generated by the genBariyehKernRules.py script.\n", file=fout)

# Must match the number of classes generated by the genKernWidthClasses.py script:
numClasses = 5

slotCounts = [1, 2, 3, 4, 5]

for slots in slotCounts:
	stxt = " SLOT" if slots == 1 else " SLOTS"
	print("\n# RULES WITH " + str(slots) + stxt + "\n", file=fout)
	ExpandSeq([], slots, 0);

fout.close()
