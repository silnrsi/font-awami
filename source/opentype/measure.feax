#
#	File: main.feax
#
# FEAX code for Awami Nastaliq

#	This file is part of the Awami Nastaliq font 
#	(https://software.sil.org/awami) and is 
#	Copyright (c) 2014-2024 SIL Global (https://www.sil.org/),
#	with Reserved Font Names "Awami" and "SIL".
#
#	This Font Software is licensed under the SIL Open Font License,
#	Version 1.1.
#
#	You should have received a copy of the license along with this Font Software.
#	If this is not the case, go to (https://openfontlicense.org/) for all the
#	details including an FAQ.

# This file is intended to be included in main.feax.

# These lookups are run within feature calt.

# Temporary for our experiment:
@MeasureBase = [absBehIni.mm absMeemMed.sn absSeenFin absJeemIni.mmX absMeemMed._alt absLamMed.qf absWawFin
	absFehIni.hgM absHehGoalMed.jm absJeemMed.sn];
@MeasureBaseMark = [mkBehIni.mm mkMeemMed.sn mkSeenFin mkJeemIni.mmX mkMeemMed._alt mkLamMed.qf mkWawFin
	mkFehIni.hgM mkHehGoalMed.jm mkJeemMed.sn];

@MeasureInitialMark = [mkBehIni.mm mkJeemIni.mmX mkFehIni.hgM];

lookup InsertDxDy {
	lookupflag UseMarkFilteringSet @MeasureBaseMark;
	sub absBehIni.mm                  	by	absBehIni.mm                  	pxNULL  pyNULL   dx1050   dy550    dsc250    asc900   ;
	sub absMeemMed.sn                 	by	absMeemMed.sn                 	pxNULL  pyNULL   dx300    dy450    dscN150   asc950   ;
	sub absSeenFin                    	by	absSeenFin                    	pxNULL  pyNULL   dx2250   dy1500   dscN900   asc1800  ;
	sub absJeemIni.mmX                	by	absJeemIni.mmX                	pxNULL  pyNULL   dx800    dy450    dsc100    asc1150  ;
	sub absMeemMed._alt               	by	absMeemMed._alt               	pxNULL  pyNULL   dx250    dyN200   dscN1050  asc400   ;
	sub absLamMed.qf                  	by	absLamMed.qf                  	pxNULL  pyNULL   dx400    dy1000   dscN150   asc2050  ;
	sub absWawFin                     	by	absWawFin                     	pxNULL  pyNULL   dx750    dy500    dscN300   asc1350  ;
	sub absFehIni.hgM                 	by	absFehIni.hgM                 	pxNULL  pyNULL   dx350    dy600    dscN50    asc1550  ;
	sub absHehGoalMed.jm              	by	absHehGoalMed.jm              	pxNULL  pyNULL   dx1000   dy200    dscN450   asc1050  ;
	sub absJeemMed.sn                 	by	absJeemMed.sn                 	pxNULL  pyNULL   dx0      dy300    dscN300   asc850   ;
	#sub absWawFin
} InsertDxDy;

# Turn bases into marks so we can filter them out of all the the arithmetic.
lookup TreatBasesAsMarks {
	lookupflag IgnoreMarks;
	sub @MeasureBase  by  @MeasureBaseMark;
} TreatBasesAsMarks;

lookup AdjustAscentDescent4Marks {
	lookupflag UseMarkFilteringSet [@AscMarker @DscMarker @NuqtaLike];
	sub @AscMarker' lookup _AddToAscent 					@NuqtaLikeUpper;
	sub @DscMarker' lookup _SubtractFromAscent	@AscMarker	@NuqtaLikeLower;
} AdjustAscentDescent4Marks;

# lookup MeasureXFinal {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	ignore sub pxNULL'                   @DxMarker [@PxMarker pxNULL];		# ignore all but the last
# 	sub        pxNULL' lookup _InitPosX  @DxMarker;
# } MeasureXFinal;

# # Because we can't use rsub to process backwards, we need as many of these lookups
# # as there are bases in the sequence.
# # Note that @PxMarker does NOT include pxNull, which is what forces the backwards processing.

# lookup MeasureX2 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX2;

# lookup MeasureX3 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX3;

# lookup MeasureX4 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX4;

# lookup MeasureX5 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX5;


lookup MeasureXinitial {
	lookupflag UseMarkFilteringSet [@MeasureBaseMark @XMarkers];
	sub @MeasureInitialMark	pxNULL' lookup _Set0;
} MeasureXinitial;

lookup MeasureXforward {
	lookupflag UseMarkFilteringSet @XMarkers;
	sub @PxMarker	@DxMarker	pxNULL' lookup _AddMarkersXforward;
} MeasureXforward;


lookup MeasureYFinal {
	lookupflag UseMarkFilteringSet @YMarkers;
	ignore sub pyNULL'                   @DyMarker [@PyMarker pyNULL];		# ignore all but the last
	sub        pyNULL' lookup _InitPosY  @DyMarker;
} MeasureYFinal;

# Because we can't use rsub to process backwards, we need as many of these lookups
# as there are bases in the sequence.
# Note that @PyMarker does NOT include pyNull, which is what forces the backwards processing.

lookup MeasureY2 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub        pyNULL' lookup _AddMarkersY  @DyMarker;
} MeasureY2;

lookup MeasureY3 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY3;

lookup MeasureY4 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY4;

lookup MeasureY5 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY5;


lookup RestoreBases {
	lookupflag UseMarkFilteringSet @MeasureBaseMark;
	sub @MeasureBaseMark  by  @MeasureBase;
} RestoreBases;