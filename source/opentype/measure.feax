#
#	File: measure.feax
#
# FEAX code for Awami Nastaliq

#	This file is part of the Awami Nastaliq font 
#	(https://software.sil.org/awami) and is 
#	Copyright (c) 2014-2024 SIL Global (https://www.sil.org/),
#	with Reserved Font Names "Awami" and "SIL".
#
#	This Font Software is licensed under the SIL Open Font License,
#	Version 1.1.
#
#	You should have received a copy of the license along with this Font Software.
#	If this is not the case, go to (https://openfontlicense.org/) for all the
#	details including an FAQ.

# This file is intended to be included in main.feax.

# These lookups are run within feature calt.

# lookup InsertMarkers:
###include(../../source/opentype/autoKernMetrics.feax);
include(../../source/opentype/autoKernMetrics_TEMP.feax);

# Insert "extra ascent/descent" markers into the stream to represent the presence
# of nuqtas and/or marks.
lookup HandleMarkAsc {
	lookupflag UseMarkFilteringSet [@PyInitMarker @NuqtaLikeUpper @DiacUpper];
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@DiacUpper;
	sub	@PyInitMarker' lookup _InsertNuqtaDiacMarker	@NuqtaLikeUpper;
} HandleMarkAsc;

lookup HandleMarkDsc {
	lookupflag UseMarkFilteringSet [@PyInitMarker @NuqtaLikeLower @DiacLower];
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@DiacLower;
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@NuqtaLikeLower;
} HandleMarkDsc;

# Turn bases into marks so we can filter them out of all the the arithmetic.
lookup TreatBasesAsMarks {
	lookupflag IgnoreMarks;
	sub @MeasureBase  by  @MeasureBaseMark;
} TreatBasesAsMarks;


# Measure widths backward

# lookup MeasureXFinal {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	ignore sub pxNULL'                   @DxMarker [@PxMarker pxNULL];		# ignore all but the last
# 	sub        pxNULL' lookup _InitPosX  @DxMarker;
# } MeasureXFinal;

# Because we can't use rsub to process backwards, we need as many of these lookups
# as there are bases in the sequence that we want to measure.
# Note that @PxMarker does NOT include pxNull, which is what forces the backwards processing.

# lookup MeasureX2 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX2;

# lookup MeasureX3 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX3;

# lookup MeasureX4 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX4;

# lookup MeasureX5 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX5;

# Measure widths forward

# lookup MeasureXinitial {
# 	lookupflag UseMarkFilteringSet [@MeasureBaseMark @XMarkers];
# 	sub @MeasureInitialMark	pxfNULL' lookup _Set0;
# } MeasureXinitial;

# lookup MeasureXforward {
# 	lookupflag UseMarkFilteringSet @XfMarkers;
# 	sub @PxfMarker	@DxMarker	pxfNULL' lookup _AddMarkersXforward;
# } MeasureXforward;

# Measure heights

# lookup MeasureYFinal { -- replaced by AppendFinalPy
# 	lookupflag UseMarkFilteringSet @YMarkers;
# 	ignore sub pyNULL'                   @DyMarker [@PyMarker pyNULL];		# ignore all but the last
# 	sub        pyNULL' lookup _InitPosY  @DyMarker;
# } MeasureYFinal;

# Because we can't use rsub to process backwards, we need as many of these lookups
# as there are bases in the sequence that we need to measure.
# Note that @PyMarker does NOT include pyNull, which is what forces the backwards processing.

lookup MeasureY2 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub        pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY2;

lookup MeasureY3 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY3;

lookup MeasureY4 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY4;

lookup MeasureY5 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY5;

lookup MeasureY6 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY6;

# asc/dsc -> pt/pb
# We include the @PyMarker to recognize the boundaries of the bases.
lookup AddNuqtaAscent {
	lookupflag UseMarkFilteringSet [@PyMarker @AscMarker @AscXMarker];
	sub @PyMarker @AscXMarker @AscMarker' lookup _AddNuqtaUpperHt;
} AddNuqtaAscent;

lookup SubtractNuqtaDescent {
	lookupflag UseMarkFilteringSet [@PyMarker @DscMarker @DscXMarker @NuqtaLike];
	sub @PyMarker @DscXMarker @DscMarker' lookup _SubtractNuqtaLowerHt;
} SubtractNuqtaDescent;

# Convert markers pt/pb back to asc/dsc
# lookup MarkersYtb2AscDsc:
include(../../source/opentype/arithMarkersYtb2AscDsc.feax);

lookup MakeAscentAbsolute {
	lookupflag UseMarkFilteringSet [@PyMarker @AscMarker];
	sub @PyMarker	@AscXMarker		@AscMarker' lookup _MakeAscAbsolute;
	sub @PyMarker					@AscMarker'	lookup _MakeAscAbsolute;
} MakeAscentAbsolute;

lookup MakeDescentAbsolute {
	lookupflag UseMarkFilteringSet [@PyMarker @DscMarker];
	sub @PyMarker	@DscXMarker		@DscMarker' lookup _MakeDscAbsolute;
	sub @PyMarker					@DscMarker' lookup _MakeDscAbsolute;
} MakeDescentAbsolute;

# Now actually do the comparison to calculate the kerning possible.

# Each CalculateKern lookup below works backward by one slice in the sequence to be kerned,
# kerning it a little more tightly if possible.
# We need a lookup for every potential slice - probably 15.

lookup CalculateKern1 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker];
	sub  @YtMarker'  lookup _CalcKern	@KwMarker  @YbMarker;
} CalculateKern1;

lookup CalculateKern2 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker];
	sub  @YtMarker'  lookup _CalcKern	@KwMarker  @YbMarker;
} CalculateKern2;

lookup CalculateKern3 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker];
	sub  @YtMarker'  lookup _CalcKern	@KwMarker  @YbMarker;
} CalculateKern3;

lookup CalculateKern4 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker];
	sub  @YtMarker'  lookup _CalcKern	@KwMarker  @YbMarker;
} CalculateKern4;


lookup RestoreBases {
	lookupflag UseMarkFilteringSet @MeasureBaseMark;
	sub @MeasureBaseMark  by  @MeasureBase;
} RestoreBases;
