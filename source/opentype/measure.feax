#
#	File: main.feax
#
# FEAX code for Awami Nastaliq

#	This file is part of the Awami Nastaliq font 
#	(https://software.sil.org/awami) and is 
#	Copyright (c) 2014-2024 SIL Global (https://www.sil.org/),
#	with Reserved Font Names "Awami" and "SIL".
#
#	This Font Software is licensed under the SIL Open Font License,
#	Version 1.1.
#
#	You should have received a copy of the license along with this Font Software.
#	If this is not the case, go to (https://openfontlicense.org/) for all the
#	details including an FAQ.

# This file is intended to be included in main.feax.

# These lookups are run within feature calt.


lookup InsertDxDy {
	lookupflag UseMarkFilteringSet @MeasureBaseMark;
	sub absBehIni.mm      	by	absBehIni.mm       	pxNULL  pxfNULL  dy550	pyNULL	dsc250	dsc250	dsc250	dsc250	dsc250	dsc250
																					asc900	asc900	asc900	asc900	asc900	asc900;
	sub absMeemMed.sn     	by	absMeemMed.sn      	pxNULL  pxfNULL  dy450	pyNULL	dscN150	dscN150	dscN150		# 300
																					asc950	asc950	asc950;
	sub absSeenFin        	by	absSeenFin         	pxNULL  pxfNULL  dy1500	py0		dsc0
																					asc1800	asc1800	asc1800	asc1800	asc1800	asc1800	asc1800;
	sub absJeemIni.mmX    	by	absJeemIni.mmX     	pxNULL  pxfNULL  dy450	pyNULL	dsc100	dsc100	dsc100	dsc100	dsc100	dsc100	dsc100	dsc100	dsc100		# 800
																					asc1150	asc1150	asc1150	asc1150	asc1150	asc1150	asc1150	asc1150	asc1150;
	sub absMeemMed._alt   	by	absMeemMed._alt    	pxNULL  pxfNULL  dyN200	pyNULL	dscN1050	dscN1050	dscN1050	# 250
																					asc400	asc400	asc400;
	sub absLamMed.qf      	by	absLamMed.qf       	pxNULL  pxfNULL  dy1000	pyNULL	dscN150	dscN150	dscN150	dscN150		# 400
																					asc2050	asc2050	asc2050	asc2050;
	sub absWawFin         	by	absWawFin          	pxNULL  pxfNULL  dy500	py0		dsc0	# 750
																					asc1350	asc1350	asc1350	asc1350	asc1350	asc1350	asc1350;
	sub absFehIni.hgM     	by	absFehIni.hgM      	pxNULL  pxfNULL  dy600	pyNULL	dscN50	dscN50	dscN50	dscN50    # 350
																					asc1550	asc1550	asc1550	asc1550;
	sub absHehGoalMed.jm  	by	absHehGoalMed.jm   	pxNULL  pxfNULL  dy200	pyNULL	dscN450	dscN450	dscN450	dscN450	dscN450	dscN450	dscN450	dscN450	dscN450	dscN450		# 1000
																					asc1050	asc1050	asc1050	asc1050	asc1050	asc1050	asc1050	asc1050	asc1050	asc1050;
	sub absJeemMed.sn     	by	absJeemMed.sn      	pxNULL  pxfNULL  dy300	pyNULL	dscN300   asc850;  # 0 width
	sub absAinIni           by	absAinIni           pxNULL  pxfNULL  dyN300	pyNULL	dscN1000	dscN1000	dscN1000	dscN1000	dscN1000	dscN1000	dscN1000	dscN1000	dscN1000	dscN1000	# 1000
																			pyNULL	asc400	asc400	asc400	asc400	asc400	asc400	asc400	asc400	asc400	asc400;
	sub absLamMed.be        by	absLamMed.be        pxNULL  pxfNULL  dy450	pyNULL	dscN550	dscN550	dscN550	dscN550	# 400
																					asc1550	asc1550	asc1550	asc1550;
	sub absBehMed.mm        by	absBehMed.mm        pxNULL  pxfNULL  dy500	pyNULL	dscN200	dscN200	dscN200	dscN200	dscN200	dscN200		# 650
																			asc750	asc750	asc750	asc750	asc750	asc750;
	###sub absWawFin

} InsertDxDy;


lookup HandleMarkAsc {
	lookupflag UseMarkFilteringSet [@PyInitMarker @NuqtaLikeUpper @DiacUpper];
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@DiacUpper;
	sub	@PyInitMarker' lookup _InsertNuqtaDiacMarker	@NuqtaLikeUpper;
} HandleMarkAsc;

lookup HandleMarkDsc {
	lookupflag UseMarkFilteringSet [@PyInitMarker @NuqtaLikeLower @DiacLower];
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@DiacLower;
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@NuqtaLikeLower;
} HandleMarkDsc;

# Turn bases into marks so we can filter them out of all the the arithmetic.
lookup TreatBasesAsMarks {
	lookupflag IgnoreMarks;
	sub @MeasureBase  by  @MeasureBaseMark;
} TreatBasesAsMarks;


# Measure widths backward

# lookup MeasureXFinal {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	ignore sub pxNULL'                   @DxMarker [@PxMarker pxNULL];		# ignore all but the last
# 	sub        pxNULL' lookup _InitPosX  @DxMarker;
# } MeasureXFinal;

# Because we can't use rsub to process backwards, we need as many of these lookups
# as there are bases in the sequence that we want to measure.
# Note that @PxMarker does NOT include pxNull, which is what forces the backwards processing.

# lookup MeasureX2 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX2;

# lookup MeasureX3 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX3;

# lookup MeasureX4 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX4;

# lookup MeasureX5 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX5;

# Measure widths forward

# lookup MeasureXinitial {
# 	lookupflag UseMarkFilteringSet [@MeasureBaseMark @XMarkers];
# 	sub @MeasureInitialMark	pxfNULL' lookup _Set0;
# } MeasureXinitial;

# lookup MeasureXforward {
# 	lookupflag UseMarkFilteringSet @XfMarkers;
# 	sub @PxfMarker	@DxMarker	pxfNULL' lookup _AddMarkersXforward;
# } MeasureXforward;

# Measure heights

# lookup MeasureYFinal { -- replaced by AppendFinalPy
# 	lookupflag UseMarkFilteringSet @YMarkers;
# 	ignore sub pyNULL'                   @DyMarker [@PyMarker pyNULL];		# ignore all but the last
# 	sub        pyNULL' lookup _InitPosY  @DyMarker;
# } MeasureYFinal;

# Because we can't use rsub to process backwards, we need as many of these lookups
# as there are bases in the sequence that we need to measure.
# Note that @PyMarker does NOT include pyNull, which is what forces the backwards processing.

lookup MeasureY2 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub        pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY2;

lookup MeasureY3 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY3;

lookup MeasureY4 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY4;

lookup MeasureY5 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY5;

lookup MeasureY6 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY6;

# asc/dsc -> pt/pb
lookup AddNuqtaAscent {
	lookupflag UseMarkFilteringSet [@AscMarker @AscXMarker];
	sub @AscXMarker @AscMarker' lookup _AddNuqtaUpperHt;
} AddNuqtaAscent;

lookup SubtractNuqtaDescent {
	lookupflag UseMarkFilteringSet [@DscMarker @DscXMarker];
	sub @DscXMarker @DscMarker' lookup _SubtractNuqtaLowerHt;
} SubtractNuqtaDescent;

# pt/pb -> asc / dsc
# lookup MarkersYtb2AscDsc;

lookup MarkersTemp {
	lookupflag UseMarkFilteringSet [@YtMarker @YbMarker];
	sub yt2750  by  asc2750;
	sub ybN700  by  dscN700;
} MarkersTemp;

lookup MakeAscentAbsolute {
	lookupflag UseMarkFilteringSet [@AscMarker @PyMarker];
	sub @PyMarker	@AscXMarker		@AscMarker' lookup _MakeAscAbsolute;
	sub @PyMarker					@AscMarker'	lookup _MakeAscAbsolute;
} MakeAscentAbsolute;

lookup MakeDescentAbsolute {
	lookupflag UseMarkFilteringSet [@DscMarker @PyMarker];
	sub @PyMarker	@DscXMarker		@DscMarker' lookup _MakeDscAbsolute;
	sub @PyMarker					@DscMarker' lookup _MakeDscAbsolute;
} MakeDescentAbsolute;


# lookup AdjustAscentDescent4Marks { ======================
# 	lookupflag UseMarkFilteringSet [@AscMarker @DscMarker @NuqtaLike];
# 	sub @YtMarker' lookup _AddToAscent 						@NuqtaLikeUpper;
# 	sub @YbMarker' lookup _SubtractFromAscent	@AscMarker	@NuqtaLikeLower;
# } AdjustAscentDescent4Marks;


lookup RestoreBases {
	lookupflag UseMarkFilteringSet @MeasureBaseMark;
	sub @MeasureBaseMark  by  @MeasureBase;
} RestoreBases;
