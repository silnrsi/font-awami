#
#	File: measure.feax
#
# FEAX code for Awami Nastaliq

#	This file is part of the Awami Nastaliq font 
#	(https://software.sil.org/awami) and is 
#	Copyright (c) 2014-2024 SIL Global (https://www.sil.org/),
#	with Reserved Font Names "Awami" and "SIL".
#
#	This Font Software is licensed under the SIL Open Font License,
#	Version 1.1.
#
#	You should have received a copy of the license along with this Font Software.
#	If this is not the case, go to (https://openfontlicense.org/) for all the
#	details including an FAQ.

# This file is intended to be included in main.feax.

# These lookups are run within feature calt.

# lookup InsertMarkers:
include(../../source/opentype/autoKernMetrics.feax);
###include(../../source/opentype/autoKernMetrics_TEMP.feax);

# Insert "extra ascent/descent" markers into the stream to represent the presence
# of nuqtas and/or marks.
lookup HandleMarkAsc {
	lookupflag UseMarkFilteringSet [@PyInitMarker @NuqtaLikeUpper @DiacUpper];
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@DiacUpper;
	sub	@PyInitMarker' lookup _InsertNuqtaDiacMarker	@NuqtaLikeUpper;
} HandleMarkAsc;

lookup HandleMarkDsc {
	lookupflag UseMarkFilteringSet [@PyInitMarker @NuqtaLikeLower @DiacLower];
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@DiacLower;
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@NuqtaLikeLower;
} HandleMarkDsc;


# Turn bases into marks so we can filter them out of all the arithmetic.
lookup TreatBasesAsMarks {
	lookupflag IgnoreMarks;
	# sub @KernBase by  @KernBaseMark;  # FEAX doesn't handle classes with different structures
	sub @Initials		by	@KernBaseMarkIni;
	sub @Medials		by	@KernBaseMarkMed;
	sub @KernFinals		by	@KernBaseMarkFin;
	sub @Isolates		by	@KernBaseMarkIso;
	sub @KernBaseOther	by	@KernBaseMarkOther;
} TreatBasesAsMarks;

# Must come after InsertMarkers.
# Adjust the YbMarkers and the initial kern value to account for nuqtas that hang
# out to the right of the initial base (eg, peh, yeh) and kaf/gaf diagonal strokes.
lookup AdjustForNuqtaOverhang {
	lookupflag UseMarkFilteringSet [@KernBaseMark @NuqtaLikeLower @KwMarker];
	sub @KwMarker' lookup _Dec400kw		mkBehIni.mm'	lookup _ExpandYbBy4	[_dot2l _dot3l _dot4l];
	sub @KwMarker' lookup _Dec400kw		mkJeemIni.mmX'	lookup _ExpandYbBy4	[_dot2l _dot3l _dot4l];
	sub @KwMarker' lookup _Dec200kw		mkJeemIni.mmX'	lookup _ExpandYbBy2	[_dot1l];
	sub @KwMarker' lookup _Dec200kw		mkLamIni.mm'	lookup _ExpandYbBy2 [_bar];

} AdjustForNuqtaOverhang;

lookup AdjustForBaseOverhang {
	lookupflag UseMarkFilteringSet [@KernBaseMarkWord @KwMarker];
	sub @KwMarker' lookup _Inc800kw		mkKehehIni.sd';

	# short sequences with overhang on right
	sub mkRehFin	@KwMarker' lookup _Dec800kw		@KernBaseMarkIni	[mkJeemFin mkAinFin];
	#sub mkRehFin.hgM	@KwMarker' lookup _Dec800kw		@KernBaseMarkIni	[mkJeemFin mkAinFin];
	sub 			@KwMarker' lookup _Dec400kw		@KernBaseMarkIni	[mkJeemFin mkAinFin];
} AdjustForBaseOverhang;


# Measure widths backward

# lookup MeasureXFinal {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	ignore sub pxNULL'                   @DxMarker [@PxMarker pxNULL];		# ignore all but the last
# 	sub        pxNULL' lookup _InitPosX  @DxMarker;
# } MeasureXFinal;

# Because we can't use rsub to process backwards, we need as many of these lookups
# as there are bases in the sequence that we want to measure.
# Note that @PxMarker does NOT include pxNull, which is what forces the backwards processing.

# lookup MeasureX2 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX2;

# lookup MeasureX3 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX3;

# lookup MeasureX4 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX4;

# lookup MeasureX5 {
# 	lookupflag UseMarkFilteringSet @XMarkers;
# 	sub pxNULL' lookup _AddMarkersX  @DxMarker @PxMarker;
# } MeasureX5;

# Measure widths forward

# lookup MeasureXinitial {
# 	lookupflag UseMarkFilteringSet [@KernBaseMark @XMarkers];
# 	sub @MeasureInitialMark	pxfNULL' lookup _Set0;
# } MeasureXinitial;

# lookup MeasureXforward {
# 	lookupflag UseMarkFilteringSet @XfMarkers;
# 	sub @PxfMarker	@DxMarker	pxfNULL' lookup _AddMarkersXforward;
# } MeasureXforward;

# Measure heights

# lookup MeasureYFinal { -- now the py0 is inserted by InitKernMetrics for isolates and finals
# 	lookupflag UseMarkFilteringSet @YMarkers;
# 	ignore sub pyNULL'                   @DyMarker [@PyMarker pyNULL];		# ignore all but the last
# 	sub        pyNULL' lookup _InitPosY  @DyMarker;
# } MeasureYFinal;

# Because we can't use rsub to process backwards, we need as many of these lookups
# as there are bases in the sequence that we need to measure.
# Note that @PyMarker does NOT include pyNull, which is what forces the backwards processing.

lookup MeasureY2 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub        pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY2;

lookup MeasureY3 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY3;

lookup MeasureY4 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY4;

lookup MeasureY5 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY5;

lookup MeasureY6 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY6;

lookup MeasureY7 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY7;

lookup MeasureY8 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY8;

lookup MeasureY9 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY9;

lookup MeasureY10 {
	lookupflag UseMarkFilteringSet @YMarkers;
	sub pyNULL' lookup _AddMarkersY  @DyMarker @PyMarker;
} MeasureY10;

# asc/dsc -> pt/pb
# We include the @PyMarker to recognize the boundaries of the bases.
lookup AddNuqtaAscent {
	lookupflag UseMarkFilteringSet [@PyMarker @AscMarker @AscXMarker];
	sub @PyMarker @AscXMarker @AscMarker' lookup _AddNuqtaUpperHt;
} AddNuqtaAscent;

lookup SubtractNuqtaDescent {
	lookupflag UseMarkFilteringSet [@PyMarker @DscMarker @DscXMarker @NuqtaLike];
	sub @PyMarker @DscXMarker @DscMarker' lookup _SubtractNuqtaLowerHt;
} SubtractNuqtaDescent;

# Convert markers pt/pb back to asc/dsc
# lookup MarkersYtb2AscDsc:
include(../../source/opentype/arithMarkersYtb2AscDsc.feax);

lookup MakeAscentAbsolute {
	lookupflag UseMarkFilteringSet [@PyMarker @AscMarker];
	sub @PyMarker	@AscXMarker		@AscMarker' lookup _MakeAscAbsolute;
	sub @PyMarker					@AscMarker'	lookup _MakeAscAbsolute;
} MakeAscentAbsolute;

lookup MakeDescentAbsolute {
	lookupflag UseMarkFilteringSet [@PyMarker @DscMarker];
	sub @PyMarker	@DscXMarker		@DscMarker' lookup _MakeDscAbsolute;
	sub @PyMarker					@DscMarker' lookup _MakeDscAbsolute;
} MakeDescentAbsolute;

# Now actually do the comparisons to calculate the amount of kerning that is possible.

# Each CalculateKern lookup below works backward by one slice in the sequence to be kerned,
# kerning a little more tightly if possible.
# The EnforceBlock checks to see if we are blocked and forces the process to terminate.
# These lookups need to be separate because they use different filters.
# We need this set of lookups for every potential kerned slice. Right now
# we are allowing 12.

# TODO: Use some do-loops to generate these.

# do	forlet n = range(0,5);
# 	let lnameX = "_XXX" + str(n);
# 	let lnameY = "_YYY" + str(n);

# 	{
# 		lookup $lnameX {
# 			sub kblock by kblockR;
# 		} $lnameX;

# 		if n > 3;
# 		{
# 			lookup $lnameY {
# 				sub kblock by kblockI;
# 			} $lnameY;
# 		}
# 	}


lookup CalculateKern1 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern1;

lookup EnforceBlock1 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock1;

# Once a glyph has been completely kerned, invalidate its bottoms.
lookup CleanUpKernedGlyph1 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph1;

# Once a glyph has had something kern under it completely, invalidate its tops.
lookup CleanUpTopGlyph1 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph1;

lookup ShiftPrevGlyph1 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph1;

lookup ShiftNextGlyph1 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph1;


lookup CalculateKern2 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern2;

lookup EnforceBlock2 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock2;

# Once a glyph has been completely kerned, invalidate its bottoms.
lookup CleanUpKernedGlyph2 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph2;

# Once a glyph has had something kern under it completely, invalidate its tops.
lookup CleanUpTopGlyph2 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph2;

lookup ShiftPrevGlyph2 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph2;

lookup ShiftNextGlyph2 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph2;


lookup CalculateKern3 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern3;

lookup EnforceBlock3 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock3;

# Once a glyph has been completely kerned, invalidate its bottoms.
lookup CleanUpKernedGlyph3 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph3;

# Once a glyph has had something kern under it completely, invalidate its tops.
lookup CleanUpTopGlyph3 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph3;

lookup ShiftPrevGlyph3 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph3;

lookup ShiftNextGlyph3 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph3;


lookup CalculateKern4 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern4;

lookup EnforceBlock4 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock4;

lookup CleanUpKernedGlyph4 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph4;

lookup CleanUpTopGlyph4 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph4;

lookup ShiftPrevGlyph4 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph4;

lookup ShiftNextGlyph4 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph4;


lookup CalculateKern5 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern5;

lookup EnforceBlock5 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock5;

lookup CleanUpKernedGlyph5 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph5;

lookup CleanUpTopGlyph5 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph5;

lookup ShiftPrevGlyph5 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph5;

lookup ShiftNextGlyph5 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph5;


lookup CalculateKern6 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern6;

lookup EnforceBlock6 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock6;

lookup CleanUpKernedGlyph6 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph6;

lookup CleanUpTopGlyph6 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph6;

lookup ShiftPrevGlyph6 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph6;

lookup ShiftNextGlyph6 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph6;


lookup CalculateKern7 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern7;

lookup EnforceBlock7 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock7;

lookup CleanUpKernedGlyph7 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph7;

lookup CleanUpTopGlyph7 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph7;

lookup ShiftPrevGlyph7 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph7;

lookup ShiftNextGlyph7 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph7;

lookup CalculateKern8 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern8;

lookup EnforceBlock8 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock8;

lookup CleanUpKernedGlyph8 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph8;

lookup CleanUpTopGlyph8 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph8;

lookup ShiftPrevGlyph8 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph8;

lookup ShiftNextGlyph8 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph8;

lookup CalculateKern9 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern9;

lookup EnforceBlock9 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock9;

lookup CleanUpKernedGlyph9 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph9;

lookup CleanUpTopGlyph9 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph9;

lookup ShiftPrevGlyph9 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph9;

lookup ShiftNextGlyph9 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph9;

lookup CalculateKern10 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern10;

lookup EnforceBlock10 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock10;

lookup CleanUpKernedGlyph10 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph10;

lookup CleanUpTopGlyph10 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph10;

lookup ShiftPrevGlyph10 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph10;

lookup ShiftNextGlyph10 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph10;

lookup CalculateKern11 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern11;

lookup EnforceBlock11 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock11;

lookup CleanUpKernedGlyph11 {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} CleanUpKernedGlyph11;

lookup CleanUpTopGlyph11 {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} CleanUpTopGlyph11;

lookup ShiftPrevGlyph11 {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} ShiftPrevGlyph11;

lookup ShiftNextGlyph11 {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} ShiftNextGlyph11;

lookup CalculateKern12 {
	lookupflag UseMarkFilteringSet [@KwMarker @YtMarker @YbMarker @Kblocks];
	sub  @YtMarker'  lookup _TryKern	@KwMarker  @YbMarker;
} CalculateKern12;

lookup EnforceBlock12 {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} EnforceBlock12;

# I don't think we need these four lookups for the last step.
# lookup CleanUpKernedGlyph12 {
# 	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
# 	rsub @YbMarker' @KwMarker	by  ybIgnore;
# } CleanUpKernedGlyph12;

# lookup CleanUpTopGlyph12 {
# 	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
# 	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
# } CleanUpTopGlyph12;

# lookup ShiftPrevGlyph12 {
# 	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
# 	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
# } ShiftPrevGlyph12;

# lookup ShiftNextGlyph12 {
# 	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
# 	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
# } ShiftNextGlyph12;


# If a block occurred, reduce the amount of kerning a bit to avoid an actual collision.
lookup AddSpaceWhenBlocked {
	sub kblock	@KwMarker' lookup _DecKern;
} AddSpaceWhenBlocked;


lookup RestoreBases {
	lookupflag UseMarkFilteringSet @KernBaseMark;
	# sub @KernBaseMark  by  @KernBase;  # FEAX doesn't handle classes with different structures
	sub @KernBaseMarkIni	by	@Initials;
	sub @KernBaseMarkMed	by	@Medials;
	sub @KernBaseMarkFin	by	@KernFinals;
	sub @KernBaseMarkIso	by	@Isolates;
	sub @KernBaseMarkOther	by	@KernBaseOther;
} RestoreBases;

# lookup CleanUpMarkers {
# 	lookupflag UseMarkFilteringSet [@DyMarker @YtMarker @YbMarker @Kblocks @PyMarker];
# 	sub @DyMarker by NULL;
# 	sub @YtMarker by NULL;
# 	sub @YbMarker by NULL;
# 	sub @Kblocks by NULL;
# 	sub @PyMarker by NULL;
# } CleanUpMarkers;