#
#	File: main.feax
#
# Main FEA code for Awami Nastaliq

#	This file is part of the Awami Nastaliq font 
#	(https://software.sil.org/awami) and is 
#	Copyright (c) 2014-2024 SIL Global (https://www.sil.org/),
#	with Reserved Font Names "Awami" and "SIL".
#
#	This Font Software is licensed under the SIL Open Font License,
#	Version 1.1.
#
#	You should have received a copy of the license along with this Font Software.
#	If this is not the case, go to (https://openfontlicense.org/) for all the
#	details including an FAQ.

languagesystem latn dflt ;
languagesystem arab dflt;

#========== CLASSES ==========

@NuqtaUpper = [ _dot1u _dot2u  _dot2vu _dot3u _dot3uD _dot4u];
@NuqtaLower = [_dot1l _dot2l _dot2vl _dot3l _dot4l];
@Nuqta = [@NuqtaUpper @NuqtaLower];
@NuqtaLikeUpper = [@NuqtaUpper  _hamza  _hamza.arabic  absHamzaAbove _smallTah  _smallV  _smallTah2dots  _kafSquiggle
	_smallThreeAbove  _smallTwoAbove  _wasla _wavyHamza
	_dot2u__squiggle  _dot3u__squiggle  _dot3Noon
	_dot1u_smallV  _dot1u_smallTah
	_noDot1u _noDot2u ];
@NuqtaLikeLower = [@NuqtaLower _hehHook.small _smallTahBelow _smallVBelow _smallTah2dotsBelow _smallVinvBelow _ring  _attachedRing _smallFourBelow
	_dot2lIM  _dot2lIM.small _dot2l.tail
	_noDot2l _noDot2l.small];

@NLowerUpper = [_dot1l__smallTah  _dot2vl__smallTah  _dot1l__dot1u  _hehHook__dot2u
	_ring__dot2u  _noDot2l__hamza  _dot2lIM__smallV  _hehHook__hamza _dot3l__dot3u
	_ring__dot1u  _dot2lIM__smallTwo  _dot2lIM__smallThree];
@NLowerNoUpper = [_dot1l  _dot2vl  _dot1l  _hehHook.small
	_attachedRing  _noDot2l  _dot2l  _hehHook.small  _dot3l
	_attachedRing  _dot2l  _dot2l];
@NUpperNoLower = [_smallTah  _smallTah  _dot1u.small  _dot2u.small
	_dot2u.small  absHamzaAbove  _smallV  absHamzaAbove  _dot3u.small
	_dot1u.small  _smallTwoAbove  _smallThreeAbove];

@NuqtaLike = [@NuqtaLikeUpper @NuqtaLikeLower @NLowerUpper];

@DiacUpper = [@_nUpper @_mUpper @_honorific];
@DiacLower = [@_n1Lower @_n23Lower @_mLower @_hamzaLower];

# gafStroke, graf, _kafTop_bj

@AllMarksUpper = [@NuqtaLikeUpper @DiacUpper];
@AllMarksLower = [@NuqtaLikeLower @DiacLower];
@AllMarksMiddle = [@_squiggle @_bar _attachedRingMid ];

@NuqtaUpperWide_sub = [_dot2u _dot3u _dot4u];
@NuqtaUpperWide_small_sub = [_dot2u.small _dot3u.small _dot4u.small];

@NLikeUpperTall = [_dot3u _dot3u.small _dot4u _dot4u.small _dot2vu _smallTah _smallTah2dots
	_dot1u_smallTah _dot1u_smallTah.kf _dot1u_smallV _dot1u_smallV.kf _dot1u_ngMark 
	_dot2lIM__hamza _verticalStroke];

# Bariyeh width: 2600
#@Zero = []; # < 100
# 100-500
#@NarrowIni = [absBehIni.be];
#@NarrowMed = [absJeemMed.by absJeemMed.jm];
# 500 - 900
#@MediumIni = [absBehIni.sn absBehIni.hgM		absJeemIni.sn absFehIni.by];
#@MediumMed = [absBehMed.beF absJeemMed.sd 
#		absSadMed absMeemMed.by absHehGoalMed.by];
# 900 - 1300
#@WideIni = [absBehIni.by absJeemIni.by absTahIni.by absAinIni.by absLamIni.by absLamMed.by absMeemIni.by absHehGoalIni.by
#		absBehIni.jm absBehIni.mm absSeenIni.jm];
#@WideMed = [absBehMed.jm absBehMed.by];
# > 1300
#@ExtraIni = [absSeenIni.by absSeenIni.jm absSadIni.by absSadIni.jm absKehehIni.by absHehDoachashmeeIni.by];
#@ExtraMed = [absSeenMed.by absSadMed.by];

include(../../source/opentype/bariyehKernClasses.feax);


#========== LOOKUPS ==========

# The following three lookups change "RenderingUnknown" to "RenderingOpenType"
lookup _FontCheck_Unknow {
  lookupflag IgnoreMarks;
    sub [U n k o w ] by [O p e T y];
} _FontCheck_Unknow ;

lookup _FontCheck_n {
  lookupflag IgnoreMarks;
    sub n by p e;
} _FontCheck_n ;

lookup FontCheck {
  lookupflag IgnoreMarks ;
    sub [R] e n d e r i n g
      U' lookup _FontCheck_Unknow
      n' lookup _FontCheck_Unknow
      k' lookup _FontCheck_Unknow
      n'
      o' lookup _FontCheck_Unknow
      w' lookup _FontCheck_Unknow
      n' lookup _FontCheck_n;
} FontCheck ;

# TODO: comment out lookups that are not used.
lookup Kern50 { pos @AllBases 50; } Kern50;
lookup Kern100 { pos @AllBases 100; } Kern100;
lookup Kern150 { pos @AllBases 150; } Kern150;
lookup Kern200 { pos @AllBases 200; } Kern200;
lookup Kern250 { pos @AllBases 250; } Kern250;
lookup Kern300 { pos @AllBases 300; } Kern300;
lookup Kern350 { pos @AllBases 350; } Kern350;
lookup Kern400 { pos @AllBases 400; } Kern400;
lookup Kern450 { pos @AllBases 450; } Kern450;
lookup Kern500 { pos @AllBases 500; } Kern500;
lookup Kern550 { pos @AllBases 550; } Kern550;
lookup Kern600 { pos @AllBases 600; } Kern600;
lookup Kern650 { pos @AllBases 650; } Kern650;
lookup Kern700 { pos @AllBases 700; } Kern700;
lookup Kern750 { pos @AllBases 750; } Kern750;
lookup Kern800 { pos @AllBases 800; } Kern800;
lookup Kern850 { pos @AllBases 850; } Kern850;
lookup Kern900 { pos @AllBases 900; } Kern900;
lookup Kern950 { pos @AllBases 950; } Kern950;
lookup Kern1000 { pos @AllBases 1000; } Kern1000;
lookup Kern1050 { pos @AllBases 1050; } Kern1050;
lookup Kern1100 { pos @AllBases 1100; } Kern1100;
lookup Kern1150 { pos @AllBases 1150; } Kern1150;
lookup Kern1200 { pos @AllBases 1200; } Kern1200;
lookup Kern1250 { pos @AllBases 1250; } Kern1250;
lookup Kern1300 { pos @AllBases 1300; } Kern1300;
lookup Kern1350 { pos @AllBases 1350; } Kern1350;
lookup Kern1400 { pos @AllBases 1400; } Kern1400;
lookup Kern1450 { pos @AllBases 1450; } Kern1450;
lookup Kern1500 { pos @AllBases 1500; } Kern1500;
lookup Kern1550 { pos @AllBases 1550; } Kern1550;
lookup Kern1600 { pos @AllBases 1600; } Kern1600;
lookup Kern1650 { pos @AllBases 1650; } Kern1650;
lookup Kern1700 { pos @AllBases 1700; } Kern1700;
lookup Kern1750 { pos @AllBases 1750; } Kern1750;
lookup Kern1800 { pos @AllBases 1800; } Kern1800;
lookup Kern1850 { pos @AllBases 1850; } Kern1850;
lookup Kern1900 { pos @AllBases 1900; } Kern1900;
lookup Kern1950 { pos @AllBases 1950; } Kern1950;
lookup Kern2000 { pos @AllBases 2000; } Kern2000;
#lookup Kern2050 { pos @AllBases 2050; } Kern2050;	# not used
#lookup Kern2100 { pos @AllBases 2100; } Kern2100;	# not used
lookup Kern2150 { pos @AllBases 2150; } Kern2150;
lookup Kern2200 { pos @AllBases 2200; } Kern2200;
lookup Kern2250 { pos @AllBases 2250; } Kern2250;
lookup Kern2300 { pos @AllBases 2300; } Kern2300;
lookup Kern2350 { pos @AllBases 2350; } Kern2350;

@NuqtaPlusMark_sub = [_dot1u_smallV _dot1u_smallTah];
@NuqtaPlusMarkKf_sub = [_dot1u_smallV.kf _dot1u_smallTah.kf];

lookup _WideForms1 {
	sub absBehMed by absBehMed.kf_wide;
	sub @NuqtaPlusMark_sub by @NuqtaPlusMarkKf_sub;
} _WideForms1;

@NuqtaUpper_normal_sub = [_dot1u  _dot2u  _dot2vu  _dot3u  _dot3uD  _dot4u];
@NuqtaUpper_small_sub = [_dot1u.small  _dot2u.small  _dot2vu.small  _dot3u.small  _dot3uD.small  _dot4u.small];

lookup _WideForms2 {
	sub @NuqtaUpper_normal_sub by @NuqtaUpper_small_sub;
	sub absJeemMed by absJeemMed.kf_wide;
} _WideForms2;

# Use a short version of the keheh or gaf.
lookup _KafShort {
	lookupflag IgnoreMarks;
	do  forlet i,k = enumerate(feaclass('KehehIniFull_sub'));
		let g = feaclass('GafIniFull_sub')[i];
		let k_base = feaclass('KehehIniBase_sub')[i];
		let alt_top_k = feaclass('KehehIni_top_short_sub')[i];
		let alt_top_g = feaclass('GafIni_top_short_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $k_base $alt_top_g;
		}
	do  forlet i,k = enumerate(feaclass('KehehMedFull_sub'));
		let g = feaclass('GafMedFull_sub')[i];
		let k_base = feaclass('KehehMedBase_sub')[i];
		let alt_top_k = feaclass('KehehMed_top_short_sub')[i];
		let alt_top_g = feaclass('GafMed_top_short_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $k_base $alt_top_g;
		}
} _KafShort;

# Use an even shorter version of the keheh or gaf.
lookup _KafShorter {
	lookupflag IgnoreMarks;
	do  forlet i,k = enumerate(feaclass('KehehIniFull_sub'));
		let g = feaclass('GafIniFull_sub')[i];
		let k_base = feaclass('KehehIniBase_sub')[i];
		let alt_top_k = feaclass('KehehIni_top_shorter_sub')[i];
		let alt_top_g = feaclass('GafIni_top_shorter_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $k_base $alt_top_g;
		}
	do  forlet i,k = enumerate(feaclass('KehehMedFull_sub'));
		let g = feaclass('GafMedFull_sub')[i];
		let k_base = feaclass('KehehMedBase_sub')[i];
		let alt_top_k = feaclass('KehehMed_top_shorter_sub')[i];
		let alt_top_g = feaclass('GafMed_top_shorter_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $k_base $alt_top_g;
		}
} _KafShorter;

# Use a tall version of the keheh or gaf. Only needed for medials.
lookup _KafTall {
	lookupflag IgnoreMarks;
	do  forlet i,k = enumerate(feaclass('KehehMedFull_sub'));
		let g = feaclass('GafMedFull_sub')[i];
		let k_base = feaclass('KehehMedBase_sub')[i];
		let alt_top_k = feaclass('KehehMed_top_tall_sub')[i];
		let alt_top_g = feaclass('GafMed_top_tall_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $k_base $alt_top_g;
		}
} _KafTall;

# Use an even taller version of the keheh or gaf. Only needed for initials.
lookup _KafTaller {
	lookupflag IgnoreMarks;
	do  forlet i,k = enumerate(feaclass('KehehIniFull_sub'));
		let g = feaclass('GafIniFull_sub')[i];
		let k_base = feaclass('KehehIniBase_sub')[i];
		let alt_top_k = feaclass('KehehIni_top_taller_sub')[i];
		let alt_top_g = feaclass('GafIni_top_taller_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $k_base $alt_top_g;
		}
} _KafTaller;

# Use a medium-short version of the keheh or gaf (standard height with short diagonal).
# Only needed for medials.
lookup _KafMedshort {
	lookupflag IgnoreMarks;
	do  forlet i,k = enumerate(feaclass('KehehMedFull_sub'));
		let g = feaclass('GafMedFull_sub')[i];
		let k_base = feaclass('KehehMedBase_sub')[i];
		let alt_top_k = feaclass('KehehMed_top_medshort_sub')[i];
		let alt_top_g = feaclass('GafMed_top_medshort_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $k_base $alt_top_g;
		}
} _KafMedshort;

# Use a short version of the lam before a kaf.
lookup _LamShort {
	sub absLamIni  by  absLamIni_short;
	sub absLamMed  by  absLamMed_short;
} _LamShort;

lookup _NoChange {
	ignore sub @AllMarksUpper';
} _NoChange;


#========== GSUB rules ==========

# Separate bases from nuqtas
feature ccmp {

lookup FontCheck;		# both latn and arab

lookup DecomposeBases {
	sub		@BehComposed_sub 			by 		absDotlessBeh 	@BehMark_sub;
	sub		@JeemComposed_sub			by		absHah					@JeemMark_sub;
	sub		@SeenComposed_sub			by		absSeen					@SeenMark_sub;
	sub		@SadComposed_sub			by		absSad					@SadMark_sub;
	sub		@TahComposed_sub			by		absTah					@TahMark_sub;
	sub		@AinComposed_sub			by		absAin					@AinMark_sub;
	sub		@FehComposed_sub			by		absDotlessFeh		@FehMark_sub;
	sub		@KehehComposed_sub		by		absKeheh				@KehehMark_sub;
	sub		@GafComposed_sub			by		absGaf					@GafMark_sub;
	sub		@LamComposed_sub			by		absLam					@LamMark_sub;
	# no meem varieties at this point
	sub		@HehGoalComposed_sub	by		absHehGoal			@HehGoalMark_sub;
	sub		@NoonComposed_sub			by		absNoon					@NoonMark_sub;
	sub		@ChotiyehComposed_sub	by		nlqChotiyeh			@ChotiyehMark_sub;
	sub		@AlefComposed_sub			by		absAlef					@AlefMark_sub;
	sub		@DalComposed_sub			by		absDal					@DalMark_sub;
	sub		@RehComposed_sub			by		absReh					@RehMark_sub;
	sub		@WawComposed_sub			by		absWaw					@WawMark_sub;
	sub		@BariyehComposed_sub	by		nlqBariyeh			@BariyehMark_sub;
} DecomposeBases;

} ccmp;


# Recompose isolates:
feature isol {

lookup RecomposeIsolates {
	sub		absDotlessBeh 	@BehMark_sub			by		@BehComposed_sub;
	sub		absHah					@JeemMark_sub			by		@JeemComposed_sub;
	sub		absSeen					@SeenMark_sub 		by		@SeenComposed_sub;
	sub		absSad					@SadMark_sub			by		@SadComposed_sub;
	sub		absTah					@TahMark_sub			by		@TahComposed_sub;
	sub		absAin					@AinMark_sub			by		@AinComposed_sub;
	sub		absDotlessFeh		@FehMark_sub			by		@FehComposed_sub;
	sub		absKeheh				@KehehMark_sub		by		@KehehComposed_sub;
	sub		absGaf					@GafMark_sub			by		@GafComposed_sub;
	sub		absLam					@LamMark_sub			by		@LamComposed_sub;
	# no meem varieties at this point
	sub		absHehGoal			@HehGoalMark_sub	by		@HehGoalComposed_sub;
	sub		absNoon					@NoonMark_sub			by		@NoonComposed_sub;
	sub		nlqChotiyeh			@ChotiyehMark_sub	by		@ChotiyehComposed_sub;
	sub		absAlef					@AlefMark_sub			by		@AlefComposed_sub;
	sub		absDal					@DalMark_sub			by		@DalComposed_sub;
	sub		absReh					@RehMark_sub			by		@RehComposed_sub;
	sub		absWaw					@WawMark_sub			by		@WawComposed_sub;
	sub		nlqBariyeh			@BariyehMark_sub	by		@BariyehComposed_sub;
} RecomposeIsolates;

} isol;

@QafMark = [_dot2u];

feature fina {

lookup RightFinals2 {
	sub		absDotlessQaf'		@QafMark					by		absQafFin;
	sub		absNoon'					@NoonMark_sub			by		absNoonFin;
	sub		nlqChotiyeh'			@ChotiyehMark_sub	by		nlqChotiyehFin;
	sub		nlqBariyeh'				@BariyehMark_sub	by		nlqBariyehFin;
} RightFinals2;

lookup RightFinals1 {
	sub		absAlef						by 		absAlefFin;
	sub		absReh						by		absRehFin;
	sub		absDal						by		absDalFin;
	sub		absWaw						by		absWawFin;
	#sub		nlqBariyeh				by		nlqBariyehFin;
	sub		absTehMarbuta			by		absTehMarbutaFin;
	sub		absTehMarbutaGoal by 		absTehMarbutaGoalFin;
	
	# if there is still a noon or chotiyeh or qaf, it must be dotless
	sub		absNoon				by		absNoonFin;
	sub		nlqChotiyeh		by		nlqChotiyehFin;
	sub		absDotlessQaf	by		absQafFin;
} RightFinals1;

lookup RightFinalsDelNuqta {
	sub		absQafFin				_dot2u		by	absQafFin;
	sub		nlqChotiyehFin	_dot2lIM	by	nlqChotiyehFin;
} RightFinalsDelNuqta;

lookup RightFinalsDelNuqtaSub {
	sub		nlqChotiyehFin	_dot2lIM__smallV'			by 	_smallV;
	sub		nlqChotiyehFin	_dot2lIM__smallTwo'		by 	_smallTwoAbove;
	sub		nlqChotiyehFin	_dot2lIM__smallThree'	by 	_smallThreeAbove;
} RightFinalsDelNuqtaSub;

lookup DualFinals {
	sub			@DualPostCcmp_sub		by		@DualFinals_sub;
} DualFinals;

} fina;

# Make sure medial/initial noons and yehs use beh forms and qaf uses feh forms.
# Used for both initials and medials.
lookup FixIMNoonYehQaf {
	sub absNoon by absDotlessBeh;
	sub nlqChotiyeh by absDotlessBeh;
	sub absDotlessQaf by absDotlessFeh;
} FixIMNoonYehQaf;


feature medi {

lookup FixIMNoonYehQaf;

lookup MedialForms {
	lookupflag IgnoreMarks;
	sub		@DualPostCcmp_sub		by		@MedDefault_sub;
} MedialForms;

lookup InsertHehHook {
	sub absHehGoalMed by absHehGoalMed _hehHook.small;	
} InsertHehHook;

} medi;


feature init {

lookup FixIMNoonYehQaf;

lookup InitialForms {
	lookupflag IgnoreMarks;

	sub		@DualPostCcmp_sub		by		@IniDefault_sub;
} InitialForms;

} init;


feature rlig {

lookup DoublePreContext {
	lookupflag IgnoreMarks;
	
	sub @IniDefault_sub'	@BehForms absNoonFin			by	@IniBeNn_sub;
	sub @MedDefault_sub'	@BehForms absNoonFin			by	@MedBeNn_sub;
	
	sub @IniDefault_sub' @BehForms absRehFin			by	@IniBeRe_sub;
	sub @MedDefault_sub' @BehForms absRehFin			by	@MedBeRe_sub;
	
	sub @IniDefault_sub' @BehForms absHehGoalFin	by	@IniBeHg_sub;
	sub @MedDefault_sub' @BehForms absHehGoalFin	by	@MedBeHg_sub;

} DoublePreContext;


lookup BasicContextuals {
	lookupflag IgnoreMarks;
	
	# alef, lam, kaf, and dal use the default shapes
	
	sub @IniDefault_sub' absBehFin		by	@IniBeM2F_sub;
	
	sub @IniDefault_sub' @BehForms		by	@IniBe_sub;
	sub	@MedDefault_sub' @BehForms		by	@MedBe_sub;
	# beh shaping is continued below
	
	sub @IniDefault_sub' @JeemForms		by	@IniJm_sub;
	sub	@MedDefault_sub' @JeemForms		by	@MedJm_sub;
	
	sub @IniDefault_sub' @SeenForms		by	@IniSn_sub;
	sub	@MedDefault_sub' @SeenForms		by	@MedSn_sub;
		
	sub @IniDefault_sub' @SadForms		by	@IniSd_sub;
	sub	@MedDefault_sub' @SadForms		by	@MedSd_sub;
		
	sub @IniDefault_sub' @TahForms		by	@IniTa_sub;
	sub	@MedDefault_sub' @TahForms		by	@MedTa_sub;
			
	sub @IniDefault_sub' @AinForms		by	@IniAi_sub;
	sub	@MedDefault_sub' @AinForms		by	@MedAi_sub;

	sub @IniDefault_sub' @FehForms		by	@IniFe_sub;
	sub	@MedDefault_sub' @FehForms		by	@MedFe_sub;
		
	sub @IniDefault_sub' @MeemForms		by	@IniMm_sub;
	sub	@MedDefault_sub' @MeemForms		by	@MedMm_sub;
	
	sub @IniDefault_sub' @HehDoForms	by	@IniHd_sub;
	sub	@MedDefault_sub' @HehDoForms	by	@MedHd_sub;
	
	sub @IniDefault_sub' absHehGoalFin			by @IniHgF_sub;
	sub @MedDefault_sub' absHehGoalFin			by @MedHgF_sub;
	
	sub @IniDefault_sub' @HehGoalForms			by	@IniHgM_sub;
	sub	@MedDefault_sub' @HehGoalForms			by	@MedHgM_sub;
	
	sub @IniDefault_sub' absRehFin					by	@IniRe_sub;
	sub	@MedDefault_sub' absRehFin					by	@MedRe_sub;
	
	sub @IniDefault_sub' absNoonFin					by	@IniNn_sub;
	sub	@MedDefault_sub' absNoonFin					by	@MedNn_sub;
	
	sub @IniDefault_sub' absDotlessQaf			by	@IniQf_sub;
	sub @MedDefault_sub' absDotlessQaf			by	@MedQf_sub;
	
	sub @IniDefault_sub' nlqChotiyehFin			by	@IniCh_sub;
	sub	@MedDefault_sub' nlqChotiyehFin			by	@MedCh_sub;
	
	sub @IniDefault_sub' nlqBariyehFin			by	@IniBy_sub;
	sub	@MedDefault_sub' nlqBariyehFin			by	@MedBy_sub;
	
	sub @IniDefault_sub' [absQafFin absWawFin]	by	@IniQf_sub;
	sub	@MedDefault_sub' [absQafFin absWawFin]	by	@MedQf_sub;
	
	sub [absLamIni absLamMed]' absAlefFin		by	[absLamIni.al absLamMed.al];
	
} BasicContextuals;			# end of lookup


# Here we assume that glyphs before beh have their .be form.
lookup BehContextuals {
	lookupflag IgnoreMarks RightToLeft;
	
	# Use rsub to use backwards logic so that the glyphs at the end are processed first.
	
	rsub absBehMed.be'		absBehFin			by	absBehMed.beF;
	
	# Alternate teeth:
	rsub absBehMed.be'		@PostBeM1			by	absBehMed.beM1;		# high tooth
	rsub absBehMed.be'		@PostBeM2			by	absBehMed.beM2;		# low tooth
	
	# Initial beh:
	rsub absBehIni.be'		@PostBeM1			by	absBehIni.beM1;
	rsub absBehIni.be'		@PostBeM2			by	absBehIni.beM2;
	
	# Finally handle the first item in the chain:
	rsub @IniBe_sub'   [absBehMed absBehMed.beM1 absBehMed.benn]	by	@IniBeM2_sub;
	rsub @IniBe_sub'   absBehMed.beM2															by	@IniBeM1_sub;
	rsub @MedBe_sub'   [absBehMed absBehMed.beM1 absBehMed.benn]	by	@MedBeM2_sub;		# these two rules must be last, so that
	rsub @MedBe_sub'   absBehMed.beM2															by	@MedBeM1_sub;		# they only get triggered by non-behs

} BehContextuals;					# end of lookup


lookup KafContextuals {
	lookupflag IgnoreMarks;
	
	# Use straight kaf before another kaf.
	sub @KafPreKaf_default_sub' @KafForms		by	@KafPreKaf_kf_sub;
	
	# Use straight kaf before dal or teh-marbuta.
	sub @KafPreKaf_default_sub' [absDalFin absTehMarbutaFin]		by	@KafDk_sub;
} KafContextuals;

lookup ConnectToRoundKaf{
	lookupflag IgnoreMarks;
	
	# Use sad connection to round kafs, which happen before lams and alefs.
	sub @IniDefault_sub' [absKehehMed absGafMed] [absAlefFin @LamForms]		by	@IniSd_sub;
} ConnectToRoundKaf;


lookup MeemContextuals {
	lookupflag IgnoreMarks;
	
	# Alternate meem occurs before alef, dal, and lam unless it follows a lam.
	sub @PreMm_alt	absMeemMed'		@PostMm_alt		by		absMeemMed._alt;

} MeemContextuals;				# end of lookup

lookup PreMeemAlt {
	lookupflag IgnoreMarks;
	
	# Create proper connection to alternate meem.
	sub @IniMm_sub'	  absMeemMed._alt		by		@IniMmX_sub;
	sub @MedMm_sub'		absMeemMed._alt		by		@MedMmX_sub;

} PreMeemAlt;


lookup SeenContextuals {
	lookupflag IgnoreMarks;
	
	# Use "kashida" form of the seen between two seens.
	sub [absSeenIni.sn absSeenMed.sn absSeenMed.sn_sn]		absSeenMed.sn'	@SeenForms		by	absSeenMed.sn_sn;
	
	# TODO: tighter form of seen before flat-topped jeems.
	
} SeenContextuals;


lookup FinalContextuals {
	lookupflag IgnoreMarks;
	
	sub @PreQw_stfh  [absQafFin absWawFin]' by  [absQafFin._stfh absWawFin._stfh];
	
	sub @PreBe_bfkl	absBehFin' by absBehFin._bfkl;
	
	sub @PreChF_bfkl nlqChotiyehFin' by nlqChotiyehFin._bfkl;
	
	#sub @PreHgF_stfh absHehGoalFin' by absHehGoalFin._bfkl;  -- no longer used
	
	sub @PreReF_jkl absRehFin' by absRehFin._jkl;
	sub @PreReF_hgM absRehFin' by absRehFin._hgM;
	
	sub @LamForms		absAlefFin'		by	absAlefFin._lm;

} FinalContextuals;	


lookup SpecialContextuals {
	lookupflag IgnoreMarks;
	
	sub [absBehIni.beM2 absBehMed.behg]		absBehMed.hgF'		absHehGoalFin		by		absBehMed.hgF_be;
	
} SpecialContextuals;


@KafKfNormal = [absKehehIni.kf      absGafIni.kf      absKehehMed.dk      absGafMed.dk];
@KafKfWide   = [absKehehIni.kf_wide absGafIni.kf_wide absKehehMed.kf_wide absGafMed.kf_wide];

@KafFinNormal_sub = [absKehehFin absGafFin];
@KafFinTall_sub	= [absKehehFin_tall absGafFin_tall];

@NarrowPreKaf = [absBehMed absJeemMed absAinMed absMeemMed absHehGoalMed absFehMed];


lookup WideForms {
	lookupflag UseMarkFilteringSet @NuqtaLikeUpper;
	
	# These help us avoid collisions.
	
	sub absFehIni'		@KafForms		by	absFehIni.kf_wide;
	sub absFehMed'		@KafForms		by	absFehMed.kf_wide;
	
	# Special case: kaf w/3 dots + kaf/gaf; graf + kaf/gaf
	sub @KafKfNormal' [@NuqtaUpperWide_sub _grafStroke] @KafMFForms		by		@KafKfWide;
	
	# Special case: use a tall final kaf to keep the upper diacritic from having to jump above the kaf stroke
	# In a later pass, shift the nuqta and diacritic down.
	sub [@FehForms @AinForms] @NuqtaLikeUpper @NarrowPreKaf @KafFinNormal_sub'		by		@KafFinTall_sub;
	
	# Special case: tah + jeem + kaf/gaf
	sub [absTahIni.jm absTahMed.jm]                   absJeemMed'                  @KafMFForms  by  absJeemMed.kf_wide;
	sub [absTahIni.jm absTahMed.jm]  @NuqtaLikeUpper  absJeemMed'                  @KafMFForms  by  absJeemMed.kf_wide;
	sub [absTahIni.jm absTahMed.jm]                   absJeemMed' @NuqtaLikeUpper  @KafMFForms  by  absJeemMed.kf_wide;
	sub [absTahIni.jm absTahMed.jm]  @NuqtaLikeUpper  absJeemMed' @NuqtaLikeUpper  @KafMFForms  by  absJeemMed.kf_wide;

	# Special case: teh + khah + lam + diac
	# TODO: decide if this is needed.
	#sub absBehIni.jm  [@NuqtaLikeUpper @NuqtaLowerUpper]  absJeemMed' @NuqtaLikeUpper @LamMedForms  by  absJeemMed.kf_wide;
} WideForms;

lookup WideFormsDiac {
	lookupflag UseMarkFilteringSet @AllMarksUpper;
	
	# Special case: nuqta + diac(s)
	sub absBehMed' @NuqtaLikeUpper @DiacUpper @KafMFForms  by  absBehMed.kf_wide;

} WideFormsDiac;

# continuation of WideForms, for chaining rules
lookup WideForms_chain {
	lookupflag UseMarkFilteringSet @AllMarksUpper;
	
	# Special case: nuqta-small-V + kaf/gaf
	# TODO: raise AP on the NuqtaPlusMark.kf_sub glyphs.
	sub absBehMed' lookup _WideForms1 @NuqtaPlusMark_sub' lookup _WideForms1 @KafMFForms;
	sub @NuqtaPlusMark_sub' lookup _WideForms1 @KafMFForms;
	sub @NuqtaPlusMark_sub' lookup _WideForms1 @BehMedForms @KafMFForms;
	sub @NuqtaPlusMark_sub' lookup _WideForms1 @BehMedForms @NuqtaLikeUpper @KafMFForms;
	
	# Special case: beh + khah + kaf/gaf, or noon/teh + jeem + kaf/gaf
	# (In Graphite the lam requires a mark above it, but this works fine and is simpler.)
	sub [absBehIni.jm absBehMed.jm]  absJeemMed' lookup _WideForms2  @NuqtaUpper_normal_sub' lookup _WideForms2  [@KafMFForms @LamMFForms];
	sub [absBehIni.jm absBehMed.jm]  absJeemMed' lookup _WideForms2  @AllMarksUpper                              [@KafMFForms @LamMFForms];
	sub [absBehIni.jm absBehMed.jm]  @NuqtaLikeUpper
																	 absJeemMed' lookup _WideForms2  @AllMarksUpper                              [@KafMFForms @LamMFForms];
																	 
	# Special case: jeem w/3dots + kaf/alef
	sub absJeemMed' lookup _WideForms2  @NuqtaUpperWide_sub' lookup _WideForms2  @KafMFForms;
	sub absJeemMed' lookup _WideForms2  @NuqtaUpperWide_sub                      @AlefFinForms;
	
	# Special case: feh/ghain + jeem + kaf
	sub [@FehIMForms @AinIMForms] @NuqtaLikeUpper  absJeemMed' lookup _WideForms2
																										@NuqtaUpperWide_sub' lookup _WideForms2       @KafMFForms;
	sub [@FehIMForms @AinIMForms] @NuqtaLikeUpper  absJeemMed' lookup _WideForms2  @NuqtaLikeUpper  @KafMFForms;
	sub [@FehIMForms @AinIMForms] @NuqtaLikeUpper  absJeemMed' lookup _WideForms2                   @KafMFForms;

} WideForms_chain;

} rlig;		#end of feature


feature calt {

#lookup KafSplit {
	# Split kafs into base+top for easier manipulation.
#	sub @KehehIniFull_sub		by	_kehehTop	@KehehIniBase_sub;
#	sub @KehehMedFull_sub		by	_kehehTop	@KehehMedBase_sub;
#	sub @GafIniFull_sub			by	_gafTop		@KehehIniBase_sub;
#	sub @GafMedFull_sub			by	_gafTop		@KehehMedBase_sub;
#} KafSplit;


@KjNormalEntry = [absKehehMed.jm absGafMed.jm];
@KjLowEntry    = [absKehehMed.jm_lowentry absGafMed.jm_lowentry];
@NeedsLowKaf = [absBehIni absBehMed absSeenIni absSeenMed absSadIni absSadMed];

lookup KafCollisionsDiac {
	lookupflag UseMarkFilteringSet @AllMarksUpper;
	
	# Tall final kaf:
	sub @NLikeUpperTall  @DiacUpper [absKehehFin absGafFin]' by [absKehehFin_tall absGafFin_tall];
	
	# Tall: large-nuqta + diacritic + kaf
	sub @NLikeUpperTall  @DiacUpper  @KafMedFull_sub' lookup _KafTall; 
	
	# Special case: Lam + diac + kaf - shorten lam AND heighten kaf
	sub absLamIni' lookup _LamShort  @AllMarksUpper' lookup _NoChange  @KafMedForms' lookup _KafTall;
	sub absLamMed' lookup _LamShort  @AllMarksUpper' lookup _NoChange  @KafMedForms' lookup _KafTall;
	
} KafCollisionsDiac;

lookup KafCollisionsNuqta {
	lookupflag UseMarkFilteringSet @NuqtaLikeUpper;
	
	# Lower entry before jeem (since it as a unique entrance that doesn't work for standard alternate kafs)
	sub @NeedsLowKaf @NLikeUpperTall            @KjNormalEntry' @JeemMFForms  by  @KjLowEntry;
	sub [absFehIni absFehMed]  @NuqtaLikeUpper  @KjNormalEntry' @JeemMFForms  by  @KjLowEntry;
	sub [absKehehIni.kf absKehehMed.dk]         @KjNormalEntry' @JeemMFForms  by  @KjLowEntry;        
} KafCollisionsNuqta;

lookup KafCollisions {
	lookupflag IgnoreMarks;
	
	# Special case: alef-madda + kaf/gaf + final-heh-goal/beh/tah/feh - make kaf tall so alef-madda can squeeze in
	sub absAlefMaddaAbove  @KafIniForms' lookup _KafTaller;	
	
	# shorter gaf before kaf
	sub [absGafIni.kf absGafMed.dk]' lookup _KafShort  absKehehFin;
	
	# Shorten lam before kaf
	sub [absLamIni absLamMed]' lookup _LamShort @KafMFForms;
	
	# Lam + gaf +kaf/gaf =? special form of gaf
	sub [absLamIni_short absLamMed_short]  absGafMed.dk'  @KafMFForms  by  absGafMed.kf_lm;
	
} KafCollisions;


#lookup KafMerge {
	# Merge back kafs that have not been modified.
#	sub _kehehTop @KehehIniBase_sub by @KehehIniFull_sub;
#	sub _kehehTop @KehehMedBase_sub by @KehehMedFull_sub;
#	sub _gafTop @KehehIniBase_sub by @GafIniFull_sub;
#	sub _gafTop @KehehMedBase_sub by @GafMedFull_sub;
#} KafMerge;


lookup SplitNuqtaPairs {
	# TODO: see if there is a way to use classes for this.
	sub		_dot1l__smallTah'			by		_dot1l						_smallTah;
	sub		_dot2vl__smallTah'		by		_dot2vl						_smallTah;
	sub		_dot1l__dot1u'				by		_dot1l						_dot1u.small;
	sub		_hehHook__dot2u'			by		_hehHook.small		_dot2u.small;
	sub		_ring__dot2u'					by		_attachedRing			_dot2u.small;
	sub		_noDot2l__hamza'			by		_noDot2l					absHamzaAbove;
	sub		_dot2lIM__smallV'			by		_dot2l						_smallV;
	sub		_hehHook__hamza'			by		_hehHook.small		absHamzaAbove;
	sub		_dot3l__dot3u'				by		_dot3l						_dot3u.small;
	sub		_ring__dot1u'					by		_attachedRing			_dot1u.small;
	sub		_dot2lIM__smallTwo'		by		_dot2l						_smallTwoAbove;
	sub		_dot2lIM__smallThree'	by		_dot2l						_smallThreeAbove;
} SplitNuqtaPairs;

# After ring and dots have been split.
lookup WideForRing {
	lookupflag UseMarkFilteringSet @_ring;

	# Wider beh forms for noon-ring or teh-ring:  .hdR, mmR, .jmR mmXR, .nnR, .nn_hgbmR, .snR
	sub @BehNoRing_sub'  _attachedRing  by @BehForRing_sub;

} WideForRing;


lookup CleanupsDelete {
	lookupflag 0;
	
	# delete hehhook from all but medial hehgoals:
	sub  @HehGoalInitials'	_hehHook.small'		by		@HehGoalInitials;
	sub  absHehGoalFin'			_hehHook.small'		by		absHehGoalFin;
	
	# delete non-existent nuqtas:
	# TODO: merge into one rule?
	sub @BehIniForms'				_noDot1u'		by		@BehIniForms;		# noon ghunna
	sub @BehMedForms'				_noDot1u'		by		@BehMedForms;
	sub @BehFinForms'				_noDot1u'		by		@BehFinForms;
	sub @NoonForms'					_noDot1u'		by		@NoonForms;			# noon ghunna
	sub @FehIniForms'				_noDot1u'		by		@FehIniForms;		# dotless feh
	sub @FehMedForms'				_noDot1u'		by		@FehMedForms;		# dotless feh
	sub absFehFin'					_noDot1u'		by		absFehFin;			# dotless feh
	sub @QafForms'					_noDot2u'		by		@QafForms;			# dotless qaf
	sub @BehIniForms'				_noDot2l'		by		@BehIniForms;		# chotiyeh
	sub @BehMedForms'				_noDot2l'		by		@BehMedForms;
	sub @BehFinForms'				_noDot2l'		by		@BehFinForms;
	sub @ChotiyehForms'			_noDot2l'		by		@ChotiyehForms;	# chotiyeh
	sub @BariyehForms'			_noDot2l'		by		@BariyehForms;
	
	# delete kaf squiggle from initials and medials:
	sub	@KehehIniForms'			_kafSquiggle'			by		@KehehIniForms;
	sub	@KehehMedForms'			_kafSquiggle'			by		@KehehMedForms;
	
	# delete bogus kaf tops:
	sub absKehehMed.jm'		_kehehTop_m_bogus		by  absKehehMed.jm;
	sub absGafMed.jm'			_kehehTop_m_bogus		by  absGafMed.jm;
	sub absKehehMed.by'		_kehehTop_m_bogus		by  absKehehMed.by;
	sub absGafMed.by'			_kehehTop_m_bogus		by  absGafMed.by;
	sub absKehehMed.mm'		_kehehTop_m_bogus		by  absKehehMed.mm;
	sub absGafMed.mm'			_kehehTop_m_bogus		by  absGafMed.mm;
	
} CleanupsDelete;

lookup CleanupsSub {
	lookupflag 0;
	
	# the special marker for the chotiyeh should just use the standard glyphs at this point:
	sub  _dot2lIM'	by	_dot2l;
	
	# delete non-existent nuqtas:
	sub	_noDot2l__hamza'		by	absHamzaAbove;
	
	# delete kaf squiggle from initials and medials:
	sub @KehehIMForms _dot2u__squiggle'		by	_dot2u;
	sub @KehehIMForms _dot3u__squiggle'		by	_dot3u;
		
} CleanupsSub;

} calt;		# end of feature


#========== GPOS rules ==========

feature mark {

# There is ambiguity and overlap among the various attachment classes, so we do the most
# general attachments first, and put the more specific cases last so they override.

lookup AttachKafTop {
		lookupflag UseMarkFilteringSet @_kafTop;
		pos		base @kafTop		mark @_kafTop;
} AttachKafTop;

# In case the base doesn't have 'm' APs, use the 'n' ones. This will be overridden if possible.
lookup AttachLowerDiacsLikeNuqtas {
		lookupflag UseMarkFilteringSet @AllMarksLower;
		pos		base @n1Lower			mark @_mLower;
} AttachLowerDiacsLikeNuqtas;

lookup AttachUpperDiacsLikeNuqtas {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
		pos		base @nUpper			mark @_mUpper;
} AttachUpperDiacsLikeNuqtas;

lookup AttachLower {
		lookupflag UseMarkFilteringSet @AllMarksLower;
		pos		base @ring				mark @_ring;		# must be first
		pos		base @n1Lower			mark @_n1Lower;
    pos		base @n23Lower		mark @_n23Lower;
		pos		base @hehhook			mark @_hehhook;
		pos		base @hamzaLower	mark @_hamzaLower;
		pos		base @mLower			mark @_mLower;
} AttachLower;

lookup AttachMiddle {
		lookupflag UseMarkFilteringSet @AllMarksMiddle;
		pos		base @squiggle		mark @_squiggle;
		pos		base @bar					mark @_bar;
		pos		base @ring				mark @_ring;
} AttachMiddle;

lookup AttachUpper {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
    pos		base @nUpper  		mark @_nUpper;
} AttachUpper;

lookup AttachHamzaAsUpper {
		lookupflag UseMarkFilteringSet @_hamzaUpper;
		pos		base @nUpper			mark @_hamzaUpper;
} AttachHamzaAsUpper;

lookup AttachUpper2 {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
		pos		base @alef				mark @_mUpper;
		pos		base @mUpper			mark @_mUpper;
		pos		base @tahUpper		mark @_tahUpper;
		pos		base @hamzaUpper	mark @_hamzaUpper;
} AttachUpper2;

lookup AttachUpper3 {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
		pos		base @honorific		mark @_honorific;
} AttachUpper3;

# Special cases go last so that they override:
lookup AttachAlefDiacToYeh {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
		pos		base @alef				mark @_mUpper;
} AttachAlefDiacToYeh;

lookup AttachAlefDiacToLam {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
		# The rules below were copied from the autogenerated FEA file autogenerated from the rule below:
		# pos		base @nUpper			mark @_mUpperLam;
		# This is necessary to limit the rules to lams.
		# TODO: simplify this by adding a distinct AP to the lam forms duplicating nUpper.
		
		pos base absLamFin <anchor 1561 2671> mark @_mUpperLam;
		pos base absLamFin._kfTall <anchor 1565 3171> mark @_mUpperLam;
		pos base absLamFin_short <anchor 1555 2471> mark @_mUpperLam;
		pos base absLamIni <anchor 584 2148> mark @_mUpperLam;
		pos base absLamIni.ai <anchor 602 2718> mark @_mUpperLam;
		pos base absLamIni.al <anchor 553 2173> mark @_mUpperLam;
		pos base absLamIni.be <anchor 338 2527> mark @_mUpperLam;
		pos base absLamIni.beM1 <anchor 660 2677> mark @_mUpperLam;
		pos base absLamIni.beM2 <anchor 486 2255> mark @_mUpperLam;
		pos base absLamIni.behg <anchor 539 2148> mark @_mUpperLam;
		pos base absLamIni.benn <anchor 554 2848> mark @_mUpperLam;
		pos base absLamIni.bere <anchor 338 2255> mark @_mUpperLam;
		pos base absLamIni.by <anchor 797 2179> mark @_mUpperLam;
		pos base absLamIni.ch <anchor 204 2625> mark @_mUpperLam;
		pos base absLamIni.fe <anchor 651 2180> mark @_mUpperLam;
		pos base absLamIni.hd <anchor 119 2111> mark @_mUpperLam;
		pos base absLamIni.hgF <anchor 639 2006> mark @_mUpperLam;
		pos base absLamIni.hgM <anchor 207 2151> mark @_mUpperLam;
		pos base absLamIni.jm <anchor 825 3298> mark @_mUpperLam;
		pos base absLamIni.mm <anchor 282 2486> mark @_mUpperLam;
		pos base absLamIni.nn <anchor 395 2841> mark @_mUpperLam;
		pos base [absLamIni.qf absLamIni.snsn] <anchor 350 2442> mark @_mUpperLam;
		pos base absLamIni.re <anchor 461 2461> mark @_mUpperLam;
		pos base absLamIni.sd <anchor 980 2994> mark @_mUpperLam;
		pos base absLamIni.sn <anchor 283 2998> mark @_mUpperLam;
		pos base absLamIni.ta <anchor 1029 2493> mark @_mUpperLam;
		pos base [absLamIni_allah1 absLamMed_allah1] <anchor 524 2092> mark @_mUpperLam;
		pos base absLamIni_short <anchor 754 1618> mark @_mUpperLam;
		pos base absLamMed <anchor 586 2081> mark @_mUpperLam;
		pos base absLamMed.ai <anchor 706 2460> mark @_mUpperLam;
		pos base absLamMed.al <anchor 555 2183> mark @_mUpperLam;
		pos base absLamMed.be <anchor 317 2126> mark @_mUpperLam;
		pos base absLamMed.beF <anchor 589 2245> mark @_mUpperLam;
		pos base absLamMed.beM1 <anchor 668 2599> mark @_mUpperLam;
		pos base absLamMed.beM2 <anchor 503 2329> mark @_mUpperLam;
		pos base absLamMed.be_kfTall <anchor 337 2726> mark @_mUpperLam;
		pos base absLamMed.behg <anchor 564 2119> mark @_mUpperLam;
		pos base absLamMed.benn <anchor 581 2271> mark @_mUpperLam;
		pos base absLamMed.bere <anchor 342 2286> mark @_mUpperLam;
		pos base absLamMed.by <anchor 889 2377> mark @_mUpperLam;
		pos base absLamMed.by_kfTall <anchor 869 2977> mark @_mUpperLam;
		pos base absLamMed.ch <anchor 360 2312> mark @_mUpperLam;
		pos base absLamMed.ch_gfTall <anchor 360 3362> mark @_mUpperLam;
		pos base absLamMed.fe <anchor 603 2304> mark @_mUpperLam;
		pos base absLamMed.hd <anchor 201 2249> mark @_mUpperLam;
		pos base absLamMed.hgF <anchor 574 1969> mark @_mUpperLam;
		pos base absLamMed.hgM <anchor 188 2113> mark @_mUpperLam;
		pos base absLamMed.jm <anchor 983 2234> mark @_mUpperLam;
		pos base absLamMed.mm <anchor 517 2461> mark @_mUpperLam;
		pos base absLamMed.nn <anchor 496 2423> mark @_mUpperLam;
		pos base [absLamMed.qf absLamMed.snsn] <anchor 348 2554> mark @_mUpperLam;
		pos base absLamMed.re <anchor 476 2161> mark @_mUpperLam;
		pos base absLamMed.sd <anchor 983 2427> mark @_mUpperLam;
		pos base absLamMed.sn <anchor 321 2302> mark @_mUpperLam;
		pos base absLamMed.ta <anchor 954 2072> mark @_mUpperLam;
		pos base absLamMed_allah2 <anchor 478 1730> mark @_mUpperLam;
		pos base absLamMed_short <anchor 756 1641> mark @_mUpperLam;
} AttachAlefDiacToLam;

} mark;


@MarkFilter_mUpper	= [@mUpper_MarkBase @_mUpper];
@MarkFilter_mLower	= [@mLower_MarkBase @_mLower];
@MarkFilter_ring		= [@ring_MarkBase @_ring];

feature mkmk {

lookup AttMark2MarkUpper {
		lookupflag UseMarkFilteringSet @MarkFilter_mUpper;
		pos		mark @mUpper_MarkBase		mark @_mUpper;
} AttMark2MarkUpper;

lookup AttMark2MarkLower {
		lookupflag UseMarkFilteringSet @MarkFilter_mLower;
		pos		mark @mLower_MarkBase		mark @_mLower;
} AttMark2MarkLower;

lookup AttRing2Mark {
		lookupflag UseMarkFilteringSet @MarkFilter_ring;
		pos		mark @ring_MarkBase		mark @_ring;
} AttRing2Mark;

} mkmk;


feature curs {

lookup BasicConnections {
	lookupflag IgnoreMarks RightToLeft;
	pos cursive @entry @exit;
} BasicConnections;
	
} curs;			# end of feature


feature dist {

lookup BariyehKern {
		lookupflag IgnoreMarks;
		
include(../../source/opentype/bariyehKernRules.feax);

#pos absBehIni.beM1' lookup Kern2300 absBehMed.be absBehMed.by nlqBariyehFin;

} BariyehKern;

} dist;


feature kern {


} kern;