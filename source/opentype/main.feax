#
#	File: main.feax
#
# Main FEAX code for Awami Nastaliq

#	This file is part of the Awami Nastaliq font 
#	(https://software.sil.org/awami) and is 
#	Copyright (c) 2014-2024 SIL Global (https://www.sil.org/),
#	with Reserved Font Names "Awami" and "SIL".
#
#	This Font Software is licensed under the SIL Open Font License,
#	Version 1.1.
#
#	You should have received a copy of the license along with this Font Software.
#	If this is not the case, go to (https://openfontlicense.org/) for all the
#	details including an FAQ.

languagesystem latn dflt ;
languagesystem arab dflt;

#====================  CLASSES  ====================

@NuqtaUpper = [ _dot1u _dot2u  _dot2vu _dot3u _dot3uD _dot4u _dot1u.small _dot2u.small _dot3u.small _dot3uD.small _dot4u.small];
@NuqtaLower = [_dot1l _dot2l _dot2vl _dot3l _dot4l _dot1l.small _dot2l.small _dot2vl.small _dot3l.small _dot4l.small];
@Nuqta = [@NuqtaUpper @NuqtaLower];
@NuqtaLikeUpper = [@NuqtaUpper  _hamza  _hamza.arabic  absHamzaAbove _smallTah  _smallV  _smallTah2dots  _kafSquiggle
	_smallThreeAbove  _smallTwoAbove  _wasla  _wavyHamza  _grafStroke
	_dot2u__squiggle  _dot3u__squiggle  _dot3Noon
	_dot1u_smallV  _dot1u_smallV.kf  _dot1u_smallTah  _dot1u_smallTah.kf
	_noDot1u _noDot2u ];
@NuqtaLikeLower = [@NuqtaLower _hehHook.small _smallTahBelow _smallVBelow _smallTah2dotsBelow _smallVinvBelow _ring  _attachedRing _smallFourBelow
	_dot2lIM  _dot2lIM.small _dot2l.tail
	_noDot2l _noDot2l.small];
@NuqtaLikeMiddle = [_bar  _bar.narrow  _bar.waw  _bar.raised  _bar.raised_gaf  _attachedRingMid];

@NuqtaLikeUpMid = [@NuqtaLikeUpper @NuqtaLikeMiddle];

@NLowerUpper = [_dot1l__smallTah  _dot2vl__smallTah  _dot1l__dot1u  _hehHook__dot2u
	_ring__dot2u  _noDot2l__hamza  _dot2lIM__smallV  _hehHook__hamza _dot3l__dot3u
	_ring__dot1u  _dot2lIM__smallTwo  _dot2lIM__smallThree];
@NLowerNoUpper = [_dot1l  _dot2vl  _dot1l  _hehHook.small
	_attachedRing  _noDot2l  _dot2l  _hehHook.small  _dot3l
	_attachedRing  _dot2l  _dot2l];
@NUpperNoLower = [_smallTah  _smallTah  _dot1u.small  _dot2u.small
	_dot2u.small  absHamzaAbove  _smallV  absHamzaAbove  _dot3u.small
	_dot1u.small  _smallTwoAbove  _smallThreeAbove];

@NuqtaLike = [@NuqtaLikeUpper @NuqtaLikeLower @NLowerUpper];
@DiacUpper = [nlqZabar nlqPesh absShadda nlqUltaPesh nlqZabarTwoDots nlqKharizabar nlqJazm nlqJazm_openleft
	nlqDopesh nlqDozabar absVowelInvSmallV absVowelSmallV 
	absLeftArrowhead absMaddaAbove absNameMarker absNoonGhunnaMark absShortVowelMark absSmallDotlessHeadOfKhah
	absZwarakay absSmallUprightRectangularZero absSmallHighAinMark absSmallHighRehDadMark absSmallHighRehHahMark
	absSmallHighSadMark absSmallHighSeen absSmallHighTah
	_kharizabar_dopesh _kharizabar_pesh _kharizabar_zabar _kharizabar_dozabar _shadda_dopesh _shadda_dozabar
	_shadda_kharizabar _shadda_kharizabar_allah _shadda_pesh _shadda_zabar _wasla];
	### TODO: add honorifics
@DiacLower = [nlqZair nlqDozair nlqKharizair absEmptyCentreLowStop absSmallLowMeem];   # @_mLower

# gafStroke, graf, _kafTop_bj

@AllMarksUpper = [@NuqtaLikeUpper @DiacUpper];
@AllMarksLower = [@NuqtaLikeLower @DiacLower];
@AllMarksMiddle = [@_squiggle @_bar _attachedRingMid ];
@AllMarksUpMid = [@AllMarksUpper @AllMarksMiddle];
@AllMarks = [@AllMarksUpper @AllMarksLower @AllMarksMiddle];

@NuqtaUpperWide_sub = [_dot2u _dot3u _dot4u];
@NuqtaUpperWide_small_sub = [_dot2u.small _dot3u.small _dot4u.small];

@NLikeUpperTall = [_dot3u _dot3u.small _dot4u _dot4u.small _dot2vu _smallTah _smallTah2dots
	_dot1u_smallTah _dot1u_smallTah.kf _dot1u_smallV _dot1u_smallV.kf _dot1u_ngMark 
	_dot2lIM__hamza _verticalStroke];
@NLikeUpperFlat = [_dot1u  _dot1u.small  _dot2u  _dot2u.small];

# Bariyeh width: 2600
#@Zero = []; # < 100
# 100-500
#@NarrowIni = [absBehIni.be];
#@NarrowMed = [absJeemMed.by absJeemMed.jm];
# 500 - 900
#@MediumIni = [absBehIni.sn absBehIni.hgM		absJeemIni.sn absFehIni.by];
#@MediumMed = [absBehMed.beF absJeemMed.sd 
#		absSadMed absMeemMed.by absHehGoalMed.by];
# 900 - 1300
#@WideIni = [absBehIni.by absJeemIni.by absTahIni.by absAinIni.by absLamIni.by absLamMed.by absMeemIni.by absHehGoalIni.by
#		absBehIni.jm absBehIni.mm absSeenIni.jm];
#@WideMed = [absBehMed.jm absBehMed.by];
# > 1300
#@ExtraIni = [absSeenIni.by absSeenIni.jm absSadIni.by absSadIni.jm absKehehIni.by absHehDoachashmeeIni.by];
#@ExtraMed = [absSeenMed.by absSadMed.by];

@Talls = [@LamForms @TahForms];

@NLikeSubBy_sub = [_dot1l _dot2l _dot2vl _dot3l _dot4l _hehHook.small _smallTahBelow _smallTah2dotsBelow 
	_smallVBelow _smallVinvBelow
	nlqZair nlqDozair nlqKharizair];
@NLikeHid_sub = [_dot1l.hid _dot2l.hid _dot2vl.hid _dot3l.hid _dot4l.hid _hehHook.hid _smallTahBelow.hid _smallTah2dotsBelow.hid 
	_smallVBelow.hid _smallVinvBelow.hid
	_diac.hid _diac.hid _diac.hid];


include(../../source/opentype/bariyehKernClasses.feax);
include(../../source/opentype/arithClasses.feax);

#####include(../../source/opentype/arith_TEMP.feax);
include(../../source/opentype/arithmetic.feax);

#####include(../../source/opentype/autoKernMetricsClasses.feax);
include(../../source/opentype/autoKernMetricsClasses_TEMP.feax);
include(../../source/opentype/kerncalc.feax);


#====================  AUXILIARY LOOKUPS  ====================

#lookup DeleteNull {  # not used
#	lookupflag 0;
#	sub NULL nlqBariyehFin		by   nlqBariyehFin;
#	sub @GDEF_bases NULL  by		@GDEF_bases;
#	sub @GDEF_marks NULL	 by		@GDEF_marks;
#} DeleteNull;

#--- RenderingOpenType ---

# The following three lookups change "RenderingUnknown" to "RenderingOpenType".
lookup _FontCheck_Unknow {
  lookupflag IgnoreMarks;
    sub [U n k o w ] by [O p e T y];
} _FontCheck_Unknow ;

lookup _FontCheck_n {
  lookupflag IgnoreMarks;
    sub n by p e;
} _FontCheck_n ;

lookup FontCheck {
  lookupflag IgnoreMarks ;
    sub [R] e n d e r i n g
      U' lookup _FontCheck_Unknow
      n' lookup _FontCheck_Unknow
      k' lookup _FontCheck_Unknow
      n'
      o' lookup _FontCheck_Unknow
      w' lookup _FontCheck_Unknow
      n' lookup _FontCheck_n;
} FontCheck ;

#--- bariyeh kerning ---

lookup _Kern50 { pos @IsoIni 50; } _Kern50;
lookup _Kern100 { pos @IsoIni 100; } _Kern100;
lookup _Kern150 { pos @IsoIni 150; } _Kern150;
lookup _Kern200 { pos @IsoIni 200; } _Kern200;
lookup _Kern250 { pos @IsoIni 250; } _Kern250;
lookup _Kern300 { pos @IsoIni 300; } _Kern300;
lookup _Kern350 { pos @IsoIni 350; } _Kern350;
lookup _Kern400 { pos @IsoIni 400; } _Kern400;
lookup _Kern450 { pos @IsoIni 450; } _Kern450;
lookup _Kern500 { pos @IsoIni 500; } _Kern500;
lookup _Kern550 { pos @IsoIni 550; } _Kern550;
lookup _Kern600 { pos @IsoIni 600; } _Kern600;
lookup _Kern650 { pos @IsoIni 650; } _Kern650;
lookup _Kern700 { pos @IsoIni 700; } _Kern700;
lookup _Kern750 { pos @IsoIni 750; } _Kern750;
lookup _Kern800 { pos @IsoIni 800; } _Kern800;
lookup _Kern850 { pos @IsoIni 850; } _Kern850;
lookup _Kern900 { pos @IsoIni 900; } _Kern900;
lookup _Kern950 { pos @IsoIni 950; } _Kern950;
lookup _Kern1000 { pos @IsoIni 1000; } _Kern1000;
lookup _Kern1050 { pos @IsoIni 1050; } _Kern1050;
lookup _Kern1100 { pos @IsoIni 1100; } _Kern1100;
lookup _Kern1150 { pos @IsoIni 1150; } _Kern1150;
lookup _Kern1200 { pos @IsoIni 1200; } _Kern1200;
lookup _Kern1250 { pos @IsoIni 1250; } _Kern1250;
lookup _Kern1300 { pos @IsoIni 1300; } _Kern1300;
lookup _Kern1350 { pos @IsoIni 1350; } _Kern1350;
lookup _Kern1400 { pos @IsoIni 1400; } _Kern1400;
lookup _Kern1450 { pos @IsoIni 1450; } _Kern1450;
lookup _Kern1500 { pos @IsoIni 1500; } _Kern1500;
lookup _Kern1550 { pos @IsoIni 1550; } _Kern1550;
lookup _Kern1600 { pos @IsoIni 1600; } _Kern1600;
lookup _Kern1650 { pos @IsoIni 1650; } _Kern1650;
lookup _Kern1700 { pos @IsoIni 1700; } _Kern1700;
lookup _Kern1750 { pos @IsoIni 1750; } _Kern1750;
lookup _Kern1800 { pos @IsoIni 1800; } _Kern1800;
lookup _Kern1850 { pos @IsoIni 1850; } _Kern1850;
lookup _Kern1900 { pos @IsoIni 1900; } _Kern1900;
lookup _Kern1950 { pos @IsoIni 1950; } _Kern1950;
lookup _Kern2000 { pos @IsoIni 2000; } _Kern2000;
lookup _Kern2050 { pos @IsoIni 2050; } _Kern2050;	# not used
lookup _Kern2100 { pos @IsoIni 2100; } _Kern2100;	# not used
lookup _Kern2150 { pos @IsoIni 2150; } _Kern2150;
lookup _Kern2200 { pos @IsoIni 2200; } _Kern2200;
lookup _Kern2250 { pos @IsoIni 2250; } _Kern2250;
lookup _Kern2300 { pos @IsoIni 2300; } _Kern2300;
lookup _Kern2350 { pos @IsoIni 2350; } _Kern2350;

lookup _InsSp2Kern50 { sub @Initials by sp50 @Initials; } _InsSp2Kern50;
lookup _InsSp2Kern100 { sub @Initials by sp100 @Initials; } _InsSp2Kern100;
lookup _InsSp2Kern150 { sub @Initials by sp150 @Initials; } _InsSp2Kern150;
lookup _InsSp2Kern200 { sub @Initials by sp200 @Initials; } _InsSp2Kern200;
lookup _InsSp2Kern250 { sub @Initials by sp250 @Initials; } _InsSp2Kern250;
lookup _InsSp2Kern300 { sub @Initials by sp300 @Initials; } _InsSp2Kern300;
lookup _InsSp2Kern350 { sub @Initials by sp350 @Initials; } _InsSp2Kern350;
lookup _InsSp2Kern400 { sub @Initials by sp400 @Initials; } _InsSp2Kern400;
lookup _InsSp2Kern450 { sub @Initials by sp450 @Initials; } _InsSp2Kern450;
lookup _InsSp2Kern500 { sub @Initials by sp500 @Initials; } _InsSp2Kern500;
lookup _InsSp2Kern550 { sub @Initials by sp550 @Initials; } _InsSp2Kern550;
lookup _InsSp2Kern600 { sub @Initials by sp600 @Initials; } _InsSp2Kern600;
lookup _InsSp2Kern650 { sub @Initials by sp650 @Initials; } _InsSp2Kern650;
lookup _InsSp2Kern700 { sub @Initials by sp700 @Initials; } _InsSp2Kern700;
lookup _InsSp2Kern750 { sub @Initials by sp750 @Initials; } _InsSp2Kern750;
lookup _InsSp2Kern800 { sub @Initials by sp800 @Initials; } _InsSp2Kern800;
lookup _InsSp2Kern850 { sub @Initials by sp850 @Initials; } _InsSp2Kern850;
lookup _InsSp2Kern900 { sub @Initials by sp900 @Initials; } _InsSp2Kern900;
lookup _InsSp2Kern950 { sub @Initials by sp950 @Initials; } _InsSp2Kern950;
lookup _InsSp2Kern1000 { sub @Initials by sp1000 @Initials; } _InsSp2Kern1000;
lookup _InsSp2Kern1050 { sub @Initials by sp1050 @Initials; } _InsSp2Kern1050;
lookup _InsSp2Kern1100 { sub @Initials by sp1100 @Initials; } _InsSp2Kern1100;
lookup _InsSp2Kern1150 { sub @Initials by sp1150 @Initials; } _InsSp2Kern1150;
lookup _InsSp2Kern1200 { sub @Initials by sp1200 @Initials; } _InsSp2Kern1200;
lookup _InsSp2Kern1250 { sub @Initials by sp1250 @Initials; } _InsSp2Kern1250;
lookup _InsSp2Kern1300 { sub @Initials by sp1300 @Initials; } _InsSp2Kern1300;
lookup _InsSp2Kern1350 { sub @Initials by sp1350 @Initials; } _InsSp2Kern1350;
lookup _InsSp2Kern1400 { sub @Initials by sp1400 @Initials; } _InsSp2Kern1400;
lookup _InsSp2Kern1450 { sub @Initials by sp1450 @Initials; } _InsSp2Kern1450;
lookup _InsSp2Kern1500 { sub @Initials by sp1500 @Initials; } _InsSp2Kern1500;
lookup _InsSp2Kern1550 { sub @Initials by sp1550 @Initials; } _InsSp2Kern1550;
lookup _InsSp2Kern1600 { sub @Initials by sp1600 @Initials; } _InsSp2Kern1600;
lookup _InsSp2Kern1650 { sub @Initials by sp1650 @Initials; } _InsSp2Kern1650;
lookup _InsSp2Kern1700 { sub @Initials by sp1700 @Initials; } _InsSp2Kern1700;
lookup _InsSp2Kern1750 { sub @Initials by sp1750 @Initials; } _InsSp2Kern1750;
lookup _InsSp2Kern1800 { sub @Initials by sp1800 @Initials; } _InsSp2Kern1800;
lookup _InsSp2Kern1850 { sub @Initials by sp1850 @Initials; } _InsSp2Kern1850;
lookup _InsSp2Kern1900 { sub @Initials by sp1900 @Initials; } _InsSp2Kern1900;
lookup _InsSp2Kern1950 { sub @Initials by sp1950 @Initials; } _InsSp2Kern1950;
lookup _InsSp2Kern2000 { sub @Initials by sp2000 @Initials; } _InsSp2Kern2000;
lookup _InsSp2Kern2050 { sub @Initials by sp2050 @Initials; } _InsSp2Kern2050;
lookup _InsSp2Kern2100 { sub @Initials by sp2100 @Initials; } _InsSp2Kern2100;
lookup _InsSp2Kern2150 { sub @Initials by sp2150 @Initials; } _InsSp2Kern2150;
lookup _InsSp2Kern2200 { sub @Initials by sp2200 @Initials; } _InsSp2Kern2200;
lookup _InsSp2Kern2250 { sub @Initials by sp2250 @Initials; } _InsSp2Kern2250;
lookup _InsSp2Kern2300 { sub @Initials by sp2300 @Initials; } _InsSp2Kern2300;
lookup _InsSp2Kern2350 { sub @Initials by sp2350 @Initials; } _InsSp2Kern2350;
lookup _InsSp2Kern2400 { sub @Initials by sp2400 @Initials; } _InsSp2Kern2400;


#--- wide forms ---

@NuqtaPlusMark_sub = [_dot1u_smallV _dot1u_smallTah];
@NuqtaPlusMarkKf_sub = [_dot1u_smallV.kf _dot1u_smallTah.kf];

lookup _WideForms1 {
	sub absBehMed by absBehMed.kf_wide;
	sub @NuqtaPlusMark_sub by @NuqtaPlusMarkKf_sub;
} _WideForms1;

@NuqtaUpper_normal_sub = [_dot1u  _dot2u  _dot2vu  _dot3u  _dot3uD  _dot4u];
@NuqtaUpper_small_sub = [_dot1u.small  _dot2u.small  _dot2vu.small  _dot3u.small  _dot3uD.small  _dot4u.small];

lookup _WideForms2 {
	sub @NuqtaUpper_normal_sub by @NuqtaUpper_small_sub;
	sub absJeemMed by absJeemMed.kf_wide;
} _WideForms2;

#--- short kafs and other short forms ---

# Use a short version of the keheh or gaf.
lookup _KafShort {
	lookupflag IgnoreMarks;
	do  forlet i,k = enumerate(feaclass('KehehIniFull_sub'));
		let g = feaclass('GafIniFull_sub')[i];
		let k_base = feaclass('KehehIniBase_sub')[i];
		let g_base = feaclass('GafIniBase_sub')[i];
		let alt_top_k = feaclass('KehehIni_top_short_sub')[i];
		let alt_top_g = feaclass('GafIni_top_short_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $g_base $alt_top_g;
		}
	do  forlet i,k = enumerate(feaclass('KehehMedFull_sub'));
		let g = feaclass('GafMedFull_sub')[i];
		let k_base = feaclass('KehehMedBase_sub')[i];
		#let g_base = k_base;
		let g_base = feaclass('GafMedBase_sub')[i];
		let alt_top_k = feaclass('KehehMed_top_short_sub')[i];
		let alt_top_g = feaclass('GafMed_top_short_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $g_base $alt_top_g;
		}
} _KafShort;

# Use an even shorter version of the keheh or gaf.
lookup _KafShorter {
	lookupflag IgnoreMarks;
	do  forlet i,k = enumerate(feaclass('KehehIniFull_sub'));
		let g = feaclass('GafIniFull_sub')[i];
		let k_base = feaclass('KehehIniBase_sub')[i];
		let g_base = feaclass('GafIniBase_sub')[i];
		let alt_top_k = feaclass('KehehIni_top_shorter_sub')[i];
		let alt_top_g = feaclass('GafIni_top_shorter_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $g_base $alt_top_g;
		}
	do  forlet i,k = enumerate(feaclass('KehehMedFull_sub'));
		let g = feaclass('GafMedFull_sub')[i];
		let k_base = feaclass('KehehMedBase_sub')[i];
		let g_base = feaclass('GafMedBase_sub')[i];
		let alt_top_k = feaclass('KehehMed_top_shorter_sub')[i];
		let alt_top_g = feaclass('GafMed_top_shorter_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $g_base $alt_top_g;
		}
} _KafShorter;

# Use a tall version of the keheh or gaf. Only needed for medials.
lookup _KafTall {
	lookupflag IgnoreMarks;
	do  forlet i,k = enumerate(feaclass('KehehMedFull_sub'));
		let g = feaclass('GafMedFull_sub')[i];
		let k_base = feaclass('KehehMedBaseT_sub')[i];
		let g_base = feaclass('GafMedBaseT_sub')[i];
		let alt_top_k = feaclass('KehehMed_top_tall_sub')[i];
		let alt_top_g = feaclass('GafMed_top_tall_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $g_base $alt_top_g;
		}
} _KafTall;

# Use an even taller version of the keheh or gaf. Only needed for initials.
lookup _KafTaller {
	lookupflag IgnoreMarks;
	do  forlet i,k = enumerate(feaclass('KehehIniFull_sub'));
		let g = feaclass('GafIniFull_sub')[i];
		let k_base = feaclass('KehehIniBase_sub')[i];
		#let g_base = feaclass('GafIniBase_sub')[i];
		let alt_top_k = feaclass('KehehIni_top_taller_sub')[i];
		let alt_top_g = feaclass('GafIni_top_taller_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $k_base $alt_top_g;
		}
} _KafTaller;

# Use a medium-short version of the keheh or gaf (standard height with short diagonal).
# Only needed for medials.
lookup _KafMedshort {
	lookupflag IgnoreMarks;
	do  forlet i,k = enumerate(feaclass('KehehMedFull_sub'));
		let g = feaclass('GafMedFull_sub')[i];
		let k_base = feaclass('KehehMedBaseT_sub')[i];
		let g_base = feaclass('GafMedBaseT_sub')[i];
		let alt_top_k = feaclass('KehehMed_top_medshort_sub')[i];
		let alt_top_g = feaclass('GafMed_top_medshort_sub')[i];
		{
			sub $k by $k_base $alt_top_k;
			sub $g by $g_base $alt_top_g;
		}
} _KafMedshort;


# Use a short version of the lam or tah before a kaf.
lookup _LamTahShort {
	sub absLamIni  by  absLamIni_short;
	sub absLamMed  by  absLamMed_short;
	sub absTahIni  by  absTahIni.kf;
	sub absTahMed  by  absTahMed.kf;
} _LamTahShort;

lookup _NoChange {
	ignore sub @AllMarksUpper';
	ignore sub @MeemForms';
} _NoChange;


#--- marks attached to bariyeh ---

lookup _PreByHide {
	lookupflag 0;
	sub @NLikeSubBy_sub by @NLikeHid_sub;
} _PreByHide;

lookup _PreByDelDiac {
	lookupflag 0;
	sub @DiacLower by .null;
} _PreByDelDiac;

@ByShim = [_byShim1 _byShim2 _byShim3];

lookup _ByInsertDot1l {
	lookupflag UseMarkFilteringSet @NuqtaLikeLower;
	sub @ByShim by @ByShim _dot1l;
} _ByInsertDot1l;

lookup _ByInsertDot2l {
	lookupflag UseMarkFilteringSet @NuqtaLikeLower;
	sub @ByShim by @ByShim  _dot2l;
} _ByInsertDot2l;

lookup _ByInsertDot2vl {
	lookupflag UseMarkFilteringSet @NuqtaLikeLower;
	sub @ByShim by @ByShim _dot2vl;
} _ByInsertDot2vl;

lookup _ByInsertDot3l {
	lookupflag UseMarkFilteringSet @NuqtaLikeLower;
	sub @ByShim by @ByShim  _dot3l;
} _ByInsertDot3l;

lookup _ByInsertDot4l {
	lookupflag UseMarkFilteringSet @NuqtaLikeLower;
	sub @ByShim by @ByShim _dot4l;
} _ByInsertDot4l;

lookup _ByInsertHehHook {
	lookupflag UseMarkFilteringSet @NuqtaLikeLower;
	sub @ByShim by @ByShim _hehHook.small;
} _ByInsertHehHook;

lookup _ByInsertSmallTahBelow {
	lookupflag UseMarkFilteringSet @NuqtaLikeLower;
	sub @ByShim by @ByShim _smallTahBelow;
} _ByInsertSmallTahBelow;

lookup _ByInsertSmallTah2dotsBelow {
	lookupflag UseMarkFilteringSet @NuqtaLikeLower;
	sub @ByShim by @ByShim  _smallTah2dotsBelow;
} _ByInsertSmallTah2dotsBelow;

lookup _ByInsertSmallVBelow {
	lookupflag UseMarkFilteringSet @NuqtaLikeLower;
	sub @ByShim by @ByShim  _smallVBelow;
} _ByInsertSmallVBelow;

lookup _ByInsertSmallVinvBelow {
	lookupflag UseMarkFilteringSet @NuqtaLikeLower;
	sub @ByShim by @ByShim  _smallVinvBelow;
} _ByInsertSmallVinvBelow;

lookup _ByInsertZair {
	#lookupflag UseMarkFilteringSet [@ByShim @NuqtaLikeLower];
	lookupflag 0;
	sub @ByShim          by  @ByShim          nlqZair;
	sub @NuqtaLikeLower  by  @NuqtaLikeLower  nlqZair;
} _ByInsertZair;

lookup _ByInsertDozair {
	lookupflag UseMarkFilteringSet @AllMarksLower;
	sub @ByShim          by  @ByShim          nlqDozair;
	sub @NuqtaLikeLower  by  @NuqtaLikeLower  nlqDozair;
} _ByInsertDozair;

lookup _ByInsertKharizair {
	lookupflag UseMarkFilteringSet @AllMarksLower;
	sub @ByShim          by  @ByShim          nlqKharizair;
	sub @NuqtaLikeLower  by  @NuqtaLikeLower  nlqKharizair;
} _ByInsertKharizair;

#lookup _ByIndex2 {
#	lookupflag 0;
#	sub @NLikeSubBy_sub by @NLikeSubBy2_sub;
#} _ByIndex2;

#lookup _ByIndex3 {
#	lookupflag 0;
#	sub @NLikeSubBy_sub by @NLikeSubBy3_sub;
#} _ByIndex3;


lookup _AttByLeft {
	lookupflag UseMarkFilteringSet @ByShim;
	pos base @nByLeftLower mark @_nLowerBy1;
	pos base @nByLeftLower mark @_nLowerBy2;
	pos base @nByLeftLower mark @_nLowerBy3;
	pos base @nByLeftLower mark @_n1Lower;
	pos base @nByLeftLower mark @_n23Lower;
	pos base @nByLeftLower mark @_hehhook;
	pos base @nByLeftLower mark @_tahLower;
} _AttByLeft;

lookup _AttByLeft3 {
	lookupflag UseMarkFilteringSet [_byShim3];
	pos base @nByLeftLower mark @_nLowerBy3;
} _AttByLeft3;

lookup _AttByMidLeft3 {
	lookupflag UseMarkFilteringSet [_byShim3];
	pos base @nByMidLeftLower mark @_nLowerBy3;
} _AttByMidLeft3;

lookup _AttByMidLeft2 {
	lookupflag UseMarkFilteringSet [_byShim2];
	pos base @nByMidLeftLower mark @_nLowerBy2;
} _AttByMidLeft2;

lookup _AttByMidLeft {
	lookupflag UseMarkFilteringSet @ByShim;
	pos base @nByMidLeftLower mark @_nLowerBy1;
	pos base @nByMidLeftLower mark @_nLowerBy2;
	pos base @nByMidLeftLower mark @_nLowerBy3;
	pos base @nByMidLeftLower mark @_n1Lower;
	pos base @nByMidLeftLower mark @_n23Lower;
	pos base @nByMidLeftLower mark @_hehhook;
	pos base @nByMidLeftLower mark @_tahLower;
} _AttByMidLeft;

lookup _AttByCenter {
	lookupflag UseMarkFilteringSet @ByShim;
	pos base @nByCenterLower mark @_nLowerBy1;
	pos base @nByCenterLower mark @_nLowerBy2;
	pos base @nByCenterLower mark @_nLowerBy3;
	pos base @nByCenterLower mark @_n1Lower;
	pos base @nByCenterLower mark @_n23Lower;
	pos base @nByCenterLower mark @_hehhook;
	pos base @nByCenterLower mark @_tahLower;
} _AttByCenter;

lookup _AttByCenter2 {
	lookupflag UseMarkFilteringSet [_byShim2];
	pos base @nByCenterLower mark @_nLowerBy2;
} _AttByCenter2;


lookup _AttByMidRight {
	lookupflag UseMarkFilteringSet @ByShim;
	pos base @nByMidRightLower mark @_nLowerBy1;
	pos base @nByMidRightLower mark @_nLowerBy2;
	pos base @nByMidRightLower mark @_nLowerBy3;
	pos base @nByMidRightLower mark @_n1Lower;
	pos base @nByMidRightLower mark @_n23Lower;
	pos base @nByMidRightLower mark @_hehhook;
	pos base @nByMidRightLower mark @_tahLower;
} _AttByMidRight;

lookup _AttByRight {
	lookupflag UseMarkFilteringSet @ByShim;
	pos base @nByRightLower mark @_nLowerBy1;
	pos base @nByRightLower mark @_nLowerBy2;
	pos base @nByRightLower mark @_nLowerBy3;
	pos base @nByRightLower mark @_n1Lower;
	pos base @nByRightLower mark @_n23Lower;
	pos base @nByRightLower mark @_hehhook;
	pos base @nByRightLower mark @_tahLower;
} _AttByRight;

lookup _DeleteShim {
	sub _byShim1  by  NULL;
	sub _byShim2  by  NULL;
	sub _byShim3  by  NULL;
} _DeleteShim; 


#====================  GSUB features  ====================

# Separate bases from nuqtas
feature ccmp {

lookup FontCheck;		# both latn and arab

lookup DecomposeBases {
	sub		@BehComposed_sub 			by 		absDotlessBeh 	@BehMark_sub;
	sub		@JeemComposed_sub			by		absHah					@JeemMark_sub;
	sub		@SeenComposed_sub			by		absSeen					@SeenMark_sub;
	sub		@SadComposed_sub			by		absSad					@SadMark_sub;
	sub		@TahComposed_sub			by		absTah					@TahMark_sub;
	sub		@AinComposed_sub			by		absAin					@AinMark_sub;
	sub		@FehComposed_sub			by		absDotlessFeh		@FehMark_sub;
	sub		@KehehComposed_sub		by		absKeheh				@KehehMark_sub;
	sub		@GafComposed_sub			by		absGaf					@GafMark_sub;
	sub		@LamComposed_sub			by		absLam					@LamMark_sub;
	# no meem varieties at this point
	sub		@HehGoalComposed_sub	by		absHehGoal			@HehGoalMark_sub;
	sub		@NoonComposed_sub			by		absNoon					@NoonMark_sub;
	sub		@ChotiyehComposed_sub	by		nlqChotiyeh			@ChotiyehMark_sub;
	sub		@AlefComposed_sub			by		absAlef					@AlefMark_sub;
	sub		@DalComposed_sub			by		absDal					@DalMark_sub;
	sub		@RehComposed_sub			by		absReh					@RehMark_sub;
	sub		@WawComposed_sub			by		absWaw					@WawMark_sub;
	sub		@BariyehComposed_sub	by		nlqBariyeh			@BariyehMark_sub;
} DecomposeBases;

} ccmp;		# end of feature


# Recompose isolates:
feature isol {

lookup RecomposeIsolates {
	sub		absDotlessBeh 	@BehMark_sub			by		@BehComposed_sub;
	sub		absHah					@JeemMark_sub			by		@JeemComposed_sub;
	sub		absSeen					@SeenMark_sub 		by		@SeenComposed_sub;
	sub		absSad					@SadMark_sub			by		@SadComposed_sub;
	sub		absTah					@TahMark_sub			by		@TahComposed_sub;
	sub		absAin					@AinMark_sub			by		@AinComposed_sub;
	sub		absDotlessFeh		@FehMark_sub			by		@FehComposed_sub;
	sub		absKeheh				@KehehMark_sub		by		@KehehComposed_sub;
	sub		absGaf					@GafMark_sub			by		@GafComposed_sub;
	sub		absLam					@LamMark_sub			by		@LamComposed_sub;
	# no meem varieties at this point
	sub		absHehGoal			@HehGoalMark_sub	by		@HehGoalComposed_sub;
	sub		absNoon					@NoonMark_sub			by		@NoonComposed_sub;
	sub		nlqChotiyeh			@ChotiyehMark_sub	by		@ChotiyehComposed_sub;
	sub		absAlef					@AlefMark_sub			by		@AlefComposed_sub;
	sub		absDal					@DalMark_sub			by		@DalComposed_sub;
	sub		absReh					@RehMark_sub			by		@RehComposed_sub;
	sub		absWaw					@WawMark_sub			by		@WawComposed_sub;
	sub		nlqBariyeh			@BariyehMark_sub	by		@BariyehComposed_sub;
} RecomposeIsolates;

} isol;		# end of feature

@QafMark = [_dot2u];

feature fina {

lookup RightFinals2 {
	sub		absDotlessQaf'		@QafMark					by		absQafFin;
	sub		absDotlessFeh'		@QafMark					by		absQafFin;
	sub		absNoon'					@NoonMark_sub			by		absNoonFin;
	sub		nlqChotiyeh'			@ChotiyehMark_sub	by		nlqChotiyehFin;
	sub		nlqBariyeh'				@BariyehMark_sub	by		nlqBariyehFin;
} RightFinals2;

lookup RightFinals1 {
	sub		absAlef						by 		absAlefFin;
	sub		absReh						by		absRehFin;
	sub		absDal						by		absDalFin;
	sub		absWaw						by		absWawFin;
	#sub		nlqBariyeh				by		nlqBariyehFin;
	sub		absTehMarbuta			by		absTehMarbutaFin;
	sub		absTehMarbutaGoal by 		absTehMarbutaGoalFin;
	
	# if there is still a noon or chotiyeh or qaf, it must be dotless
	sub		absNoon				by		absNoonFin;
	sub		nlqChotiyeh		by		nlqChotiyehFin;
	sub		absDotlessQaf	by		absQafFin;
} RightFinals1;

lookup RightFinalsDelNuqta {
	sub		nlqChotiyehFin	_dot2lIM	by	nlqChotiyehFin;
} RightFinalsDelNuqta;

lookup RightFinalsDelNuqtaSub {
	sub		nlqChotiyehFin	_dot2lIM__smallV'			by 	_smallV;
	sub		nlqChotiyehFin	_dot2lIM__smallTwo'		by 	_smallTwoAbove;
	sub		nlqChotiyehFin	_dot2lIM__smallThree'	by 	_smallThreeAbove;
} RightFinalsDelNuqtaSub;

lookup DualFinals {
	sub			@DualPostCcmp_sub		by		@DualFinals_sub;
} DualFinals;

} fina;		# end of feature

# Make sure medial/initial noons and yehs use beh forms and qaf uses feh forms.
# Used for both initials and medials.
lookup FixIMNoonYehQaf {
	sub absNoon by absDotlessBeh;
	sub nlqChotiyeh by absDotlessBeh;
	sub absDotlessQaf by absDotlessFeh;
} FixIMNoonYehQaf;


feature medi {

lookup FixIMNoonYehQaf;

lookup MedialForms {
	lookupflag IgnoreMarks;
	sub		@DualPostCcmp_sub		by		@MedDefault_sub;
} MedialForms;

#lookup InsertHehHook {
#	sub absHehGoalMed by absHehGoalMed _hehHook.small;	
#} InsertHehHook;

} medi;		# end of feature


feature init {

lookup FixIMNoonYehQaf;

lookup InitialForms {
	lookupflag IgnoreMarks;

	sub		@DualPostCcmp_sub		by		@IniDefault_sub;
} InitialForms;

} init;		# end of feature


feature rlig {

lookup DoublePreContext {
	lookupflag IgnoreMarks;
	
	sub @IniDefault_sub'	@BehForms absNoonFin		by	@IniBeNn_sub;
	sub @MedDefault_sub'	@BehForms absNoonFin		by	@MedBeNn_sub;
	
	sub @IniDefault_sub' @BehForms absRehFin			by	@IniBeRe_sub;
	sub @MedDefault_sub' @BehForms absRehFin			by	@MedBeRe_sub;
	
	sub @IniDefault_sub' @BehForms absHehGoalFin	by	@IniBeHg_sub;
	sub @MedDefault_sub' @BehForms absHehGoalFin	by	@MedBeHg_sub;

} DoublePreContext;


lookup BasicContextuals {
	lookupflag IgnoreMarks;
	
	# alef, lam, kaf, and dal use the default shapes
	
	sub @IniDefault_sub' absBehFin		by	@IniBeM2F_sub;
	
	sub @IniDefault_sub' @BehForms		by	@IniBe_sub;
	sub	@MedDefault_sub' @BehForms		by	@MedBe_sub;
	# beh shaping is continued below
	
	sub @IniDefault_sub' @JeemForms		by	@IniJm_sub;
	sub	@MedDefault_sub' @JeemForms		by	@MedJm_sub;
	
	sub @IniDefault_sub' @SeenForms		by	@IniSn_sub;
	sub	@MedDefault_sub' @SeenForms		by	@MedSn_sub;
		
	sub @IniDefault_sub' @SadForms		by	@IniSd_sub;
	sub	@MedDefault_sub' @SadForms		by	@MedSd_sub;
		
	sub @IniDefault_sub' @TahForms		by	@IniTa_sub;
	sub	@MedDefault_sub' @TahForms		by	@MedTa_sub;
			
	sub @IniDefault_sub' @AinForms		by	@IniAi_sub;
	sub	@MedDefault_sub' @AinForms		by	@MedAi_sub;

	sub @IniDefault_sub' @FehForms		by	@IniFe_sub;
	sub	@MedDefault_sub' @FehForms		by	@MedFe_sub;
		
	sub @IniDefault_sub' @MeemForms		by	@IniMm_sub;
	sub	@MedDefault_sub' @MeemForms		by	@MedMm_sub;
	
	sub @IniDefault_sub' @HehDoForms	by	@IniHd_sub;
	sub	@MedDefault_sub' @HehDoForms	by	@MedHd_sub;
	
	sub @IniDefault_sub' absHehGoalFin			by @IniHgF_sub;
	sub @MedDefault_sub' absHehGoalFin			by @MedHgF_sub;
	
	sub @IniDefault_sub' @HehGoalForms			by	@IniHgM_sub;
	sub	@MedDefault_sub' @HehGoalForms			by	@MedHgM_sub;
	
	sub @IniDefault_sub' absRehFin					by	@IniRe_sub;
	sub	@MedDefault_sub' absRehFin					by	@MedRe_sub;
	
	sub @IniDefault_sub' absNoonFin					by	@IniNn_sub;
	sub	@MedDefault_sub' absNoonFin					by	@MedNn_sub;
	
	sub @IniDefault_sub' absDotlessQaf			by	@IniQf_sub;
	sub @MedDefault_sub' absDotlessQaf			by	@MedQf_sub;
	
	sub @IniDefault_sub' nlqChotiyehFin			by	@IniCh_sub;
	sub	@MedDefault_sub' nlqChotiyehFin			by	@MedCh_sub;
	
	sub @IniDefault_sub' nlqBariyehFin			by	@IniBy_sub;
	sub	@MedDefault_sub' nlqBariyehFin			by	@MedBy_sub;
	
	sub @IniDefault_sub' [absQafFin absWawFin]	by	@IniQf_sub;
	sub	@MedDefault_sub' [absQafFin absWawFin]	by	@MedQf_sub;
	
	sub [absLamIni absLamMed]' absAlefFin		by	[absLamIni.al absLamMed.al];
	
} BasicContextuals;			# end of lookup

	
# Here we assume that glyphs before beh have their .be form.
lookup BehContextuals {
	lookupflag IgnoreMarks RightToLeft;
	
	# Use rsub to use backwards logic so that the glyphs at the end are processed first.
	
	#rsub absBehMed.be'		absBehFin			by	absBehMed.beF;
	
	rsub @IniBe_sub'			absBehFin			by	@IniBeF_sub;
	rsub @MedBe_sub'			absBehFin			by	@MedBeF_sub;
	
	# Alternate teeth:
	#rsub absBehMed.be'		@PostBeM1			by	absBehMed.beM1;		# high tooth
	#rsub absBehMed.be'		@PostBeM2			by	absBehMed.beM2;		# low tooth
	
	rsub @MedBe_sub'		absBehMed.bere	by	@MedBeHg_sub;				# eg, \u062a\u0646\u0628\u0646\u0631
	rsub @IniBe_sub'		absBehMed.bere	by	@IniBeHg_BeRe_sub;	# eg, \u0644\u0628\u0646\u0631
		
	# Finally handle the first item in the chain:
	rsub @IniBe_sub'   @PostBeM1							by	@IniBeM1_sub;
	rsub @IniBe_sub'   [absBehMed @PostBeM2]	by	@IniBeM2_sub;
	rsub @MedBe_sub'   @PostBeM1							by	@MedBeM1_sub;
	rsub @MedBe_sub'   [absBehMed @PostBeM2]	by	@MedBeM2_sub; 

} BehContextuals;	# end of lookup


lookup KafContextuals {
	lookupflag IgnoreMarks;
	
	# Use straight kaf before another kaf.
	sub @KafPreKaf_default_sub' @KafForms		by	@KafPreKaf_kf_sub;
	
	# Use straight kaf before dal or teh-marbuta.
	sub @KafPreKaf_default_sub' [absDalFin absTehMarbutaFin]		by	@KafDk_sub;
} KafContextuals;

lookup ConnectToRoundKaf{
	lookupflag IgnoreMarks;
	
	# Use sad connection to round kafs, which happen before lams and alefs.
	sub @IniDefault_sub' [absKehehMed absGafMed] [absAlefFin @LamForms]		by	@IniSd_sub;
	sub @MedDefault_sub' [absKehehMed absGafMed] [absAlefFin @LamForms]		by	@MedSd_sub;
} ConnectToRoundKaf;

# Patch the pre-.sd beh form which is now wrong.
lookup BehSdContextuals2 {
	lookupflag IgnoreMarks;
	sub absBehIni.beM2'  @MedSd_sub  by  absBehIni.be;
	sub absBehMed.beM2'  @MedSd_sub  by  absBehMed.be;
} BehSdContextuals2;


lookup MeemContextuals {
	lookupflag IgnoreMarks;
	
	# Alternate meem occurs before alef, dal, and lam unless it follows a lam.
	sub @PreMm_alt	absMeemMed'		@PostMm_alt		by		absMeemMed._alt;

} MeemContextuals;				# end of lookup

lookup PreMeemAlt {
	lookupflag IgnoreMarks;
	
	# Create proper connection to alternate meem.
	sub @IniMm_sub'	  absMeemMed._alt		by		@IniMmX_sub;
	sub @MedMm_sub'		absMeemMed._alt		by		@MedMmX_sub;

} PreMeemAlt;


lookup SeenContextuals {
	lookupflag IgnoreMarks;
	
	# Use "kashida" form of the seen between two seens.
	sub [absSeenIni.sn absSeenMed.sn absSeenMed.sn_sn]		absSeenMed.sn'	@SeenForms		by	absSeenMed.sn_sn;
	
	# TODO: tighter form of seen before flat-topped jeems.
} SeenContextuals;


lookup FinalContextuals {
	lookupflag IgnoreMarks;
	
	sub @PreQw_stfh  [absQafFin absWawFin]' by  [absQafFin._stfh absWawFin._stfh];
	
	sub @PreBe_bfkl	absBehFin' by absBehFin._bfkl;
	
	sub @PreChF_bfkl nlqChotiyehFin' by nlqChotiyehFin._bfkl;
	
	#sub @PreHgF_stfh absHehGoalFin' by absHehGoalFin._bfkl;  -- no longer used
	
	sub @PreReF_jkl absRehFin' by absRehFin._jkl;
	sub @PreReF_hgM absRehFin' by absRehFin._hgM;
	
	sub @LamForms		absAlefFin'		by	absAlefFin._lm;

} FinalContextuals;	


lookup SpecialContextuals {
	lookupflag IgnoreMarks;
	
	sub [absBehIni.beM2 absBehMed.behg]		absBehMed.hgF'		absHehGoalFin		by		absBehMed.hgF_be;
	
} SpecialContextuals;


@KafKfNormal = [absKehehIni.kf      absGafIni.kf      absKehehMed.dk      absGafMed.dk];
@KafKfWide   = [absKehehIni.kf_wide absGafIni.kf_wide absKehehMed.kf_wide absGafMed.kf_wide];

@KafFinNormal_sub = [absKehehFin absGafFin];
@KafFinTall_sub	= [absKehehFin_tall absGafFin_tall];

@NarrowPreKaf = [absBehMed absJeemMed absAinMed absMeemMed absHehGoalMed absFehMed];

lookup WideForms {
	lookupflag UseMarkFilteringSet @NuqtaLikeUpper;
	
	# These help us avoid collisions.
	
	sub absFehIni' @NuqtaLikeUpper		@KafForms		by	absFehIni.kf_wide;
	sub absFehMed' @NuqtaLikeUpper		@KafForms		by	absFehMed.kf_wide;
	
	# Special case: kaf w/3 dots + kaf/gaf; graf + kaf/gaf
	sub @KafKfNormal' [@NuqtaUpperWide_sub _grafStroke] @KafMFForms		by		@KafKfWide;
	
	# Special case: use a tall final kaf to keep the upper diacritic from having to jump above the kaf stroke
	# In a later pass, shift the nuqta and diacritic down.
	sub [@FehForms @AinForms] @NuqtaLikeUpper @NarrowPreKaf @KafFinNormal_sub'		by		@KafFinTall_sub;
	
	# Special case: tah + jeem + kaf/gaf
	sub [absTahIni.jm absTahMed.jm]                   absJeemMed'                  @KafMFForms  by  absJeemMed.kf_wide;
	sub [absTahIni.jm absTahMed.jm]  @NuqtaLikeUpper  absJeemMed'                  @KafMFForms  by  absJeemMed.kf_wide;
	sub [absTahIni.jm absTahMed.jm]                   absJeemMed' @NuqtaLikeUpper  @KafMFForms  by  absJeemMed.kf_wide;
	sub [absTahIni.jm absTahMed.jm]  @NuqtaLikeUpper  absJeemMed' @NuqtaLikeUpper  @KafMFForms  by  absJeemMed.kf_wide;

	# Special case: teh + khah + lam + diac
	# TODO: decide if this is needed.
	#sub absBehIni.jm  [@NuqtaLikeUpper @NuqtaLowerUpper]  absJeemMed' @NuqtaLikeUpper @LamMedForms  by  absJeemMed.kf_wide;
	
	# Special case: feh + beh + kaf
	# NOT IN GRAPHITE
	# TODO: decide if this is needed.
	sub @FehIMForms @NuqtaLikeUpper absBehMed' @NuqtaLikeUpper @KafForms		by	absBehMed.kf_wide;

} WideForms;	# end of lookup

lookup WideFormsDiac {
	lookupflag UseMarkFilteringSet @AllMarksUpper;
	
	# Special case: nuqta + diac(s)
	sub absBehMed' @NuqtaLikeUpper @DiacUpper @KafMFForms  by  absBehMed.kf_wide;

} WideFormsDiac;

# continuation of WideForms, for chaining rules
lookup WideForms_chain {
	lookupflag UseMarkFilteringSet @NuqtaLikeUpper;
	
	# Special case: nuqta-small-V + kaf/gaf
	# TODO: raise AP on the NuqtaPlusMark.kf_sub glyphs.
	sub absBehMed' lookup _WideForms1 @NuqtaPlusMark_sub' lookup _WideForms1 @KafMFForms;
	sub @NuqtaPlusMark_sub' lookup _WideForms1 @KafMFForms;
	sub @NuqtaPlusMark_sub' lookup _WideForms1 @BehMedForms @KafMFForms;
	sub @NuqtaPlusMark_sub' lookup _WideForms1 @BehMedForms @NuqtaLikeUpper @KafMFForms;
	
	# Special case: beh + khah + kaf/gaf, or noon/teh + jeem + kaf/gaf
	# (In Graphite the lam requires a mark above it, but this works fine and is simpler.)
	sub [absBehIni.jm absBehMed.jm]  absJeemMed' lookup _WideForms2  @NuqtaUpper_normal_sub' lookup _WideForms2  [@KafMFForms @LamMFForms];
	sub [absBehIni.jm absBehMed.jm]  absJeemMed' lookup _WideForms2  @AllMarksUpper                              [@KafMFForms @LamMFForms];
	sub [absBehIni.jm absBehMed.jm]  @NuqtaLikeUpper
																	 absJeemMed' lookup _WideForms2  @AllMarksUpper                              [@KafMFForms @LamMFForms];
																	 
	# Special case: jeem w/3dots + kaf/alef
	sub absJeemMed' lookup _WideForms2  @NuqtaUpperWide_sub' lookup _WideForms2  @KafMFForms;
	sub absJeemMed' lookup _WideForms2  @NuqtaUpperWide_sub                      @AlefFinForms;
	
	# Special case: feh/ghain + jeem + kaf
	sub [@FehIMForms @AinIMForms] @NuqtaLikeUpper  absJeemMed' lookup _WideForms2
																										@NuqtaUpperWide_sub' lookup _WideForms2       @KafMFForms;
	sub [@FehIMForms @AinIMForms] @NuqtaLikeUpper  absJeemMed' lookup _WideForms2  @NuqtaLikeUpper  @KafMFForms;
	sub [@FehIMForms @AinIMForms] @NuqtaLikeUpper  absJeemMed' lookup _WideForms2                   @KafMFForms;
	
	# Special case: lam/tah + jeem + kaf/gaf
	sub @Talls absJeemMed' lookup _WideForms2 @KafMFForms;

} WideForms_chain;

} rlig;		# end of feature


feature calt {

# --- alternate height kafs ---

@KjNormalEntry = [absKehehMed.jm absGafMed.jm];
@KjLowEntry    = [absKehehMed.jm_lowentry absGafMed.jm_lowentry];
@NeedsLowKaf = [absBehIni absBehMed absSeenIni absSeenMed absSadIni absSadMed];

lookup PreKafCollisions {
	lookupflag IgnoreMarks;
	
} PreKafCollisions;

lookup KafCollisionsDiac {
	lookupflag UseMarkFilteringSet @AllMarksUpMid;
	#lookupflag 0;
	
	# Tall final kaf:
	sub @NLikeUpperTall  @DiacUpper [absKehehFin absGafFin]' by [absKehehFin_tall absGafFin_tall];
	
	# Tall: large-nuqta + diacritic + kaf
	sub @NLikeUpperTall  @DiacUpper  @KafMedFull_sub' lookup _KafTall; 
	
	# Special case: Lam + diac + kaf - shorten lam AND heighten kaf
	sub absLamIni' lookup _LamTahShort  @AllMarksUpper' lookup _NoChange  @KafMedFull_sub' lookup _KafTall;
	sub absLamMed' lookup _LamTahShort  @AllMarksUpper' lookup _NoChange  @KafMedFull_sub' lookup _KafTall;
	
	# Tall: nuqta + diac + kaf
	sub @NuqtaLikeUpper @DiacUpper @KafMedForms' lookup _KafTall;
	
	# Standard: nuqta OR diac + kaf
	# TODO: probably we need to use a tall form for ANY nuqta.
	ignore sub @NuqtaLikeUpper @KafMedFull_sub';
	ignore sub @DiacUpper @KafMedFull_sub';
	
	# Exception to rule below, because there is no 'taller' form for pre-meem:
	###sub [absAlef absAlefFin] @DiacUpper [absKehehIni.mm absGafIni.mm]';
	# Exception to rule below, because final bariyeh adds horizontal space:
	###sub [absAlef absAlefFin] @DiacUpper @KafIniFull_sub'  @MedialForms  nlqBariyehFin;
	
	# Tall: alef + diac + kaf
	# Currently we just test for a final that is kind of flat, but the Graphite
	# version tests the actually position of the kaf and check that it is not very high.
	# TODO: maybe improve.
	sub @AlefForms @DiacUpper @KafIniFull_sub' lookup _KafTaller  [@BehFinForms @TahFinForms @FehFinForms @HehGoalFinForms];
	
	# nuqta + diac + kaf => default
	ignore sub @NLikeUpperFlat @DiacUpper  @KafMedFull_sub';
	
} KafCollisionsDiac;

lookup KafCollisionsNuqta {
	lookupflag UseMarkFilteringSet @NuqtaLikeUpMid;
	
	# Lower entry before jeem (since it as a unique entrance that doesn't work for standard alternate kafs)
	sub @NeedsLowKaf @NLikeUpperTall            @KjNormalEntry' @JeemMFForms  by  @KjLowEntry;
	sub [absFehIni absFehMed]  @NuqtaLikeUpper  @KjNormalEntry' @JeemMFForms  by  @KjLowEntry;
	sub [absKehehIni.kf absKehehMed.dk]         @KjNormalEntry' @JeemMFForms  by  @KjLowEntry;   
	
	# Tall: short-lam + kaf + ring (short-lams are ALMOST short enough to fit under kaf-rings, but not quite)
	sub [absLamIni absLamMed]' lookup _LamTahShort  @KafMedFull_sub' lookup _KafTall _attachedRingMid;
	
	# Tall nuqta + tall char + kaf => shorten tall char and make kaf tall
	sub @NLikeUpperTall  @Talls' lookup _LamTahShort  @KafMedFull_sub' lookup _KafTall;
	
	# Special case: exception to rule below when form before kaf is a jeem (eg, \u0641\u062E\u06AF\u0633): 
	sub @NuqtaLikeUpper  absJeemMed @NuqtaLikeUpper  @KafMedFull_sub' lookup _KafTall;
	
	# One exception to rule below not added...
	
	# Tall: nuqta + nuqta + kaf (eg, sheen + teh + kaf)
	sub @NuqtaLikeUpper  @Medials @NuqtaLikeUpper  @KafMedForms' lookup _KafTall;
	
	# Tall: feh + nuqta/diac + kaf
	sub @FehIMForms	 @NuqtaLikeUpper  @KafMedFull_sub' lookup _KafTall;
	
	# Medium-short: nuqta + std-width-jeem + kaf
	# Also need to shift the nuqta right, not up.
	sub @NuqtaLikeUpper  absJeemMed  @KafMedFull_sub' lookup _KafMedshort;
	
} KafCollisionsNuqta;

lookup KafCollisions {
	lookupflag IgnoreMarks;
	
	# Special case: alef-madda + kaf/gaf + final-heh-goal/beh/tah/feh - make kaf tall so alef-madda can squeeze in
	sub absAlefMaddaAbove  @KafIniFull_sub' lookup _KafTaller;	
	
	# Shorter gaf before kaf
	sub [absGafIni.kf absGafMed.dk]' lookup _KafShort  absKehehFin;
	
	# Shorten lam before kaf
	sub [absLamIni absLamMed]' lookup _LamTahShort @KafMFForms;
	
	# Lam + gaf + kaf/gaf => special form of gaf
	sub [absLamIni_short absLamMed_short]  absGafMed.dk'  @KafMFForms  by  absGafMed.kf_lm;
	
	# Tall: lam/tah + kaf
	sub @Talls' lookup _LamTahShort  @KafMedFull_sub' lookup _KafTall;
	
	# Intervening narrow glyph between gaf and kaf - continued below
	sub @GafIniFull_sub' lookup _KafShorter  [absMeemMed absFehMed absBehMed absHehGoalMed absHehDoachashmeeMed] @KafMedFull_sub;
	
	# Gaf + kaf/gaf-medial => shorter; continued below
	sub @GafIniFull_sub' lookup _KafShorter @KafMedFull_sub;
	
	# same as above but with a short gaf - still needs a tall following kaf - not in test doc
	sub absKehehMed.dk_base _gafMedTop_short  @KafMedFull_sub' lookup _KafTall;
	
	# Lam + gaf + kaf/gaf => special form of gaf
	sub [absLamIni_short absLamMed_short] absGafMed.dk'  @KafMFForms  by  absGafMed.kf_lm;
	
	# Gaf + kaf/gaf-final => short 
	sub @GafIniFull_sub' lookup _KafShort @KafFinForms;
	sub @GafMedFull_sub' lookup _KafShort @KafFinForms;
	
	# Medium-short: tah + beh/meem + kaf
	# Graphite version includes ain but I don't think that is needed.
	sub @TahIMForms [absBehMed absMeemMed] @KafMedForms' lookup _KafMedshort;

} KafCollisions;

# Second substitution from rules above
lookup KafCollisionsStep2 {
	lookupflag UseMarkFilteringSet @_kafTop;

	# Intervening narrow char between gaf and kaf - continued from above
	sub @GafBase  @GafTopShort [absMeemMed absFehMed absBehMed absHehGoalMed absHehDoachashmeeMed]  @KafMedFull_sub' lookup _KafTall;
	
	# Gaf + kaf/gaf-medial => shorter; continued from above
	sub @GafBase @GafTopShort @KafMedFull_sub' lookup _KafTall;

} KafCollisionsStep2;


###### Graphite rules that are not included, because I couldn't figure out where these are needed:
#	// Tall: tall kaf + kaf/gaf (note: does not apply to gaf + kaf)
# csKafMed_medium  g__kafTop_null
#		>  csKafMed_baseT$K2  csKafMed_top_tall$K2
#	/  csKafIM_base g__kafMedTop_tall  MARKS  _=K2  _=T2;

# // Short + medium-short: gaf + ??? + kaf/gaf
# csGafIM_medium g__kafTop_null  cNuqtaLikeUpper  csKafMed_medium g__kafTop_null
# 	>  csGafIM_base$G  csGafIM_top_shorter$G  
# 			@Nfb STAYBELOWKAF // keep nuqta from hopping above kaf
# 			csKafMed_baseT$K  csKafMed_top_tall$K
# 	/  _=G _=Tg  cNuqtaLike? cDiacritic?  (gMeemMed gFehMed gBehMed gHehGoalMed gHehDoMed) _=Nfb cDiacritic? _=K _=Tk;

# csGafIM_medium g__kafTop_null  csKafMed_medium g__kafTop_null
# 	>  csGafIM_base$G  csGafIM_top_shorter$G  csKafMed_baseT$K  csKafMed_top_tall$K
# 	/  _=G _=Tg  cNuqtaLike? cDiacritic?  (gMeemMed gFehMed gBehMed gHehGoalMed gHehDoMed) cNuqtaLike? cDiacritic? _=K _=Tk;

# Medium-short: lam/tah + jeem/meem + kaf - let's say we don't need this with the wider jeem
#	cBaseTall  csKafMed_medium  g__kafTop_null  
# 	>  @B  csKafMed_baseT$K  csKafMed_top_medshort$K
#		/  _=B  cNuqtaLike? cDiacritic?  (cJeemMed cMeemMed)  cNuqtaLike?  cDiacritic?  _=K  _=T;

# // No change (\u062C\u0646\u06AF\u06CC)
# cDot1u  csKafMed_medium  g__kafTop_null
# 	>  @N STAYBELOWKAF  @K  @T
# 	/  cJeemIM  cNuqtaLike?  cDiacritic?  cMed  _=N  cDiacritic?  _=K  _=T;

# // Tall (\u062E\u064F\u0634\u06A9\u06CC)
# cNuqtaLikeUpperNoKT  csKafMed_medium  g__kafTop_null
# 	>  @N STAYBELOWKAF  csKafMed_baseT$K  csKafMed_top_tall$K
# 	/  cJeemIM  cNuqtaLike?  cDiacritic?  cMed  _=N  cDiacritic?  _=K  _=T;
#####


@KHighFinals = [@SeenFinForms @SadFinForms @QafFinForms @JeemFinForms @MeemFinForms @AinFinForms @NoonFinForms @ChotiyehFinForms];
@KHighMedials = [@JeemMedForms @MeemMedForms @HehDoMedForms];

# TEMPORARILY COMMENTED OUT WHILE TESTING KERNING
# lookup KafLineHeight {
# 	lookupflag IgnoreMarks;
	
# 	# Places where we don't want shorter forms:
# 	# 1. No change: never make shorter after a kaf/gaf.
# 	#ignore sub @KafTop @NuqtaLikeUpper @KafMedForms';
# 	# 2. No change: don't make shorter after a narrow substantial base with nuqta or diac
# 	#ignore sub [absFehIni absFehMed absAinIni absAinMed absJeemIni absJeemMed] @AllMarksUpper @KafMedForms';
# 	# We usually don't need to handle these because any that need taller forms
# 	# won't match the KafIni/MedFull_sub classes below.
# 	# If we find we need to fix them we can do it afterwards in a lookup that can recognize marks.
	
# 	sub	@KafIMFull' lookup _KafShorter 	@KHighMedials @KHighMedials @KHighFinals;
	
# 	sub	@KafIMFull' lookup _KafShort	@Medials @Medials @Finals;
	
# 	sub	@KafIMFull' lookup _KafShorter 	@KHighMedials @Medials @Medials;
	
# 	sub	@KafIMFull' lookup _KafShorter 	@Medials @KHighMedials @Medials;
	
# 	sub	@KafIMFull' lookup _KafShorter 	@Medials @Medials @KHighMedials;
	
# 	sub	@KafIMFull' lookup _KafShort	@Medials @Medials @Medials;
	
# 	sub	@KafIMFull' lookup _KafShort	@KHighMedials @KHighFinals;
	
# } KafLineHeight;

lookup KafLineHeight_JmShort {
	lookupflag 0;
	
	# Special case - the short kaf tops don't work for .jm form, so substitute special forms.
	sub absKehehMed.jm_base _kehehMedTop_short		by	absKehehMed.jm_short;
	sub absKehehMed.jm_base _gafMedTop_short			by	absGafMed.jm_short;
	
} KafLineHeight_JmShort;

# TODO: delete _kehehTop_m_bogus

lookup SplitNuqtaPairs {
	lookupflag 0;
	# TODO: see if there is a way to use classes for this.
	sub		_dot1l__dot1u'			by		_dot1l				_dot1u;
	sub		_dot3l__dot3u'			by		_dot3l				_dot3u;
	sub		_dot1l__smallTah'		by		_dot1l				_smallTah;
	sub		_dot2vl__smallTah'		by		_dot2vl				_smallTah;
	sub		_dot2lIM__smallV'		by		_dot2l				_smallV;
	sub		_hehHook__dot2u'		by		_hehHook.small		_dot2u.small;
	sub		_hehHook__hamza'		by		_hehHook.small		absHamzaAbove;
	sub		_ring__dot1u'			by		_attachedRing		_dot1u;
	sub		_ring__dot2u'			by		_attachedRing		_dot2u;
	sub		_dot2lIM__smallTwo'		by		_dot2l				_smallTwoAbove;
	sub		_dot2lIM__smallThree'	by		_dot2l				_smallThreeAbove;
	sub		_noDot2l__hamza'		by		_noDot2l			absHamzaAbove;

} SplitNuqtaPairs;


# --- wide forms for ring characters ---

# After ring and dots have been split:
lookup WideForRing {
	lookupflag UseMarkFilteringSet @_ring;

	# Wider beh forms for noon-ring or teh-ring:  .hdR, mmR, .jmR mmXR, .nnR, .nn_hgbmR, .snR
	sub @BehNoRing_sub'  _attachedRing  by @BehForRing_sub;

} WideForRing;


lookup NarrowLamBar {
	lookupflag UseMarkFilteringSet @_bar;
	sub [absLamIni.al absLamMed.al] _bar'  by  _bar.narrow;
} NarrowLamBar;


# --- clean-ups ---

lookup CleanupsDelete {
	lookupflag 0;
	
	# delete hehhook from final hehgoals:
	#sub  @HehGoalMedForms'	_hehHook.small'		by		@HehGoalMedForms;  # eventually controlled by a user feature
	sub  absHehGoalFin'			_hehHook.small'		by		absHehGoalFin;
	
	# delete non-existent nuqtas:
	# TODO: merge into one rule?
	sub @BehIniForms'				_noDot1u'		by		@BehIniForms;		# noon ghunna
	sub @BehMedForms'				_noDot1u'		by		@BehMedForms;
	sub @BehFinForms'				_noDot1u'		by		@BehFinForms;
	sub @NoonFinForms'			_noDot1u'		by		@NoonFinForms;	# noon ghunna
	sub @FehIniForms'				_noDot1u'		by		@FehIniForms;		# dotless feh
	sub @FehMedForms'				_noDot1u'		by		@FehMedForms;		# dotless feh
	sub absFehFin'					_noDot1u'		by		absFehFin;			# dotless feh
	sub @QafFinForms'				_noDot2u'		by		@QafFinForms;		# dotless qaf
	sub @BehIniForms'				_noDot2l'		by		@BehIniForms;				# chotiyeh
	sub @BehMedForms'				_noDot2l'		by		@BehMedForms;				# chotiyeh
	sub @BehFinForms'				_noDot2l'		by		@BehFinForms;				# chotiyeh
	sub @ChotiyehFinForms'	_noDot2l'		by		@ChotiyehFinForms;	# chotiyeh
	sub @BariyehFinForms'		_noDot2l'		by		@BariyehFinForms;
	
	# delete kaf squiggle from initials and medials:
	sub	@KehehIniForms'			_kafSquiggle'			by		@KehehIniForms;
	sub @KehehIniBase_sub'	_kafSquiggle'			by 		@KehehIniBase_sub;
	sub	@KehehMedForms'			_kafSquiggle'			by		@KehehMedForms;
	sub @KehehMedBase_sub'	_kafSquiggle'			by 		@KehehMedBase_sub;
	
	# delete bogus kaf tops:
	sub absKehehMed.jm'		_kehehTop_m_bogus		by  absKehehMed.jm;
	sub absGafMed.jm'			_kehehTop_m_bogus		by  absGafMed.jm;
	sub absKehehMed.by'		_kehehTop_m_bogus		by  absKehehMed.by;
	sub absGafMed.by'			_kehehTop_m_bogus		by  absGafMed.by;
	sub absKehehMed.mm'		_kehehTop_m_bogus		by  absKehehMed.mm;
	sub absGafMed.mm'			_kehehTop_m_bogus		by  absGafMed.mm;
	
} CleanupsDelete;

lookup CleanupsSub {
	lookupflag UseMarkFilteringSet @AllMarks;		# ignore kaf tops
	
	# The special marker for the chotiyeh should just use the standard glyphs at this point:
	sub  _dot2lIM'	by	_dot2l;
	
	# Delete non-existent nuqtas:
	sub	_noDot2l__hamza'		by	absHamzaAbove;
	
	# Keep kaf squiggle on finals:
	sub		@KafFinForms _dot2u__squiggle'		by		_dot2u		_kafSquiggle;
	sub		@KafFinForms _dot3u__squiggle'		by		_dot3u		_kafSquiggle;
	# Otherwise delete:
	sub _dot2u__squiggle' by _dot2u;
	sub _dot3u__squiggle' by _dot3u;
		
} CleanupsSub;

# --- Kaf + lam-bar ---

@Bars = [_bar _bar.raised _bar.raised_gaf _bar.narrow _bar.waw];

@Lam_noBar_postKeheh = [absLamMed.be absLamMed.by absLamFin];
@Lam_tallForBar_postKeheh = [absLamMed.be_kfTall absLamMed.by_kfTall absLamFin._kfTall];
@Lam_noBar_postGaf = [absLamMed.ch];
@Lam_tallForBar_postGaf = [absLamMed.ch_gfTall];
@LamTall4Bar = [@Lam_tallForBar_postKeheh @Lam_tallForBar_postGaf];

lookup RaiseLamBar {
	lookupflag UseMarkFilteringSet @Bars;
	
	# For a few words we know about, actually use a taller lam:
	sub @KehehIMForms  @Lam_noBar_postKeheh' @Bars  by  @Lam_tallForBar_postKeheh;
	sub @KehehIMForms  @Lam_noBar_postGaf'   @Bars  by  @Lam_tallForBar_postGaf;
	
	# For other cases, use a raised form of the bar with an extended lam stem.
	
	# (...except for the ones we just changed:)
	ignore sub @KafIMForms @LamTall4Bar @Bars';
	
	sub @GafIMForms		@LamMFForms @Bars'  by  _bar.raised_gaf;
	sub @KehehIMForms	@LamMFForms @Bars'  by  _bar.raised;
	
} RaiseLamBar;

# --- Bariyeh tails with attached nuqtas and diacritics ---

# Must be done after nuqta pairs have been split.

lookup BariyehShims {
	sub nlqBariyehFin  by  nlqBariyehFin  _byShim1  _byShim2  _byShim3;
} BariyehShims;

@NuqtaLowerShim = [@NuqtaLikeLower @ByShim];
@NLikeHid = [_dot1l.hid _dot2l.hid _dot2vl.hid _dot3l.hid _dot4l.hid _hehHook.hid _smallTahBelow.hid _smallTah2dotsBelow.hid 
	_smallVBelow.hid _smallVinvBelow.hid];
@NuqtaDiacLowerShim  = [@NuqtaLikeLower @DiacLower @ByShim];

lookup BariyehNuqta3 {		#  closest to bariyeh
	lookupflag UseMarkFilteringSet @NuqtaLowerShim;
	
	sub @IniMed	_dot1l'					lookup _PreByHide		nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _ByInsertDot1l;
	sub @IniMed	_dot2l'					lookup _PreByHide		nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _ByInsertDot2l;
	sub @IniMed	_dot2vl'				lookup _PreByHide		nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _ByInsertDot2vl;
	sub @IniMed	_dot3l'					lookup _PreByHide		nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _ByInsertDot3l;
	sub @IniMed	_dot4l'					lookup _PreByHide		nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _ByInsertDot4l;
	sub @IniMed	_hehHook.small'			lookup _PreByHide		nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _ByInsertHehHook;
	sub @IniMed	_smallTahBelow'			lookup _PreByHide		nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _ByInsertSmallTahBelow;
	sub @IniMed	_smallTah2dotsBelow'	lookup _PreByHide		nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _ByInsertSmallTah2dotsBelow;
	sub @IniMed	_smallVBelow' 			lookup _PreByHide		nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _ByInsertSmallVBelow;
	sub @IniMed	_smallVinvBelow' 		lookup _PreByHide		nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _ByInsertSmallVinvBelow;
} BariyehNuqta3;

lookup BariyehDiac3 {
	lookupflag UseMarkFilteringSet @NuqtaDiacLowerShim;
	
	# Note that _PreByDelDiac doesn't actually delete the diacritic, because that would get the stream
	# positioning confused. It is replaced with a .null glyph which gets deleted below.
	
	sub @IniMed  nlqZair' lookup _PreByDelDiac  nlqBariyehFin' _byShim1' _byShim2' _byShim3'  @NuqtaLikeLower'	lookup _ByInsertZair;
	sub @IniMed  nlqZair' lookup _PreByDelDiac  nlqBariyehFin' _byShim1' _byShim2' _byShim3'										lookup _ByInsertZair;
	
	sub @IniMed nlqDozair' lookup _PreByDelDiac  nlqBariyehFin'  _byShim1' _byShim2' _byShim3'  @NuqtaLikeLower'	lookup _ByInsertDozair;
	sub @IniMed nlqDozair' lookup _PreByDelDiac  nlqBariyehFin'  _byShim1' _byShim2' _byShim3'										lookup _ByInsertDozair;
	
	sub @IniMed nlqKharizair' lookup _PreByDelDiac  nlqBariyehFin'  _byShim1' _byShim2' _byShim3'  @NuqtaLikeLower'	lookup _ByInsertKharizair;
	sub @IniMed nlqKharizair' lookup _PreByDelDiac  nlqBariyehFin'  _byShim1' _byShim2' _byShim3'										lookup _ByInsertKharizair;
	
} BariyehDiac3;

lookup DelNull3 { lookupflag 0; sub .null by NULL; } DelNull3;

lookup BariyehNuqta2 {  # second from bariyeh
	lookupflag UseMarkFilteringSet @NuqtaLowerShim;

	sub @IniMed	_dot1l'					lookup _PreByHide		@Medials' 	nlqBariyehFin' _byShim1' _byShim2' lookup _ByInsertDot1l;
	sub @IniMed	_dot2l'					lookup _PreByHide		@Medials' 	nlqBariyehFin' _byShim1' _byShim2' lookup _ByInsertDot2l;
	sub @IniMed	_dot2vl'				lookup _PreByHide		@Medials' 	nlqBariyehFin' _byShim1' _byShim2' lookup _ByInsertDot2vl;
	sub @IniMed	_dot3l'					lookup _PreByHide		@Medials' 	nlqBariyehFin' _byShim1' _byShim2' lookup _ByInsertDot3l;
	sub @IniMed	_dot4l'					lookup _PreByHide		@Medials' 	nlqBariyehFin' _byShim1' _byShim2' lookup _ByInsertDot4l;
	sub @IniMed	_hehHook.small'			lookup _PreByHide		@Medials' 	nlqBariyehFin' _byShim1' _byShim2' lookup _ByInsertHehHook;
	sub @IniMed	_smallTahBelow'			lookup _PreByHide		@Medials' 	nlqBariyehFin' _byShim1' _byShim2' lookup _ByInsertSmallTahBelow;
	sub @IniMed	_smallTah2dotsBelow'	lookup _PreByHide		@Medials' 	nlqBariyehFin' _byShim1' _byShim2' lookup _ByInsertSmallTah2dotsBelow;
	sub @IniMed	_smallVBelow' 			lookup _PreByHide		@Medials' 	nlqBariyehFin' _byShim1' _byShim2' lookup _ByInsertSmallVBelow;
	sub @IniMed	_smallVinvBelow'		lookup _PreByHide		@Medials' 	nlqBariyehFin' _byShim1' _byShim2' lookup _ByInsertSmallVinvBelow;
	
} BariyehNuqta2;

lookup BariyehDiac2 {
	lookupflag UseMarkFilteringSet @NuqtaDiacLowerShim;
	
	# Note that _PreByDelDiac doesn't actually delete the diacritic, because that would get the stream
	# positioning confused. It is replaced with a .null glyph which gets deleted below.
	
	sub @IniMed  nlqZair' lookup _PreByDelDiac  @Medials' 	nlqBariyehFin' _byShim1' _byShim2' @NuqtaLikeLower'	lookup _ByInsertZair;
	sub @IniMed  nlqZair' lookup _PreByDelDiac  @Medials' 	nlqBariyehFin' _byShim1' _byShim2' 									lookup _ByInsertZair;
	
	sub @IniMed nlqDozair' lookup _PreByDelDiac  @Medials' 	nlqBariyehFin'  _byShim1' _byShim2' @NuqtaLikeLower'	lookup _ByInsertDozair;
	sub @IniMed nlqDozair' lookup _PreByDelDiac  @Medials' 	nlqBariyehFin'  _byShim1' _byShim2' 									lookup _ByInsertDozair;

	sub @IniMed nlqKharizair' lookup _PreByDelDiac  @Medials' 	nlqBariyehFin'  _byShim1' _byShim2' @NuqtaLikeLower'	lookup _ByInsertKharizair;
	sub @IniMed nlqKharizair' lookup _PreByDelDiac  @Medials' 	nlqBariyehFin'  _byShim1' _byShim2' 									lookup _ByInsertKharizair;

} BariyehDiac2;

lookup DelNull2 { lookupflag 0; sub .null by NULL; } DelNull2;

lookup BariyehNuqta1 {  # third from bariyeh
	lookupflag UseMarkFilteringSet @NuqtaLowerShim;

	sub @IniMed	_dot1l'					lookup _PreByHide		@Medials' @Medials' nlqBariyehFin' _byShim1' lookup _ByInsertDot1l;
	sub @IniMed	_dot2l'					lookup _PreByHide		@Medials' @Medials' nlqBariyehFin' _byShim1' lookup _ByInsertDot2l;
	sub @IniMed	_dot2vl'				lookup _PreByHide		@Medials' @Medials' nlqBariyehFin' _byShim1' lookup _ByInsertDot2vl;
	sub @IniMed	_dot3l'					lookup _PreByHide		@Medials' @Medials' nlqBariyehFin' _byShim1' lookup _ByInsertDot3l;
	sub @IniMed	_dot4l'					lookup _PreByHide		@Medials' @Medials' nlqBariyehFin' _byShim1' lookup _ByInsertDot4l;
	sub @IniMed	_hehHook.small'			lookup _PreByHide		@Medials' @Medials' nlqBariyehFin' _byShim1' lookup _ByInsertHehHook;
	sub @IniMed	_smallTahBelow'			lookup _PreByHide		@Medials' @Medials' nlqBariyehFin' _byShim1' lookup _ByInsertSmallTahBelow;
	sub @IniMed	_smallTah2dotsBelow'	lookup _PreByHide		@Medials' @Medials' nlqBariyehFin' _byShim1' lookup _ByInsertSmallTah2dotsBelow;
	sub @IniMed	_smallVBelow' 			lookup _PreByHide		@Medials' @Medials' nlqBariyehFin' _byShim1' lookup _ByInsertSmallVBelow;
	sub @IniMed	_smallVinvBelow'		lookup _PreByHide		@Medials' @Medials' nlqBariyehFin' _byShim1' lookup _ByInsertSmallVinvBelow;
	
} BariyehNuqta1;

lookup BariyehDiac1 {
	lookupflag UseMarkFilteringSet @NuqtaDiacLowerShim;
	
	# Note that _PreByDelDiac doesn't actually delete the diacritic, because that would get the stream
	# positioning confused. It is replaced with a .null glyph which gets deleted below.
	
	sub @IniMed  nlqZair' lookup _PreByDelDiac  @Medials' @Medials' 	nlqBariyehFin' _byShim1' @NuqtaLikeLower'	lookup _ByInsertZair;
	sub @IniMed  nlqZair' lookup _PreByDelDiac  @Medials' @Medials' 	nlqBariyehFin' _byShim1' 									lookup _ByInsertZair;
	
	sub @IniMed nlqDozair' lookup _PreByDelDiac  @Medials' @Medials' 	nlqBariyehFin'  _byShim1' @NuqtaLikeLower'	lookup _ByInsertDozair;
	sub @IniMed nlqDozair' lookup _PreByDelDiac  @Medials' @Medials' 	nlqBariyehFin'  _byShim1'  									lookup _ByInsertDozair;
	
	sub @IniMed nlqKharizair' lookup _PreByDelDiac  @Medials' @Medials' 	nlqBariyehFin'  _byShim1' @NuqtaLikeLower'	lookup _ByInsertKharizair;
	sub @IniMed nlqKharizair' lookup _PreByDelDiac  @Medials' @Medials' 	nlqBariyehFin'  _byShim1'  									lookup _ByInsertKharizair;
	
} BariyehDiac1;

lookup DelNull1 { lookupflag 0; sub .null by NULL; } DelNull1;

lookup DeleteEmptyShims {
	# The positioning is based on which shims are in use. So delete empty ones to make the rules easier.
	
	lookupflag UseMarkFilteringSet [@ByShim @AllMarksLower];
	
	ignore sub _byShim1' @AllMarksLower;
	sub _byShim1' lookup _DeleteShim;
	
	ignore sub _byShim2' @AllMarksLower;
	sub _byShim2' lookup _DeleteShim;
	
	ignore sub _byShim3' @AllMarksLower;
	sub _byShim3' lookup _DeleteShim;

} DeleteEmptyShims;

lookup DeleteHidden {
	lookupflag 0;
	sub @NLikeHid_sub  by  NULL;
} DeleteHidden;


lookup Space4BariyehKern {
	lookupflag IgnoreMarks;

	include(../../source/opentype/bariyehKernRules.feax);

} Space4BariyehKern;

} calt;	 # end of feature

# --- Auto-kerning ---

include(../../source/opentype/autokern_inc.feax);

feature calt {	# eventually change this to a Stylistic Set

include(../../source/opentype/autokern.feax);

} calt;


#====================  GPOS features  ====================

feature mark {

# There is ambiguity and overlap among the various attachment classes, so we do the most
# general attachments first, and put the more specific cases last so they override.

@KafTopMarks = [@_kafTop @_kafTop_bj];
lookup AttachKafTop {
		lookupflag UseMarkFilteringSet @KafTopMarks;
#		pos		base gKafMedJm_base		mark @_kafTop_bj;
		pos		base @kafTop					mark @_kafTop;
		pos		base @kafTop_bj				mark @_kafTop_bj;
} AttachKafTop;


@ByShim2_3 = [_byShim2 _byShim3];

lookup AttachByShim1 {		# right-most nuqta (first in stream)
	lookupflag UseMarkFilteringSet @ByShim;

	# If all three shims are used, attach all the way to the right.
	pos nlqBariyehFin' _byShim1' lookup _AttByRight		_byShim2	_byShim3;
	
	# Otherwise, attach mid-right.
	pos nlqBariyehFin' _byShim1' lookup _AttByMidRight;
} AttachByShim1;

lookup AttachByShim2 { # second from bariyeh
	lookupflag UseMarkFilteringSet @ByShim;
	
	# If all three shims are used, attach in the center.
	pos nlqBariyehFin' _byShim1' _byShim2' lookup _AttByCenter2	_byShim3;
	
	# If shims 1 and 2 are used, attach mid-left
	pos nlqBariyehFin' _byShim1' _byShim2' lookup _AttByMidLeft2;
	
	# If shims 2 and 3 are used, attach mid-right.
	pos nlqBariyehFin' _byShim2' lookup _AttByMidRight  _byShim3;
	
	# Otherwise attach to center.
	pos nlqBariyehFin' _byShim2' lookup _AttByCenter2;
	
} AttachByShim2;

lookup AttachByShim3 {		# left-most nuqta when there are 3 (last in stream)
	lookupflag UseMarkFilteringSet @ByShim;
	
	# If all three shims are used, attach to the left.
	pos nlqBariyehFin' _byShim1' _byShim2' _byShim3' lookup _AttByLeft3;
	
	# If 2 shims are used, attach this one mid-left.
	pos nlqBariyehFin' _byShim1' _byShim3' lookup _AttByMidLeft3;
	pos nlqBariyehFin' _byShim2' _byShim3' lookup _AttByMidLeft3;
	
	# Otherwise attach in the center.
	pos nlqBariyehFin' _byShim3' lookup _AttByCenter;
	
} AttachByShim3;


# In case the base doesn't have 'm' APs, use the 'n' ones. This will be overridden if possible.
lookup AttachLowerDiacsLikeNuqtas {
		lookupflag UseMarkFilteringSet @AllMarksLower;
		pos		base @n1Lower			mark @_mLower;
} AttachLowerDiacsLikeNuqtas;

lookup AttachUpperDiacsLikeNuqtas {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
		pos		base @nUpper			mark @_mUpper;
} AttachUpperDiacsLikeNuqtas;

lookup AttachLower {
		lookupflag UseMarkFilteringSet @AllMarksLower;
		pos		base @ring				mark @_ring;		# must be first
		pos		base @n1Lower			mark @_n1Lower;
    pos		base @n23Lower		mark @_n23Lower;
		pos		base @hehhook			mark @_hehhook;
		pos		base @hamzaLower	mark @_hamzaLower;
		pos		base @mLower			mark @_mLower;
} AttachLower;

lookup AttachMiddle {
		lookupflag UseMarkFilteringSet @AllMarksMiddle;
		pos		base @squiggle		mark @_squiggle;
		pos		base @bar					mark @_bar;
		pos		base @ring				mark @_ring;
} AttachMiddle;

lookup AttachUpper {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
    pos		base @nUpper  		mark @_nUpper;
		pos		base @graf				mark @_graf;
} AttachUpper;

lookup AttachHamzaAsUpper {
		lookupflag UseMarkFilteringSet @_hamzaUpper;
		pos		base @nUpper			mark @_hamzaUpper;
} AttachHamzaAsUpper;

lookup AttachUpper2 {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
		pos		base @alef				mark @_mUpper;
		pos		base @mUpper			mark @_mUpper;
		pos		base @tahUpper		mark @_tahUpper;
		pos		base @hamzaUpper	mark @_hamzaUpper;
} AttachUpper2;

lookup AttachUpper3 {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
		pos		base @honorific		mark @_honorific;
} AttachUpper3;

# Special cases go last so that they override:
lookup AttachAlefDiacToYeh {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
		pos		base @alef				mark @_mUpper;
} AttachAlefDiacToYeh;

lookup AttachAlefDiacToLam {
		lookupflag UseMarkFilteringSet @AllMarksUpper;
		# The rules below were copied from the FEA file autogenerated from the rule below:
		# pos		base @nUpper			mark @_mUpperLam;
		# This is necessary to limit the rules to lams.
		# TODO: simplify this by adding a distinct AP to the lam forms duplicating nUpper.
		
		pos base absLamFin <anchor 1561 2671> mark @_mUpperLam;
		pos base absLamFin._kfTall <anchor 1565 3171> mark @_mUpperLam;
		pos base absLamFin_short <anchor 1555 2471> mark @_mUpperLam;
		pos base absLamIni <anchor 584 2148> mark @_mUpperLam;
		pos base absLamIni.ai <anchor 602 2718> mark @_mUpperLam;
		pos base absLamIni.al <anchor 553 2173> mark @_mUpperLam;
		pos base absLamIni.be <anchor 338 2527> mark @_mUpperLam;
		pos base absLamIni.beM1 <anchor 660 2677> mark @_mUpperLam;
		pos base absLamIni.beM2 <anchor 486 2255> mark @_mUpperLam;
		pos base absLamIni.behg <anchor 539 2148> mark @_mUpperLam;
		pos base absLamIni.benn <anchor 554 2848> mark @_mUpperLam;
		pos base absLamIni.bere <anchor 338 2255> mark @_mUpperLam;
		pos base absLamIni.by <anchor 797 2179> mark @_mUpperLam;
		pos base absLamIni.ch <anchor 204 2625> mark @_mUpperLam;
		pos base absLamIni.fe <anchor 651 2180> mark @_mUpperLam;
		pos base absLamIni.hd <anchor 119 2111> mark @_mUpperLam;
		pos base absLamIni.hgF <anchor 639 2006> mark @_mUpperLam;
		pos base absLamIni.hgM <anchor 207 2151> mark @_mUpperLam;
		pos base absLamIni.jm <anchor 825 3298> mark @_mUpperLam;
		pos base absLamIni.mm <anchor 282 2486> mark @_mUpperLam;
		pos base absLamIni.nn <anchor 395 2841> mark @_mUpperLam;
		pos base [absLamIni.qf absLamIni.snsn] <anchor 350 2442> mark @_mUpperLam;
		pos base absLamIni.re <anchor 461 2461> mark @_mUpperLam;
		pos base absLamIni.sd <anchor 980 2994> mark @_mUpperLam;
		pos base absLamIni.sn <anchor 283 2998> mark @_mUpperLam;
		pos base absLamIni.ta <anchor 1029 2493> mark @_mUpperLam;
		pos base [absLamIni_allah1 absLamMed_allah1] <anchor 524 2092> mark @_mUpperLam;
		pos base absLamIni_short <anchor 754 1618> mark @_mUpperLam;
		pos base absLamMed <anchor 586 2081> mark @_mUpperLam;
		pos base absLamMed.ai <anchor 706 2460> mark @_mUpperLam;
		pos base absLamMed.al <anchor 555 2183> mark @_mUpperLam;
		pos base absLamMed.be <anchor 317 2126> mark @_mUpperLam;
		pos base absLamMed.beF <anchor 589 2245> mark @_mUpperLam;
		pos base absLamMed.beM1 <anchor 668 2599> mark @_mUpperLam;
		pos base absLamMed.beM2 <anchor 503 2329> mark @_mUpperLam;
		pos base absLamMed.be_kfTall <anchor 337 2726> mark @_mUpperLam;
		pos base absLamMed.behg <anchor 564 2119> mark @_mUpperLam;
		pos base absLamMed.benn <anchor 581 2271> mark @_mUpperLam;
		pos base absLamMed.bere <anchor 342 2286> mark @_mUpperLam;
		pos base absLamMed.by <anchor 889 2377> mark @_mUpperLam;
		pos base absLamMed.by_kfTall <anchor 869 2977> mark @_mUpperLam;
		pos base absLamMed.ch <anchor 360 2312> mark @_mUpperLam;
		pos base absLamMed.ch_gfTall <anchor 360 3362> mark @_mUpperLam;
		pos base absLamMed.fe <anchor 603 2304> mark @_mUpperLam;
		pos base absLamMed.hd <anchor 201 2249> mark @_mUpperLam;
		pos base absLamMed.hgF <anchor 574 1969> mark @_mUpperLam;
		pos base absLamMed.hgM <anchor 188 2113> mark @_mUpperLam;
		pos base absLamMed.jm <anchor 983 2234> mark @_mUpperLam;
		pos base absLamMed.mm <anchor 517 2461> mark @_mUpperLam;
		pos base absLamMed.nn <anchor 496 2423> mark @_mUpperLam;
		pos base [absLamMed.qf absLamMed.snsn] <anchor 348 2554> mark @_mUpperLam;
		pos base absLamMed.re <anchor 476 2161> mark @_mUpperLam;
		pos base absLamMed.sd <anchor 983 2427> mark @_mUpperLam;
		pos base absLamMed.sn <anchor 321 2302> mark @_mUpperLam;
		pos base absLamMed.ta <anchor 954 2072> mark @_mUpperLam;
		pos base absLamMed_allah2 <anchor 478 1730> mark @_mUpperLam;
		pos base absLamMed_short <anchor 756 1641> mark @_mUpperLam;
} AttachAlefDiacToLam;

} mark;


@MarkFilter_mUpper	= [@mUpper_MarkBase @_mUpper];
@MarkFilter_mLower	= [@mLower_MarkBase @_mLower];
@MarkFilter_ring		= [@ring_MarkBase @_ring];

feature mkmk {

lookup Att2ByShimFallBack {
	lookupflag UseMarkFilteringSet [@ByShim @AllMarksLower];
	pos mark @shim_MarkBase mark @_nByLower;
} Att2ByShimFallBack;

lookup Att2ByShim {
	lookupflag UseMarkFilteringSet [@ByShim @AllMarksLower];
	pos	mark @shim_MarkBase  	mark @_n1Lower;
	#pos	mark @shim_MarkBase  	mark @_hehhook;
	pos mark @shim_MarkBase 	mark @_n23Lower;
	pos	mark @shim_MarkBase  	mark @_mLower;
} Att2ByShim;

lookup AttGrafStroke {
	lookupflag 0;
	pos mark @graf_MarkBase		mark @_graf;
} AttGrafStroke;

lookup AttMark2MarkUpper {
	lookupflag UseMarkFilteringSet @MarkFilter_mUpper;
	pos mark @mUpper_MarkBase		mark @_mUpper;
} AttMark2MarkUpper;

lookup AttMark2MarkLower {
	lookupflag UseMarkFilteringSet @MarkFilter_mLower;
	pos mark @mLower_MarkBase		mark @_mLower;
} AttMark2MarkLower;

lookup AttRing2Mark {
	lookupflag UseMarkFilteringSet @MarkFilter_ring;
	pos mark @ring_MarkBase		mark @_ring;
} AttRing2Mark;

} mkmk;


feature curs {

lookup BasicConnections {
	lookupflag IgnoreMarks RightToLeft;
	pos cursive @entry @exit;
} BasicConnections;
	
} curs;			# end of feature


feature dist {

# This is now being done by inserting spacing glyphs.
#lookup BariyehKern {
#		lookupflag IgnoreMarks;	
#include(../../source/opentype/bariyehKernRules.feax);
#} BariyehKern;

} dist;


feature kern {

lookup DoAutoKerning {
	lookupflag UseMarkFilteringSet @KwMarker;

	pos @GDEF_bases <1000 0 1000 0> kwN1000;
	pos @GDEF_bases <900 0 900 0> kwN900;
	pos @GDEF_bases <800 0 800 0> kwN800;
	pos @GDEF_bases <700 0 700 0> kwN700;
	pos @GDEF_bases <600 0 600 0> kwN600;
	pos @GDEF_bases <500 0 500 0> kwN500;
	pos @GDEF_bases <400 0 400 0> kwN400;
	pos @GDEF_bases <300 0 300 0> kwN300;
	pos @GDEF_bases <200 0 200 0> kwN200;
	pos @GDEF_bases <100 0 100 0> kwN100;

	pos @GDEF_bases <-100 0 -100 0> kw100;
	pos @GDEF_bases <-200 0 -200 0> kw200;
	pos @GDEF_bases <-300 0 -300 0> kw300;
	pos @GDEF_bases <-400 0 -400 0> kw400;
	pos @GDEF_bases <-500 0 -500 0> kw500;
	pos @GDEF_bases <-600 0 -600 0> kw600;
	pos @GDEF_bases <-700 0 -700 0> kw700;
	pos @GDEF_bases <-800 0 -800 0> kw800;
	pos @GDEF_bases <-900 0 -900 0> kw900;
	pos @GDEF_bases <-1000 0 -1000 0> kw1000;
	pos @GDEF_bases <-1100 0 -1100 0> kw1100;
	pos @GDEF_bases <-1200 0 -1200 0> kw1200;
	pos @GDEF_bases <-1300 0 -1300 0> kw1300;
	pos @GDEF_bases <-1400 0 -1400 0> kw1400;
	pos @GDEF_bases <-1500 0 -1500 0> kw1500;
	pos @GDEF_bases <-1600 0 -1600 0> kw1600;
} DoAutoKerning;

} kern;