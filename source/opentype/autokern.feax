#
#	File: kerncalc.feax
#
# FEAX code for Awami Nastaliq

#	This file is part of the Awami Nastaliq font 
#	(https://software.sil.org/awami) and is 
#	Copyright (c) 2014-2024 SIL Global (https://www.sil.org/),
#	with Reserved Font Names "Awami" and "SIL".
#
#	This Font Software is licensed under the SIL Open Font License,
#	Version 1.1.
#
#	You should have received a copy of the license along with this Font Software.
#	If this is not the case, go to (https://openfontlicense.org/) for all the
#	details including an FAQ.

# This file is intended to be included in main.feax.

# Currently these lookups are run within feature calt. Eventually this might be changed to a stylistic set.

# lookup InsertMarkers:
include(../../source/opentype/autoKernMetrics.feax);

# Insert "extra ascent/descent" markers into the stream to represent the presence
# of nuqtas and/or marks.
lookup HandleMarkAsc {
	lookupflag UseMarkFilteringSet [@PyInitMarker @NuqtaLikeUpper @DiacUpper];
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@DiacUpper;
	sub	@PyInitMarker' lookup _InsertNuqtaDiacMarker	@NuqtaLikeUpper;
} HandleMarkAsc;

lookup HandleMarkDsc {
	lookupflag UseMarkFilteringSet [@PyInitMarker @NuqtaLikeLower @DiacLower];
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@DiacLower;
	sub @PyInitMarker' lookup _InsertNuqtaDiacMarker	@NuqtaLikeLower;
} HandleMarkDsc;

lookup AdjustAscxDscx4Shifts {
	lookupflag UseMarkFilteringSet [@DscXMarker @CfMarkerNS];

	# sub dscx600' lookup _IncAscxDscx100 cfN100;

	sub [@AscXMarker @DscXMarker]' lookup _IncAscxDscx100 cfN100;
	sub [@AscXMarker @DscXMarker]' lookup _IncAscxDscx200 cfN200;

	sub [@AscXMarker @DscXMarker]' lookup _DecAscxDscx100 cfS100;
	sub [@AscXMarker @DscXMarker]' lookup _DecAscxDscx200 cfS200;
} AdjustAscxDscx4Shifts;


# Turn bases into marks so we can filter them out of all the arithmetic.
lookup TreatBasesAsMarks {
	lookupflag IgnoreMarks;
	# sub @KernBase by  @KernBaseMark;  # FEAX doesn't handle classes with different structures
	sub @Initials		by	@KernBaseMarkIni;
	sub @Medials		by	@KernBaseMarkMed;
	sub @KernFinals		by	@KernBaseMarkFin;
	sub @Isolates		by	@KernBaseMarkIso;
	sub @KernBaseOther	by	@KernBaseMarkOther;
} TreatBasesAsMarks;

# Must come after InsertMarkers.
# Adjust the YbMarkers and the initial kern value to account for nuqtas that hang
# out to the right of the initial base (eg, peh, yeh) and kaf/gaf diagonal strokes.
lookup AdjustForNuqtaOverhang {
	# @KernBaseMarkVis ignores spaces
	lookupflag UseMarkFilteringSet [@KwMarker @KernBaseMarkVis ybLast @NuqtaLikeLower _bar];

	# beh + beh + jeem
	sub @KwMarker' lookup _DecKwBy500	[mkBehIni.be]'		ybLast' lookup _ExtendYbBy500	@DotWide
			mkBehMed.jm ybLast @NuqtaLikeLower	mkJeemFin;
	sub @KwMarker' lookup _DecKwBy500	[mkBehIni.be]'		ybLast' lookup _ExtendYbBy500	@DotWide
			mkBehMed.jm ybLast	mkJeemFin;
	sub @KwMarker' lookup _DecKwBy300	[mkBehIni.be]'		ybLast' lookup _ExtendYbBy300	@DotNarrow
			mkBehMed.jm ybLast @NuqtaLikeLower	mkJeemFin;
	sub @KwMarker' lookup _DecKwBy300	[mkBehIni.be]'		ybLast' lookup _ExtendYbBy300	@DotNarrow
			mkBehMed.jm ybLast	mkJeemFin;

	# beh initials
	sub @KwMarker' lookup _DecKwBy100	[mkBehIni.be mkBehIni.beM1
										 mkBehIni.beM2 mkBehIni.benn]'	ybLast' lookup _ExtendYbBy100	@DotWide;
	sub @KwMarker' lookup _DecKwBy200	[mkBehIni.re]'					ybLast' lookup _ExtendYbBy200	@DotWide;
	sub @KwMarker' lookup _DecKwBy300	[mkBehIni.jm]'					ybLast' lookup _ExtendYbBy300	@DotWide  @KernBaseMarkMed;  # followed by medial
	sub @KwMarker' lookup _DecKwBy100	[mkBehIni.sn mkBehIni.sd]'		ybLast' lookup _ExtendYbBy100	@DotWide;
	sub @KwMarker' lookup _DecKwBy200	[mkBehIni.ai]'					ybLast' lookup _ExtendYbBy200	@DotWide  @KernBaseMarkMed;
	sub @KwMarker' lookup _DecKwBy200	[mkBehIni.mm ]'					ybLast' lookup _ExtendYbBy200	@DotWide;
	sub @KwMarker' lookup _DecKwBy200	[mkBehIni.mmX mkBehIni.ch ]'	ybLast' lookup _ExtendYbBy200	@DotNarrow;
	sub @KwMarker' lookup _DecKwBy600	[mkBehIni.mmX mkBehIni.ch ]'	ybLast' lookup _ExtendYbBy600	@DotWide;
	sub @KwMarker' lookup _DecKwBy200	[mkBehIni.hd]'					ybLast' lookup _ExtendYbBy200	@DotWide;
	sub @KwMarker' lookup _DecKwBy200	[mkBehIni.nn]'					ybLast' lookup _ExtendYbBy200	@DotWide;
	sub @KwMarker' lookup _DecKwBy100	[mkBehIni.qf]'					ybLast' lookup _ExtendYbBy100	@DotNarrow;
	sub @KwMarker' lookup _DecKwBy400	[mkBehIni.qf]'					ybLast' lookup _ExtendYbBy400	@DotWide;

	# jeem initials
	sub @KwMarker' lookup _DecKwBy100	[mkJeemIni.re]'					ybLast' lookup _ExtendYbBy100	@DotWide;
	sub @KwMarker' lookup _DecKwBy600	[mkJeemIni.jm]'					ybLast' lookup _ExtendYbBy600	@DotWide @KernBaseMarkMed;  # followed by medial
	sub @KwMarker' lookup _DecKwBy200	[mkJeemIni.jm]'					ybLast' lookup _ExtendYbBy200	@DotWide;
	sub @KwMarker' lookup _DecKwBy400	[mkJeemIni.ch]'					ybLast' lookup _ExtendYbBy400	@DotWide;
	sub @KwMarker' lookup _DecKwBy100	[mkJeemIni.fe]'					ybLast' lookup _ExtendYbBy100	@DotWide  @KernBaseMarkMed;
	sub @KwMarker' lookup _DecKwBy200	[mkJeemIni.mm mkJeemIni.mmX]'	ybLast' lookup _ExtendYbBy200	@DotNarrow;
	sub @KwMarker' lookup _DecKwBy400	[mkJeemIni.mm mkJeemIni.mmX]'	ybLast' lookup _ExtendYbBy400	@DotWide;
	sub @KwMarker' lookup _DecKwBy100	[mkJeemIni.qf mkJeemIni.ch]'	ybLast' lookup _ExtendYbBy100	@DotNarrow;
	sub @KwMarker' lookup _DecKwBy300	[mkJeemIni.qf]'					ybLast' lookup _ExtendYbBy300	@DotWide;
	sub @KwMarker' lookup _DecKwBy200	[mkJeemIni.ai]'					ybLast' lookup _ExtendYbBy200	@DotWide  @KernBaseMarkMed;
	sub @KwMarker' lookup _DecKwBy100	[mkJeemIni.hd]'					ybLast' lookup _ExtendYbBy100	@DotWide;
	sub @KwMarker' lookup _DecKwBy400	[mkJeemIni.ch]'					ybLast' lookup _ExtendYbBy400	@DotWide;

	# feh w/ three dots below
	sub @KwMarker' lookup _DecKwBy300	[mkFehIni.jm]'					ybLast' lookup _ExtendYbBy300	@DotWide  @KernBaseMarkMed;
	sub @KwMarker' lookup _DecKwBy100	[mkFehIni.fe]'					ybLast' lookup _ExtendYbBy100	@DotWide  @KernBaseMarkMed;
	sub @KwMarker' lookup _DecKwBy100	[mkFehIni.sn]'					ybLast' lookup _ExtendYbBy100	@DotWide;
	sub @KwMarker' lookup _DecKwBy300	[mkFehIni.mmX mkFehIni.hgM]'	ybLast' lookup _ExtendYbBy300	@DotWide;
	sub @KwMarker' lookup _DecKwBy400	[mkFehIni.mm mkFehIni.hd]'		ybLast' lookup _ExtendYbBy400	@DotWide;
	sub @KwMarker' lookup _DecKwBy200	[mkFehIni.nn mkFehIni.qf]'		ybLast' lookup _ExtendYbBy200	@DotWide;
	sub @KwMarker' lookup _DecKwBy500	[mkFehIni.ch]'					ybLast' lookup _ExtendYbBy500	@DotWide;

	# TODO: strictly speaking, we shouldn't extend the bottom of the lam but some point in the middle, and
	# by considerably more than 100. But this is better than nothing.
	sub @KwMarker' lookup _DecKwBy100	[mkLamBar]'						ybLast' lookup _ExtendYbBy100;
	sub @KwMarker' lookup _DecKwBy100	[mkLamIni mkLamIni.be mkLamIni.beM1 mkLamIni.beM2 mkLamIni.re
										mkLamIni.benn mkLamIni.behg mkLamIni.bere mkLamIni.jm mkLamIni.sn
										mkLamIni.snsn mkLamIni.sd mkLamIni.ta mkLamIni.ai mkLamIni.fe mkLamIni.mm
										mkLamIni.hd mkLamIni.hgM mkLamIni.hgF mkLamIni.nn mkLamIni.qf
										mkLamIni.ch]'					ybLast' lookup _ExtendYbBy100	[_bar];
} AdjustForNuqtaOverhang;

# Add another slice or two if the nuqta of interest has been shifted right (east).
lookup AdjustForNuqtaShift {
	lookupflag UseMarkFilteringSet [@KwMarker @ExtYbMarker ybLast @NuqtaLikeLower @CfMarkerEW];
	sub @KwMarker' lookup _DecKwBy100	@ExtYbMarker' lookup _ExtendYbBy100	ybLast'	@NuqtaLikeLower	cfE100;
	sub @KwMarker' lookup _DecKwBy200	@ExtYbMarker' lookup _ExtendYbBy200	ybLast' @NuqtaLikeLower	cfE200;
} AdjustForNuqtaShift;


lookup AdjustForBaseOverhang {
	lookupflag UseMarkFilteringSet [@KernBaseMarkWord @KwMarker];
	sub @KwMarker' lookup _IncKwBy800		mkKehehIni.sd';

	# 2-char sequences with overhang on right
	# sub mkRehFin	@KwMarker' lookup _DecKwBy600		@KernBaseMarkIni	[mkJeemFin mkAinFin];  # was 800
	
	# 2-char sequences w/ final jeem
	ignore sub @KwMarker' 	[mkSadIni.jm mkHehDoachashmeeIni.jm]		mkJeemFin;
	sub @KwMarker' lookup _DecKwBy400		[mkSadIni.jm]				mkJeemFin;
	sub @KwMarker' lookup _DecKwBy500		@KernBaseMarkIni			mkJeemFin;

	# 2-char sequences w/ final ain
	sub @KwMarker' lookup _DecKwBy400		[mkBehIni.ai mkFehIni.ai mkLamIni.ai]	mkAinFin;

	# Short sequences ending with jeem+jeem.
	# Not kerned yet:
	#    \/
	sub kw0' lookup _DecKwBy200	mkBehIni.jm		mkJeemMed.jm	mkJeemFin;
	sub kw0' lookup _DecKwBy200	mkLamIni.jm		mkJeemMed.jm	mkJeemFin;
	sub kw0' lookup _DecKwBy300	mkJeemIni.jm	mkJeemMed.jm	mkJeemFin;
	sub kw0' lookup _DecKwBy300	mkFehIni.jm		mkJeemMed.jm	mkJeemFin;
	sub kw0' lookup _DecKwBy300	mkMeemIni.jm	mkJeemMed.jm	mkJeemFin;

	# ... meem+jeem
	# sub kw0' lookup _DecKwBy100	mkBehIni.jm		mkJeemMed.jm	mkJeemFin;  - ok
	sub kw0' lookup _DecKwBy300	mkLamIni.mm		mkMeemMed.jm	mkJeemFin;
	sub kw0' lookup _DecKwBy500	mkFehIni.mm		mkMeemMed.jm	mkJeemFin;
	sub kw0' lookup _DecKwBy300	mkMeemIni.mm	mkMeemMed.jm	mkJeemFin;

	# ... feh+jeem
	sub kw0' lookup _DecKwBy200	mkLamIni.mm		mkMeemMed.jm	mkJeemFin;
	sub kw0' lookup _DecKwBy200	mkFehIni.mm		mkMeemMed.jm	mkJeemFin;

} AdjustForBaseOverhang;


# Measure heights

# Note that @PyMarker does NOT include pyNull, which is what forces the backwards processing.

lookup MeasureBaseY {
	lookupflag UseMarkFilteringSet @YMarkers;
	# rsub pyNULL' dy100 py0  by  py100;
	# rsub pyNULL' dy100 py100  by  py200;
	# rsub pyNULL' dy100 py200  by  py300;
	# etc.
include(../../source/opentype/arithMeasureYrules.feax);
} MeasureBaseY;


# asc/dsc -> pt/pb
# We include the @PyMarker to recognize the boundaries of the bases.
lookup AddNuqtaAscent {
	lookupflag UseMarkFilteringSet [@PyMarker @AscMarker @AscXMarker];
	sub @PyMarker @AscXMarker @AscMarker' lookup _AddNuqtaUpperHt;
} AddNuqtaAscent;

lookup SubtractNuqtaDescent {
	lookupflag UseMarkFilteringSet [@PyMarker @DscMarker @DscXMarker @NuqtaLike];
	sub @PyMarker @DscXMarker @DscMarker' lookup _SubtractNuqtaLowerHt;
} SubtractNuqtaDescent;

include(../../source/opentype/arithTopLevel.feax);
# ------------    ^^^ This file includes the following:

# Convert markers pt/pb back to asc/dsc
# lookup MarkersYtb2AscDsc:

# These are flattened for the sake of performance.
# lookup MakeAscentAbsolute;
#  lookupflag UseMarkFilteringSet [@PyMarker @AscMarker];
#  sub py0  asc100' lookup _Set100;
#  sub py0  asc200' lookup _Set200;
#  sub py0  asc300' lookup _Set300;
#  ...
#} MakeAscentAbsolute;

# lookup MakeDescentAbsolute;
#  lookupflag UseMarkFilteringSet [@PyMarker @DscMarker];
#  sub py0  dscN1500' lookup _SetN1500;
#  sub py0  dscN1400' lookup _SetN1400;
#  sub py0  dscN1300' lookup _SetN1300;
#  ...
#} MakeDescentAbsolute;

# ---------------

# Extend the slices below to account for the width of an overhanging nuqta.
lookup ExtendForNuqtaOverhang {
	lookupflag UseMarkFilteringSet [@YbMarker @ExtYbMarker];
	do	forlet ybm = feaclass('YbMarker');
	{
		sub $ybm extYb1' by $ybm;
		sub $ybm extYb2' by $ybm $ybm;
		sub $ybm extYb3' by $ybm $ybm $ybm;
		sub $ybm extYb4' by $ybm $ybm $ybm $ybm;
		sub $ybm extYb5' by $ybm $ybm $ybm $ybm $ybm;
		sub $ybm extYb6' by $ybm $ybm $ybm $ybm $ybm $ybm;
	}
} ExtendForNuqtaOverhang;

lookup MedialNuqtaOverhang {

} MedialNuqtaOverhang;

# Now actually do the comparisons to calculate the amount of kerning that is possible.

# Each CalculateKern lookup below works backward by one slice in the sequence to be kerned,
# kerning a little more tightly if possible.
# The EnforceBlock checks to see if we are blocked and forces the process to terminate.
# These lookups need to be separate because they use different filters.
# We need this set of lookups for every potential kerned slice. Right now
# we are allowing 12.

# TODO: the last four lookups are not needed for the final iteration.

do	forlet n = range(0,12);
	let c = str(n + 1);
	let ln_CalculateKern = "CalculateKern" + c;
	let ln_EnforceBlock = "EnforceBlock" + c;
	let ln_CleanUpKernedGlyph = "CleanUpKernedGlyph" + c;
	let ln_CleanUpTopGlyph = "CleanUpTopGlyph" + c;
	let ln_ShiftPrevGlyph = "ShiftPrevGlyph" + c;
	let ln_ShiftNextGlyph = "ShiftNextGlyph" + c;

{

lookup $ln_CalculateKern {
	lookupflag UseMarkFilteringSet [@KwMarker @PyMarker @YtMarker @YbMarker @Kblocks];

#	sub  @YtMarker'  lookup _TryKern	@KwMarker   @YbMarker;

	sub @YtMarker' lookup _TryKernShift	@KwMarker'  @PyMarker'  @YbMarker';		# first shift

	sub @YtMarker  @YtMarker' lookup _TryKernShift  @YbMarker';					# subsequent shifts

} $ln_CalculateKern;

lookup $ln_EnforceBlock {
	lookupflag UseMarkFilteringSet [@KwMarker @Kblocks @KernBaseMarkIsoIniFin];
	sub @Kblocks' @KwMarker' lookup _EnforceBlock;
	sub @KwMarker' lookup _EnforceBlock;
} $ln_EnforceBlock;

# Once a glyph has been completely kerned, invalidate its bottoms.
lookup $ln_CleanUpKernedGlyph {
	lookupflag UseMarkFilteringSet [@YbMarker @KwMarker @YtMarker @Kblocks];
	rsub @YbMarker' @KwMarker	by  ybIgnore;
} $ln_CleanUpKernedGlyph;

# Once a glyph has had something kern under it completely, invalidate its tops.
lookup $ln_CleanUpTopGlyph {
	lookupflag UseMarkFilteringSet [@YbMarker @YtMarker ybLast];
	sub @YtMarker ybLast @YtMarker'  by  ytIgnore;
} $ln_CleanUpTopGlyph;

lookup $ln_ShiftPrevGlyph {
	lookupflag UseMarkFilteringSet [@YtMarker @PyMarker @KwMarker @Kblocks]; # the @PyMarker delineates a separate glyph
	sub @YtMarker' lookup _ShiftFromPrev @PyMarker' @KwMarker';
} $ln_ShiftPrevGlyph;

lookup $ln_ShiftNextGlyph {
	lookupflag UseMarkFilteringSet [ybLast @KwMarker @PyMarker @YbMarker @YtMarker];
	sub @YtMarker ybLast' lookup _ShiftFromNext	@PyMarker' @YbMarker';
} $ln_ShiftNextGlyph;

}
# end of do


# If a block occurred, reduce the amount of kerning a bit to avoid an actual collision.
lookup AddSpaceWhenBlocked {
	sub kblock	@KwMarker' lookup _DecKwBy100;
} AddSpaceWhenBlocked;


lookup RestoreBases {
	lookupflag UseMarkFilteringSet @KernBaseMark;
	# sub @KernBaseMark  by  @KernBase;  # FEAX doesn't handle classes with different structures
	sub @KernBaseMarkIni	by	@Initials;
	sub @KernBaseMarkMed	by	@Medials;
	sub @KernBaseMarkFin	by	@KernFinals;
	sub @KernBaseMarkIso	by	@Isolates;
	sub @KernBaseMarkOther	by	@KernBaseOther;
} RestoreBases;


# Leaving the markers in for the time being helps with debugging.
# lookup CleanUpMarkers {
# 	lookupflag UseMarkFilteringSet [@DyMarker @YtMarker @YbMarker @Kblocks @PyMarker];
# 	sub @DyMarker by NULL;
# 	sub @YtMarker by NULL;
# 	sub @YbMarker by NULL;
# 	sub @Kblocks by NULL;
# 	sub @PyMarker by NULL;
#   sub ybIgnore by NULL;
#   sub ytIgnore by NULL;
# } CleanUpMarkers;
