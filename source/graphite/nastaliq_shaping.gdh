//
//	File: nastaliq_shaping.gdl
//
//	Graphite substitution rules for Awami Nastaliq

/*
	This file is part of the Awami Nastaliq font 
	(http://software.sil.org/awami) and is 
	Copyright (c) 2014-2022 SIL International (http://www.sil.org/),
	with Reserved Font Names "Awami" and "SIL".

	This Font Software is licensed under the SIL Open Font License,
	Version 1.1.

	You should have received a copy of the license along with this Font Software.
	If this is not the case, go to (http://scripts.sil.org/OFL) for all the
	details including an FAQ.
*/


table(substitution)


// Debugging

pass(1)

table(glyph)

cVisSpace = (g_spaceVis  g_spaceVisXtight  g_spaceVisTight  g_spaceVisXwide  g_spaceVisWide  g_spaceVisHair
	g_nobreakspaceShowInv_xtight  g_nobreakspaceShowInv_tight  g_nobreakspaceShowInv
	g_nobreakspaceShowInv_wide  g_nobreakspaceShowInv_xwide);

cStdWidthSpace = (g_space, g_nbspace);

cSpace = (g_space cVisSpace g_nbspace g_narrowNoBreakSpace);

csSpMedInvis = (g_space, g_nbspace, g_narrowNoBreakSpace);

csSpXtightVis	= (g_spaceVisXtight, g_nobreakspaceShowInv_xtight, g_spaceVisHair);
csSpTightVis	= (g_spaceVisTight, g_nobreakspaceShowInv_tight, g_spaceVisHair);
csSpMedVis		= (g_spaceVis, g_nobreakspaceShowInv, g_spaceVisXtight);
csSpWideVis		= (g_spaceVisWide, g_nobreakspaceShowInv_wide, g_spaceVisTight);
csSpXwideVis	= (g_spaceVisXwide, g_nobreakspaceShowInv_xwide, g_spaceVis);

cShowInvisibleZeroWidth = (cEmbedMarkers  g_lineSeparator  g_paragraphSeparator  g_wordJoiner);

// Kern around these as if they were invisible:
cKernIgnore = (cSpace  c_zeronojoin  g_zeroWidthNoBreakSpace  g_zeroWidthNoBreakSpaceShowInv
	g_zeroWidthNoBreakSpaceShowInv_alt  cShowInvisibleZeroWidth);

// These are encoded as visible but removed (actually turned to ZWNBSP) when invisible:
cInvisible =  (cShowInvisibleZeroWidth, g_ObjectReplChar);

endtable;



// obsolete feature
/***
if (showInvis == 1 && wordSpacing == xtight)
csSpMedInvis  >  csSpXtightVis;
endif;
if (showInvis == 1 && wordSpacing == tight)
csSpMedInvis  >  csSpTightVis;
endif;
if (showInvis == 1 && wordSpacing == medium)
csSpMedInvis  > csSpMedVis;
endif;
if (showInvis == 1 && wordSpacing == wide)
csSpMedInvis  >  csSpWideVis;
endif;
if (showInvis == 1 && wordSpacing == xwide)
csSpMedInvis  >  csSpXwideVis;
endif;

if (showInvis == 1)
cno_showInv  >  cshowInv;
endif;
***/

//if (showInvis == 0)
cInvisible  >  g_zeroWidthNoBreakSpace;
//endif;

endpass;  // 1



//
//	BASIC CONTEXTUAL SHAPING - generate initial, medial, and final forms
//

pass(1)

//if (maddaAlt == belowVowel)
//	gMaddaAbove  >  gMaddaAbove_low  /  ^ _;
//endif;

	// Diacritic ordering
	// Lower diacritics go first, in order of their mark class, then upper diacritics,
	// in order of their mark class.
	// We don't swap the glyphs, because that would mess up the original order,
	// rather we delete and insert.
	// (We move the position back before the first diacritic to allow the
	// combining rules below to fire. This shouldn't be a problem because they
	// should never match a second time.)

	_  cMark1l  >  @M:M  _  / ^ _ cMark2l_1234u cMark2l_1234u? _=M;
	_  cMark2l  >  @M:M  _  / ^ _ cMark1234u    cMark1234u?    _=M;
	_  cMark1u  >  @M:M  _  / ^ _ cMark234u     cMark234u?     _=M;
	_  cMark2u  >  @M:M  _  / ^ _ cMark34       cMark34?       _=M;
	_  cMark3   >  @M:M  _  / ^ _ cMark4        cMark4?        _=M;

	// Combine certain diacritics into single glyphs.
	gShadda      cPostShadda      >  cShaddaPlus$3:(1 3)      _  /  _  cMark34? _;
	gKharizabar  cPostKharizabar  >  cKharizabarPlus$3:(1 3)  _  /  _  cMark34? _;

//if (maddaAlt == 0)
//	gAlefMaddaAbove  cDiacriticUpper  _  >  gAlef:1  gMaddaAbove_low:1  @2:2;
//else
	gAlefMaddaAbove  cDiacriticUpper  _  >  gAlef:1  @2:2  gMaddaAbove:1;
//endif;

	// Yeh + hamza = hamzayay (move zair or zabar up out of the way):
	gChotiyeh=Y  cDiacritic=D  gHamzaAbove=H  >  @Y  @H  @D  /  ^ [(csDualLinkIso csDualLinkFin) DIACS]?  _  _  _;

	// NFD -> NFC: combine hamzas on heh-goal
	(csDualLinkFin csRightLinkFin csDualLinkIso csRightLinkIso)
        cs_nfd_noHamza=B  gHamzaAbove=H  >  @1  cs_nfc_hamza:(B H)  _  /  ^ _  DIACS  _  _;  // back up if possible
    cs_nfd_noHamza=B  gHamzaAbove=H  >  cs_nfc_hamza:(B H)  _  /  ^ _  DIACS  _;

	////gAlef  gMaddaAbove  >  gAlefMaddaAbove:(1 2)  _  /  ^ _  _;
	////gYeh  gHamzaAbove  >  gYehHamzaAbove:(1 2) _ /  ^ _  _;


	// One common precomposed form:
	////gLamAlef  _  >  gLam:1  gAlef:1;

	// Separate nuqtas and similar bits from bases.

#include "nastaliq_separateNuqtas.gdh"

endpass;  // 1


pass(2)

	// Create basic contextual forms.

	csDualLinkIso  csDualLinkIso   >  csDualLinkIni_raw  csDualLinkFin   /  _=B1 ^ MARKS  _=B2 ;

	csDualLinkIso  csRightLinkIso  >  csDualLinkIni_raw  csRightLinkFin  /  _=B1 ^ MARKS  _=B2 ;

	csDualLinkFin  csDualLinkIso   >  csDualLinkMed_raw  csDualLinkFin   /  _=B1 ^ MARKS  _=B2 ;

	csDualLinkFin  csRightLinkIso  >  csDualLinkMed_raw  csRightLinkFin  /  _=B1 ^ MARKS  _=B2 ;

endpass; // 2


pass(2)
	// Special finals

	// FIX THIS:
	///gBariyehHamzaFin0  _  >  gBehMedBy {nuqtaS = nuqtaG}  gBariyehFin:1;

	// illegal - no these are legal!
	//gYehHamzaAboveFin  _  >  gBehMed {nuqtaS = nuqtaG}  circledash:1  /  c_medial  _  _;
	//gYehHamzaAboveFin  _  >  gBehIni {nuqtaS = nuqtaG}  circledash:1;

endpass;	// 2


//
//	FURTHER CONTEXTUAL SHAPING
//

pass(3)

// Lam-alef ligatures - not used

/*****
gLamIni_raw  gAlefFin  >  gLamAlef:(1 4)  _  /  _  g__bar? cDiacritic? _ ;

gLamMed_raw  gAlefFin  >  gLamAlefFin:(1 4)  _  /  _  g__bar? cDiacritic? _ ;

gLamIni_raw  gAlefMaddaFin  >  gLamAlefMadda:(1 4)  _  /  _  g__bar? cDiacritic? _ ;

gLamMed_raw  gAlefMaddaFin  >  gLamAlefMaddaFin:(1 4)  _  /  _  g__bar? cDiacritic? _ ;

gLamIni_raw  gAlefHamzaFin  >  gLamAlefHamza:(1 4)  _  /  _  g__bar? cDiacritic? _ ;

gLamMed_raw  gAlefHamzaFin  >  gLamAlefHamzaFin:(1 4)  _  /  _  g__bar? cDiacritic? _ ;
*****/

// Allah

table(glyph)
cLamNoAllah = (gLamIni_raw gLamMed_raw);
cLamAllah1 = (gLamIni_allah1 gLamMed_allah1);
endtable;

// Rule 3: isolate alef present, no shadda
gAlef  gLamIni_raw  gLamMed_raw=L2  _  gHehGoalFin  g__hehHook_small
	>  gAlef_allah  gLamIni_allah1  gLamMed_allah2  g__shadda_kharizabar:L2  gHehFin_allah:(Hg Hh)  _
	/  _  MARKS  _=L1  gZair?  _=L2  _  _=Hg  _=Hh;

// Rule 2:
// lam-lam-shadda-daggeralef-heh
cLamNoAllah  gLamMed_raw  gHehGoalFin  g__hehHook_small
	>  cLamAllah1  gLamMed_allah2  gHehFin_allah:(Hg Hh)  _
	/  _=L1  gZair?  _=L2  (g__shadda_kharizabar  g__shadda_zabar)  _=Hg  _=Hh;

// lam-lam-shadda-heh
cLamNoAllah  gLamMed_raw  gShadda  gHehGoalFin  g__hehHook_small
	>  cLamAllah1  gLamMed_allah2  g__shadda_kharizabar:S gHehFin_allah:(Hg Hh)  _
	/  _=L1  gZair?  _=L2  _=S  _=Hg  _=Hh;

// Alef and shadda-kharizabar shapes are fixed in pass 5.


// Salaam ulena

gSeenIni_raw  gLamMed_raw  gAlefFin  gMeemIni_raw  gHehGoalFin  g__hehHook_small gUltaPesh
		(c_zeronojoin g_nbspace)
		gAinIni_raw  gLamMed_raw  gBehMed_raw  g__dot2lIM  gBehMed_raw  g__dot1u  gAlefFin
	>	g_ligSalaamUlena:(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) _ _ _ _ _ _ _ _ _ _ _ _ _ _;


gSeenIni_raw  gLamMed_raw  gAlefFin  gMeemIni_raw  gHehGoalFin  g__hehHook_small
		(c_zeronojoin g_nbspace)
		gAinIni_raw  gLamMed_raw  gBehMed_raw  g__dot2lIM  gBehMed_raw  g__dot1u  gAlefFin
	>	g_ligSalaamUlena:(1 2 3 4 5 6 7 8 9 10 11 12 13 14) _ _ _ _ _ _ _ _ _ _ _ _ _;
	
// Alayhi-es-salam

gAinIni_raw  gLamMed_raw  gBehMed_raw  g__dot2lIM  gHehGoalFin  g__hehHook_small
		(c_zeronojoin g_nbspace)
		gAlef  gLamIni_raw  gSeenMed_raw  gLamMed_raw  gAlefFin  gMeem
	> g_ligAlayhiAsSalam:(1 2 3 4 5 6 7 8 9 10 11 12 13) _ _ _ _ _ _ _ _ _ _ _ _;


// And other common ligatures

////gMeemIni_raw  gJeemMed_raw  gMeemMed_raw  gDalFin  >  gLigatureMuhammad:(1 2 3 4) _  _  _;

// Restore eventually if we use this:
////gAlefMaddaAbove gGaf  >  g_alefMaddaGaf:(1 2)  _;


// Finals

(gAlef) // gAlefMaddaAbove gAlefHamzaAbove)
	>  (gAlefFin /*gAlefMaddaFin gAlefHamzaFin*/)  /  cIniMed  MARKS  _;

csQwFin  >  csQwFin_stfh	/  cPreQw_stfh  MARKS _;
// Change feh to qaf for final qaf:
gFehFin  >  gQafFin_stfh	/  cPreQw_stfh  MARKS  _  (g__dot2u  g__noDot2u);
gFehFin  >  gQafFin         /  _  (g__dot2u  g__noDot2u);


table(glyph)

c_preBe_bfkl = ( gBehIni_raw gFehIni_raw gKafIni_raw gGafIni_raw gLamIni_raw );
c_preChF_bfkl = ( gBehIni_raw gFehIni_raw gKafIni_raw gGafIni_raw gLamIni_raw gKafMed_raw gGafMed_raw gLamMed_raw );
c_preHgF_stfh = ( gSeenIni_raw gTahIni_raw gFehIni_raw gKafIni_raw gGafIni_raw
    gLamIni_raw gMeemIni_raw gHehGoalIni_raw gSeenMed_raw gTahMed_raw gFehMed_raw gKafMed_raw
    gGafMed_raw gLamMed_raw gHehGoalMed_raw );
c_preReF_jkl = ( gBehIni_raw gJeemIni_raw gKafIni_raw gGafIni_raw gLamIni_raw gKafMed_raw gGafMed_raw gLamMed_raw );
//c_preReF_sshg = ( gSeenIni_raw gSadIni_raw gHehGoalIni_raw gBehMed_raw gSeenMed_raw gSadMed_raw ); -- obsolete
c_preReF_hgM = (gHehGoalMed_raw);

endtable;


gBehFin  >  gBehFin_bfkl	/  ^  c_preBe_bfkl MARKS  _;

gRehFin  >  gRehFin_jkl		/  ^ c_preReF_jkl MARKS  _;
//gRehFin  >  gRehFin_sshg	/  ^ c_preReF_sshg MARKS  _; -- obsolete
gRehFin  >  gRehFin_hgM		/  ^ c_preReF_hgM MARKS  _;

gChotiyehFin  >  gChotiyehFin_bfkl  /  ^ c_preChF_bfkl MARKS  _ ;

gAlefFin  >  gAlefFin_lm	/  ^ (gLamIni_raw gLamMed_raw) MARKS  _ ;

gKafFin  >  gKafFin_squiggle  /  _  g__dot2u;


// Situations where characters before have an effect:

table(glyph)

// Everything BUT lam:
c_kgPreMm_alt = ( gKafIni_raw gGafIni_raw gKafMed_raw gGafMed_raw ) ;
c_preMm_alt = ( gAinIni_raw gAinMed_raw gBehIni_raw gBehMed_raw
	gHehDoIni_raw gHehDoMed_raw gFehIni_raw gFehMed_raw gHehGoalIni_raw gHehGoalMed_raw
	gJeemIni_raw gJeemMed_raw gMeemIni_raw gMeemMed_raw gMeemMed_alt_raw
	gSeenIni_raw gSeenMed_raw gSadIni_raw gSadMed_raw gTahIni_raw gTahMed_raw ) ;

cADL_raw = (gDalFin gLamFin gAlefFin gLamMed_raw
	//// gLamAlefFin - no longer used
	//// gThalFin gDalTwoVertBelowSmallTahFin gDdalFin - no longer used
	//cKafFin gKafMed_raw gGafMed_raw - Sheldon says to take these out ("meem before kaf+alef/lam", 10 Feb 2016).
);

c_preBehSS_raw = (gSeenIni_raw gSadIni_raw gSeenMed_raw gSadMed_raw);

c_preBehNn_hgbm = (gHehGoalIni gHehGoalIniBeNn gBehMed gBehMedBeNn gMeemIni gMeemIniBeNn)

c_jeem_flat = (gJeemMed gJeemMedAi gJeemMedBe gJeemMedBeF gJeemMedBeHg gJeemMedBeM1 gJeemMedBeM2 gJeemMedBeKl
	gJeemMedBeNn gJeemMedBeRe gJeemMedFe gJeemMedHgF gJeemMedHgM gJeemMedNn gJeemMedQf gJeemMedSd gJeemMedSn gJeemMedSnSn
	gJeemMedTa);

endtable;

/****
// Version of rules if final and medials are processed in a single pass:

// Note that we include the final bit of the context to "anchor" the rules
// to the situations where the immediate next character has been processed.

gMeemMed_raw  >  gMeemMed_alt_raw  /  c_kgPreMm_alt  MARKS  ^ _ MARKS  (cADLK cDalFin); // kafs and ghafs
gMeemMed_raw  >  gMeemMed_alt_raw  /  c_preMm_alt   MARKS  ^ _ MARKS  cADLK;			// others

// OBSOLETE:
//gBehMed_raw  >  gBehMed_SS_raw  / c_preBehSS_raw MARKS  ^ _ MARKS  cMedFin;
****/

// Version of above rules if finals and medials are separated into separate passes:

///gMeemMed_raw  >  gMeemMed_alt_raw  /  c_kgPreMm_alt  MARKS  _ MARKS  ^ temp_cADLK_raw; // kafs and ghafs
///gMeemMed_raw  >  gMeemMed_alt_raw  /  c_preMm_alt   MARKS  _ MARKS  ^ cADLK_raw;			// others

gMeemMed_raw  >  gMeemMed_alt_raw  /  (c_kgPreMm_alt c_preMm_alt)  MARKS _ MARKS ^ cADL_raw;

// Obsolete way of using high-tooth behs sometimes after seen & sad 
//gBehMed_raw  >  gBehMed_SS_raw  / c_preBehSS_raw MARKS  _ ;


////(gHamzaAbove gHamzaBelow)  /  cTakes_hamzaUpper _;
////// Use the diacritic form of the hamza:
////gHamzaBelow  >  gHamzaLDiac;
////gHamzaAbove  _  >  _  gHamzaUDiac:1  /  _  cDiacriticLower? _ ;


// Insert a pseudo line-break glyph for recognition later in positioning table.
// This is a good place to do this because none of the other rules are dealing with
// initial forms.

#define startOfLine user6

// Debugger:
//g_bar  (csIni_raw cBariyehIso)  >  @1  @2 {startOfLine = true};

ANY {startOfLine = false}  /  ANY  _;
ANY {startOfLine = true};

endpass;  // 3


pass(4) { MaxBackup = 50; MaxRuleLoop = 200 }

//-----  Medials  -----

// Included in all medial rules to handle the pre-context to back up over:
#define MPRECXT   cIMraw MARKS

#if (QUICKCOMPILE == 0)


//////cMed_raw_noS  >  cMedBeM1_noS
//////		/  ^ MPRECXT  _ MARKS  (gBehMedBeM2 gBehMedSn gBehMedSnSn gBehMedBe gBehMedBeHg);  //  \u0633\u06a9\u0628\u0628\u0627

//////cMed_raw  >  cMedBeM1  /  ^ MPRECXT  _ MARKS  gBehMedBeM2 MARKS  gBehMed MARKS  c_dkgal_postAlt;   //  \u0644\u0644\u0628\u0628\u0627
//////cMed_raw  >  cMedBeM1  /  ^ MPRECXT  _ MARKS  gBehMedBeM2 MARKS  gBehMedBeNn;    // \u0633\u06a9\u0628\u0628\u0628\u0646

//////cMed_raw  >  cMedBeM1  /  ^ MPRECXT  _ MARKS  (gBehMedSn gBehMedSnSn gBehMedBe  gBehMedBeHg);
//////cMed_raw  >  cMedBeM1  /  ^ MPRECXT  _ MARKS  gBehMedBeM2;

table(glyph)
cMed_postBeM1 = (gBehMedBeM2  gBehMedSn  gBehMedSnSn  gBehMedBe  gBehMedBeHg);
cBehMed_defaultEntrance = (cBehMed_postBeM  gBehMedHd);
endtable;


/////cMed_raw  gBehMed  >  cMedBeM1  gBehMedBeM2  /  ^ MPRECXT  _ MARKS  _ MARKS  gBehMed MARKS  c_dkgal_postAlt;  //     \u062c\u0639\u0628\u0628\u0627
/////cMed_raw  gBehMed  >  cMedBeM1  gBehMedBeM2  /  ^ MPRECXT  _ MARKS  _ MARKS  (gBehMedBeNn  gBehMedBeM1);

///////////(gKafMed_raw gGafMed_raw)	>  (gKafMedBeM2 gGafMedBeM2)  /  ^ MPRECXT  _ gBehMed  MARKS  c_dkgal_postAlt;  // \u0633\u06a9\u0628\u0644

///////////cMed_raw  >  cMedBeM2  /  ^  MPRECXT  _ MARKS  gBehMed MARKS  c_dkgal;    // \u0644\u0637\u0628\u062f

/////cMed_raw  >  cMedBeM2  /  ^  MPRECXT  _ MARKS  (gBehMedBeNn  gBehMedBeM1);   // \u0644\u0641\u0628\u0628\u0646


// Initial and medial:
gBehIni_raw  gBehMed_raw  >  gBehIniBeM2  gBehMedHgF_be  /  _  MARKS  _  MARKS  cHehGoalFin;
																		// \u0644\u0641\u0628\u0628\u0628\u0628\u0628\u0633

(gSeenMed_raw gSadMed_raw)  >  (gSeenMedBeM1 gSadMedBeM1) / ^ MPRECXT  _ MARKS  cBehMed_postSmedBeM1;
(gSeenMed_raw gSadMed_raw)  >  (gSeenMedBe gSadMedBe)     / ^ MPRECXT  _ MARKS  cBehMed_postSBe;

gMeemMed_raw  >  gMeemMedBeNn_alt  / ^ c_preMm_alt MARKS  _  MARKS  gBehMedNn;

// Use sad interface for round-bottom kafs:
csMed_raw  >  csMedSd    / ^ MPRECXT  _  MARKS  (gKafMed gGafMed)  MARKS  c_al_postKround;

(gKafMed_raw gGafMed_raw)  >  (gKafMedDk gGafMedDk)  / ^ MPRECXT _  MARKS  (c_dkg_noKalt cKafMed);

csMed_raw  >  csMedBe    / ^ MPRECXT  _ MARKS  cBehMed_defaultEntrance;
csMed_raw  >  csMedBeM1  / ^ MPRECXT  _ MARKS  cMed_postBeM1;

csMed_raw  >  csMedMmX   / ^ MPRECXT  _  MARKS  cMeemMed_alt;

csMed_raw  >  csMedBeRe  / ^ MPRECXT  _ MARKS  gBehMedRe;
csMed_raw  >  csMedBeNn  / ^ MPRECXT  _ MARKS  cBehMedNn;
csMed_raw  >  csMedBeHg  / ^ MPRECXT  _ MARKS  (gBehMedHgF gBehMedBeRe);
csMed_raw  >  csMedBe    / ^ MPRECXT  _ MARKS  cBehMed_postBeM;

// Obsolete way of using using high-tooth behs after seens and sads:
//gBehMed_SS_raw  >  gBehMedBeRe  /  ^ MPRECXT  _ MARKS  gBehMedRe;

csMed_raw  >  csMedBeM2  / ^ MPRECXT  _ MARKS  (gBehMedBeM1 gBehMedBeNn);
csMed_raw  >  csMedBeM2  / ^ MPRECXT  _ MARKS  gBehMed;  ///  MARKS  c_dkgal_postAlt; - superfluous context?


gSeenMed_raw  >  gSeenMedSn_sn  / ^ (gSeenIni_raw gSeenMed_raw) MARKS  _ MARKS  (cSeenMed cSeenFin);

// Tighter form of seen before flat-topped jeems:
gSeenMed_raw  >  gSeenMedJm_flat   /  ^ MPRECXT  _ MARKS  c_jeem_flat;

table(glyph)
csKjNormalEntry = (gKafMed_raw gGafMed_raw);
csKjLowEntry = (gKafMedJm_lowentry gGafMedJm_lowentry);
cNeedLowKaf = (gBehIni_raw, gBehMed_raw, gSeenIni_raw, gSeenMed_raw, gSadIni_raw, gSadMed_raw);
endtable;

// Lower-entry pre-jeem kaf - ideally these cases would be handled by the tall-kaf rules, but that would
// mean duplicating a bunch of the rules or multiplying classes, given that this tall kaf is not created
// by using a separate top. Shifting the AP down is a kludge to give the kaf more space underneath, as if it
// had a tall top.
csKjNormalEntry  >  csKjLowEntry
	/  ^ cNeedLowKaf  cNuqtaUpperLarge  cDiacritic?  _=K  MARKS  cJeemMF;
csKjNormalEntry  >  csKjLowEntry
	/  ^ (gFehIni_raw gFehMed_raw) cNuqtaLikeUpper  cDiacritic?  _=K  MARKS  cJeemMF;
csKjNormalEntry  >  csKjLowEntry
	/  ^ (gKafIni_raw gKafMed_raw) MARKS  cDiacritic?  _=K  MARKS  cJeemMF;


// Special case: use short form
gBehMed_raw  >  gBehMedQf_short  /  g_wordThessalonik  _=B  MARKS  gWawFin;


// Don't need to handle gaf, lam, or tah because they will result in taller versions anyway (pass 12).

// Basic rules
csMed_raw  >  csMedBeF	/  ^ MPRECXT  _ MARKS  cBehFin;
csMed_raw  >  csMedJm	/  ^ MPRECXT  _ MARKS  cJeemMF;
csMed_raw  >  csMedRe	/  ^ MPRECXT  _ MARKS  cRehFin;
csMed_raw  >  csMedSnSn  /  ^ MPRECXT  _ MARKS  cSeenMedSn;
csMed_raw  >  csMedSn	/  ^ MPRECXT  _ MARKS  cSeenMF;
csMed_raw  >  csMedSd	/  ^ MPRECXT  _ MARKS  cSadMF;
csMed_raw  >  csMedTa	/  ^ MPRECXT  _ MARKS  (cTahFin cTahMed);
csMed_raw  >  csMedAi	/  ^ MPRECXT  _ MARKS  (cAinFin cAinMed);
// The .fe forms are relatively "neutral" in shape and so are a good choice to precede the ZWJ:
csMed_raw  >  csMedFe	/  ^ MPRECXT  _ MARKS  (cFehFin cFehMed c_zerojoin);
csMed_raw  >  csMedQf	/  ^ MPRECXT  _ MARKS  c_qw; // qaf, waw
csMed_raw  >  csMedMm	/  ^ MPRECXT  _ MARKS  cMeemMF;
csMed_raw  >  csMedNn	/  ^ MPRECXT  _ MARKS  cNoonFin;
csMed_raw  >  csMedHgF	/  ^ MPRECXT _  MARKS  cHehGoalFin;
csMed_raw  >  csMedHgM	/  ^ MPRECXT _  MARKS  cHehGoalMed;
csMed_raw  >  csMedHd	/  ^ MPRECXT _  MARKS  (gHehDoFin cHehDoMed);
csMed_raw  >  csMedCh	/  ^ MPRECXT _  MARKS  csChotiyehFin;
csMed_raw  >  csMedBy	/  ^ MPRECXT _  MARKS  cBariyehFin;

csMed_raw  >  csMedBe	/  ^ MPRECXT  _ MARKS  cTehMarbutaFin;	// use pre-beh forms before teh-marbuta

gLamMed_raw  >  gLamMedAl	/  ^ MPRECXT  _  MARKS  gAlefFin_lm;

// Special short form of tah before kaf:
gTahMed_raw  >  gTahMedKf   /  ^ MPRECXT  _  MARKS  cKafMF;
gTahMed_raw  >  gTahMedBeKf /  ^ MPRECXT  _  MARKS  cBehMed MARKS  cKafMF;

// Special short form of lam:
gLamMed_raw  >  gLamMed_short  /  ^  MPRECXT  _  MARKS  gGafMedDk  MARKS  cKafMF;
gLamMed_raw  >  gLamMed_short  /  ^  MPRECXT  _  MARKS  cKafMF g__attachedRingMid;
gLamMed_raw  >  gLamMed_short  /  ^  MPRECXT  _  cNuqtaLikeUpper  cDiacritic?  cKafMF;

// No contextual forms for this glyph:
gMeemMed_alt_raw  >  gMeemMed_alt	/ ^ MPRECXT _  MARKS  (cMed  cFin);

#endif // !QUICKCOMPILE

// Last resort:

csMed_raw  >  csMedADLK	/ ^ MPRECXT _  MARKS  (cMed  cFin);

endpass;  // 4


pass(5)

// -----  Initials  -----

#if (QUICKCOMPILE == 0)

/////////(gKafIni_raw gGafIni_raw)  >  (gKafIniBeM2 gGafIniBeM2)  /  _ MARKS  gBehMed MARKS  c_dkgal_postAlt;

(gSeenIni_raw gSadIni_raw)  >  (gSeenIniBeM1 gSadIniBeM1) /  _ MARKS  cBehMed_postSiniBeM1;
(gSeenIni_raw gSadIni_raw)  >  (gSeenIniBe gSadIniBe)     /  _ MARKS  cBehMed_postSBe;

gBehIni_raw  >  gBehIniMm  /  _ MARKS  cMeemMed;  // before standard meem

csIni_raw  >  csIniBeHg_BeRe  / _ MARKS  gBehMedBeRe; // eg, \u0644\u0628\u0646\u0631

csIni_raw  >  csIniBeRe  /  _ MARKS  gBehMedRe;
csIni_raw  >  csIniBeNn  /  _ MARKS  cBehMedNn;
csIni_raw  >  csIniBeHg  /  _ MARKS  gBehMedHgF;

// Special short form of tah before kaf:
gTahIni_raw  >  gTahIniKf  /  _  MARKS  cKafMF;
gTahIni_raw  >  gTahIniBeKf  /  _  MARKS  cBehMed MARKS  cKafMF;

// Special short form of lam:
gLamIni_raw  >  gLamIni_short  /  _  MARKS  gGafMedDk  MARKS  cKafMF;
gLamIni_raw  >  gLamIni_short  /  _  MARKS  cKafMF g__attachedRingMid;
gLamIni_raw  >  gLamIni_short  /  _  cNuqtaLikeUpper  cDiacritic?  cKafMF;

// // Obsolete way of using high-tooth behs sometimes after seen & sad 
//csIni_raw_noS  >  csIniBe_noS       /  _ MARKS  cBehMed_defaultEntrance;
//csIni_raw_noS  >  csIniBeM1_noS     /  _ MARKS  cMed_postBeM1;

csIni_raw  >  csIniBe        /  _ MARKS  cBehMed_defaultEntrance;
csIni_raw  >  csIniBeM1      /  _ MARKS  cMed_postBeM1;

csIni_raw  >  csIniBeM2  /  _ MARKS  (gBehMed gBehMedBeM1 gBehMedBeNn);

////gLamIni_raw  >  gLamIniMm /  _ MARKS  cMeemMed_alt; // exception to rule below - can never happen
csIni_raw     >  csIniMmX /  _ MARKS  cMeemMed_alt;


// Use a smaller form of the kaf before lam.
// Do we really want this rule? If not comment out.
////(gKafIni_raw gGafIni_raw)  >  (gKafIniLm  gGafIniLm)  /  _ MARKS  gLamFin;

(gKafIni_raw gGafIni_raw)  >  (gKafIniKf gGafIniKf)  /  _ MARKS  cKafMF;
(gKafIni_raw gGafIni_raw)  >  (gKafIniDk gGafIniDk)  /  _ MARKS  gDalFin;   // was c_dkg_noKalt;

// Use sad interface before rounded kafs:
csIni_raw  >  csIniSd  /  ^ _  MARKS  (gKafMed gGafMed) MARKS  c_al_postKround;

// Tighter form of seen before flat-topped jeems:
gSeenIni_raw  >  gSeenIniJm_flat   / _ MARKS  c_jeem_flat;


// Basic rules
csIni_raw  >  csIniBeM2F    / _ MARKS  cBehFin;
csIni_raw  >  csIniJm	   / _ MARKS  (cJeemFin cJeemMed);
csIni_raw  >  csIniRe	   / _ MARKS  cRehFin;
csIni_raw  >  csIniSnSn     / _ MARKS  cSeenMedSn;
csIni_raw  >  csIniSn	   / _ MARKS  (cSeenFin cSeenMed);
csIni_raw  >  csIniSd       / _ MARKS  (cSadFin cSadMed);
csIni_raw  >  csIniTa	   / _ MARKS  (cTahFin cTahMed);
csIni_raw  >  csIniAi	   / _ MARKS  (cAinFin cAinMed);
csIni_raw  >  csIniFe	   / _ MARKS  (cFehFin cFehMed c_zerojoin);
csIni_raw  >  csIniQf       / _ MARKS  c_qw; // qaf, waw
csIni_raw  >  csIniMm	   / _ MARKS  (cMeemFin cMeemMed);
csIni_raw  >  csIniNn	   / _ MARKS  (cNoonFin gNoonGhunnaFin);
csIni_raw  >  csIniHgF      / _ MARKS  cHehGoalFin;
csIni_raw  >  csIniHgM      / _ MARKS  cHehGoalMed;
csIni_raw  >  csIniHd       / _ MARKS  (cHehDoFin cHehDoMed);
csIni_raw  >  csIniCh	   / _ MARKS  (cChotiyehFin);
csIni_raw  >  csIniBy       / _ MARKS  cBariyehFin;

csIni_raw  >  csIniBe       / _ MARKS  cTehMarbutaFin;	// use pre-beh forms before teh-marbuta

gLamIni_raw  >  gLamIniAl   / _ MARKS  gAlefFin_lm;

#endif // !QUICKCOMPILE


// Last resort:

csIni_raw  >  csIni	/ _  MARKS  cMedFin;


// Final clean-ups

gBehMedNn  >  gBehMedNn_hgbm  /  c_preBehNn_hgbm  MARKS  _;

/////g__hehHook_small  >  g__hehHook_big  /  _  MARKS  gAlefFin;


/// Eg, 062A 062E 0646 06AF 06A9
////gGafMedDk  >  gGafMed_short_OLD  /  _ MARKS  (cKafFin cKafMed);

// Handle a few special Allah forms:
(gAlef  gAlefFin)  >  (gAlef_allah  gAlefFin_allah)  /  _  MARKS  gLamIni_allah1;
g__shadda_kharizabar  >  g__shadda_kharizabar_allah  /  gLamMed_allah2  _;


endpass;  // 5


pass(6)

// Alterate (standard Arabic-style) hamza
if (hamzaAlt == 1)

gJeem  gHamzaAbove				>  gHah  g__hamzaArabic;	// no nuqta
gTehMarbutaGoal  gHamzaAbove	>  gHeh  g__hamzaArabic;	// no nuqtas

(gChotiyeh cChotiyehFin)		g__dot2lIM__hamza	>  @1  g__hamzaArabic;
(gHehGoal cHehGoalFin)		g__hehHook__hamza	>  @1  g__hamzaArabic;
(gBariyeh cBariyehFin)		g__noDot2l__hamza	>  @1  g__hamzaArabic;

cHehGoalIni  g__hehHook__hamza  _	>  @1  g__hehHook_small:2  g__hamzaArabic:2;
if (hehGoalHook == 0)
cHehGoalMed  g__hehHook__hamza		>  @1  g__hamzaArabic;
endif;
if (hehGoalHook == 1)
cHehGoalMed  g__hehHook__hamza  _	>  @1  g__hehHook_small:2  g__hamzaArabic:2;
endif;

gAlef  g_highHamza  >  gHighHamzaAlefArabic:(1 2)  _;
(gAlef cAlefFin)  gHamzaBelow   >  @1  gHamzaBelowArabic;

(cBehIni  cBehMed)  g__noDot2l__hamza			>  @1  g__hamzaArabic:1;
(cBehIni  cBehMed)  g__dot2lIM__hamza  _	>  @1  g__dot2l:2  g__hamzaArabic:2;

// This version of the rule takes precedence over the rules below that substitute the composed isolates
// (an extra slot is included to ensure the precedence):
cIso  csHamzaUrdu	>  @1  csHamzaArabic;
csHamzaUrdu  >  csHamzaArabic;

endif; // hamzaAlt


// Ligatures for tall words
// We do this in this late pass (instead of in pass 3) because by now we've figured out the 
// contextual shaping. Otherwise the variety of beh forms trips us up.

gBehIniHd  g__dot2u  gZair  gHehDoMedSn  gSeenMed  gLamMedBeM1  gPesh  gBehMedBeM2  g__dot1u  
	gBehMed  g__dot2lIM  gKafMedBe
	>  g_wordThessalonik:(1 2 3 4 5 6 7 8 9 10 11 12) _ _ _ _ _ _ _ _ _ _ _ 
	/  _ _ _ _ _ _ _ _ _ _ _ _ gBehMedQf;
gBehIniHd  g__dot2u  gHehDoMedSn  gSeenMed  gLamMedBeM1  gPesh  gBehMedBeM2  g__dot1u  
	gBehMed  g__dot2lIM  gKafMedBe
	>  g_wordThessalonik:(1 2 3 4 5 6 7 8 9 10 11) _ _ _ _ _ _ _ _ _ _ 
	/  _ _ _ _ _ _ _ _ _ _ _ gBehMedQf;
gBehIniHd  g__dot2u  gZair  gHehDoMedSn  gSeenMed  gLamMedBeM1  gBehMedBeM2  g__dot1u  
	gBehMed  g__dot2lIM  gKafMedBe
	>  g_wordThessalonik:(1 2 3 4 5 6 7 8 9 10 11) _ _ _ _ _ _ _ _ _ _ 
	/  _ _ _ _ _ _ _ _ _ _ _ gBehMedQf;
gBehIniHd  g__dot2u  gHehDoMedSn  gSeenMed  gLamMedBeM1  gBehMedBeM2  g__dot1u  
	gBehMed  g__dot2lIM  gKafMedBe
	>  g_wordThessalonik:(1 2 3 4 5 6 7 8 9 10) _ _ _ _ _ _ _ _ _ 
	/  _ _ _ _ _ _ _ _ _ _ gBehMedQf;

gBehIniHd  g__dot2u  gZair gHehDoMedSn  gSeenMed  gLamMedBeM1  gPesh  gBehMedBeM2  g__dot1u  gBehMed  
	>  g_wordThessaloni:(1 2 3 4 5 6 7 8 9 10) _ _ _ _ _ _ _ _ _ 
	/  _ _ _ _ _ _ _ _ _ _  g__dot2lIM  cKafMed;
gBehIniHd  g__dot2u  gHehDoMedSn  gSeenMed  gLamMedBeM1  gPesh  gBehMedBeM2  g__dot1u  gBehMed  
	>  g_wordThessaloni:(1 2 3 4 5 6 7 8 9) _ _ _ _ _ _ _ _ 
	/  _ _ _ _ _ _ _ _ _  g__dot2lIM  cKafMed;
gBehIniHd  g__dot2u  gZair gHehDoMedSn  gSeenMed  gLamMedBeM1  gBehMedBeM2  g__dot1u  gBehMed  
	>  g_wordThessaloni:(1 2 3 4 5 6 7 8 9) _ _ _ _ _ _ _ _ 
	/  _ _ _ _ _ _ _ _ _  g__dot2lIM  cKafMed;
gBehIniHd  g__dot2u  gHehDoMedSn  gSeenMed  gLamMedBeM1  gBehMedBeM2  g__dot1u  gBehMed  
	>  g_wordThessaloni:(1 2 3 4 5 6 7 8) _ _ _ _ _ _ _ 
	/  _ _ _ _ _ _ _ _  g__dot2lIM  cKafMed;

gBehIniHd  g__dot2u  gHehDoMedSn  gSeenFin  (cNuqta cDiacritic);  // don't use the abbreviation
gBehIniHd  g__dot2u  gHehDoMedSn  gSeenFin
	>  g_wordThess:(1 2 3 4) _ _ _
	/  _ _ _ _ ;

gBehIniBe  g__dot2u  gBehMedMm  g__dot2lIM  gMeemMedBe  gPesh  gBehMedHd  g__dot2u  gHehDoMedBeM1  gBehMedSn
	g__dot2lIM  gPesh  gSeenFin
	>  g_wordTimothy:(1 2 3 4 5 6 7 8 9 10 11 12 13) _ _ _ _ _ _ _ _ _ _ _ _ ;
gBehIniBe  g__dot2u  gBehMedMm  g__dot2lIM  gMeemMedBe  gPesh  gBehMedHd  g__dot2u  gHehDoMedBeM1  gBehMedSn
	g__dot2lIM  gSeenFin
	>  g_wordTimothy:(1 2 3 4 5 6 7 8 9 10 11 12) _ _ _ _ _ _ _ _ _ _ _ ;
gBehIniBe  g__dot2u  gBehMedMm  g__dot2lIM  gMeemMedBe  gBehMedHd  g__dot2u  gHehDoMedBeM1  gBehMedSn
	g__dot2lIM  gPesh  gSeenFin
	>  g_wordTimothy:(1 2 3 4 5 6 7 8 9 10 11 12) _ _ _ _ _ _ _ _ _ _ _ ;
gBehIniBe  g__dot2u  gBehMedMm  g__dot2lIM  gMeemMedBe  gBehMedHd  g__dot2u  gHehDoMedBeM1  gBehMedSn
	g__dot2lIM  gSeenFin
	>  g_wordTimothy:(1 2 3 4 5 6 7 8 9 10 11) _ _ _ _ _ _ _ _ _ _ ;
	
gBehMedQf  g__noDot2l  >  gBehMedQf_short  g__dot2l  /  g_wordThessalonik  _  _=N  gWawFin;
gBehMedQf  cNuqtaLike  >  gBehMedQf_short  @N        /  g_wordThessalonik  _  _=N  gWawFin;

gAlef  gLamIniMm  gMeemMedSn  gSeenMedBe  gBehMedJm  g__dot2lIM  gJeemFin
	>  g_wordAlmasih:(1 2 3 4 5 6 7) _ _ _ _ _ _ ;
gAlef  gLamIniMm  gMeemMedSn  gSeenMedBe  gBehMedJm  g__dot2lIM  gJeemFin
	>  g_wordAlmasih:(1 2 3 4 5 6 7) _ _ _ _ _ _ ;

// These sequences are on the tall side; force use of the short final.
gNoonFin >  gNoonFin_short  /  gSeenIniMm  gMeemMedJm  gJeemMedHd  cNuqtaLike  gHehDoMedBeNn  _=N;
gSadFin  >  gSadFin_short   /  gSeenIniJm_flat  cNuqtaLike  gJeemMedSd  cNuqtaLike  _=S;


// khah + zabar + meem + jeem + heh-doachashmee is a root of many common tall words.
gJeemIniMm  g__dot1u  gZabar  gMeemMedJm  gJeemMedHd  g__dot1l
	>  g_seqKhahMeemJeem:(1 2 3 4 5 6) _ _ _ _ _
	/  _ _ _ _ _ _ ^ cHehDoMF;
(gHehDoMed gHehDoMedBe gHehDoMedJm)  >  (gHehDoMed_short gHehDoMedBe_short gHehDoMedJm_short)  /  g_seqKhahMeemJeem _;


// Recompose isolates.
// These rules are the opposite of the rules in nastaliq_separateNuqtas.gdh.

// See also subtending rules below.

gBeh		cs_behMark				>	cs_behComposed$2:(1 2)	_;
gBeh								>	gDotlessBeh;
gJeem		cs_jeemMark				>	cs_jeemComposed$2:(1 2)	_;
gJeem								>	gHah;
gSeen		cs_seenMark				>	cs_seenComposed$2:(1 2)	_;

//gSad								>	gSad;
gSad		cs_sadMark				>	cs_sadComposed$2:(1 2)	_;
//gTah								>	gTah;
gTah		g__dot1u				>	gZah:(1 2)	_;
//gAin								>	gAin;
gAin		g__dot1u				>	gGhain:(1 2)	_;

//gQaf								>	gQaf;
csDotlessQaf_feh    g__noDot2u		>	csDotlessQaf_qaf:(1 2)  _;

gFeh		cs_fehMark				>	cs_fehComposed$2:(1 2)	_;
gFeh								>	gDotlessFeh;

//gKaf
gKaf		cs_kafMark				>	cs_kafComposed$2:(1 2)  _;
gGaf		cs_gafMark				>	cs_gafComposed$2:(1 2)  _;
// Remove squiggle from initial/medial forms.
(cKafIni  cKafMed)  g__kafSquiggle	>	@1:(1 2)  _;

//gLam								>	gLam;
gLam		g__bar					>	gLamBar:(1 2)	_;
gLam		g__dot3u				>	gLamThreeDots:(1 2)  _;
gLam		g__smallTah				>	gLamSmallTah:(1 2)  _;

if (lamValt == 1)
gLam		g__smallV				>	gLamSmallV_alt:(1 2) _;
else
gLam		g__smallV				>	gLamSmallV:(1 2)     _;
endif;

//gMeem								>	gMeem;
(gMeem gMeemFin)  >  (gMeemLowdiac gMeemFinLowdiac)  /  _  cDiacriticLower;

gNoon		cs_noonMark				>	cs_noonComposed$2:(1 2)	_;
//gNoonFin	g__dot1u_ngMark			>	@1:(1 2)  _;  // obsolete
(cBehIM gNoonFin)  g__noDot1u		>	@1:(1 2)  _;

gHehGoal	cs_hehGoalMark			>	cs_hehGoalComposed$2:(1 2)	_;

// Remove hooks
gHehGoalFin  g__hehHook_small  >  gHehGoalFin:(1 2)  _;
gHehGoalFin  g__hehHook__dot2u  >  gHehGoalFin        g__dot2u;	 // teh-marbuta goal
gHehGoalFin  g__hehHook__hamza  >  gHehGoalFin        gHamzaAbove;
if (hehGoalHook == 0)
cHehGoalMed  g__hehHook_small  >  cHehGoalMed:(1 2)  _;
cHehGoalMed  g__hehHook__dot2u  >  cHehGoalMed        g__dot2u;	 // teh-marbuta goal
cHehGoalMed  g__hehHook__hamza  >  cHehGoalMed        gHamzaAbove;
endif;

//gHehDo				>	gHehDo;

gChotiyeh=Y	gHamzaAbove=H								>	gYehHamzaAbove:(Y H) _;
gChotiyeh=Y	(g__dot2lIM  g__noDot2l)=D  gHamzaAbove=H	>	gYehHamzaAbove:(Y D H)  _  _;
gChotiyeh	cs_chotiyehMark								>	cs_chotiyehComposed$2:(1 2)  _;

gBariyeh  g__noDot2l				>	gBariyeh:(1 2)  _;
gBariyeh  g__noDot2l__hamza		>	gBariyeh  gHamzaAbove;

cBehIM  g__dot2lIM  >  @1  g__dot2l_small  /  _=B  _=N {smallNuqtas == 1};
cBehIM  g__dot2lIM  >  @1  g__dot2l;

cBehIM  g__dot2lIM__hamza  _	>  @1  g__dot2l:2  gHamzaAbove:2;
cBehIM  g__noDot2l__hamza			>  @1  gHamzaAbove:2;

csChotiyehFin  g__dot2lIM			> 	@1:(1 2)  _;			// remove dots on final
csChotiyehFin  g__noDot2l__hamza		>	@1  gHamzaAbove;
csChotiyehFin  csChotiyehFin2Dots	> 	@1  csChotiyehFinNoDots;
csChotiyehFin  g__dot2l_tail		>	csYehTailFin:(1 2)  _;
csChotiyehFin  g__ring			>	csKashmiriYehFin:(1 2)  _;


gBariyehFin   g__noDot2l			>	@1:(1 2)  _;
gBariyehFin   g__noDot2l__hamza	>	@1  gHamzaAbove;

gBariyeh	  cs_bariyehMark			>	cs_bariyehComposed$2:(1 2)  _;

// Right-link
//gBariyeh			_	>	gBehIni:1	g__dot2l:1_small  /  _ {smallNuqtas == 1}  _;
//gBariyeh			_	>	gBehIni:1	g__dot2l:1;
//gArabicBariyehHamzaFin0 _	>	pseudo(postscript("nlqBariyehHamza")):1	 absHamzaAbove:1;	// eventually replaced with beh + bariyeh

//gAlef								>	gAlef;
gAlef		cs_alefMark2Prec		>	cs_alefComposed2Prec$2:(1 2)  _;

//gDal								>	gDal;
gDal		cs_dalMark				>	cs_dalComposed$2:(1 2)  _;

//gReh								>	gReh;
gReh		cs_rehMark				>	cs_rehComposed$2:(1 2)  _;

//gWaw								>	gWaw;
gWaw		cs_wawMark2Prec			>	cs_wawComposed2Prec$2:(1 2)  _;

gTehMarbutaGoal	g__dot2u			>	gTehMarbutaGoal:(1 2)  _;
gTehMarbuta		g__dot2u			>	gTehMarbuta:(1 2)  _;

if (hamzaAlt == 1)
gTehMarbutaGoal gHamzaAbove			>	gHehGoal  g__hamzaArabic;
else
gTehMarbutaGoal	gHamzaAbove			>	gHehYehAbove:(1 2)  _;	// heh-goal-w-hamza -- OR SHOULD THIS BE TEH MARBUTA??
endif;

if (smallNuqtas == 1)
// Small nuqtas

csNuqta_normal  >  csNuqta_small;

g__noDot1u		>	g__dot1u_small;
g__dot2lIM		>	g__dot2l_small;
g__dot2l_tail	>	g__dot2l_small;

csLowerUpper  _  >  csLowerNoUpper_small  csUpperNoLower_small$1:1;

else

// See corresponding rules above.

// If no other rule matches, then we do in fact need these nuqtas:
g__noDot1u		>	g__dot1u;
g__dot2lIM		>	g__dot2l;
g__dot2l_tail	>	g__dot2l;

// This one goes away:
ANY  g__noDot2l   >  @1:(1 2)  _;


// Wider beh forms for noon-ring or teh-ring:

csBehNoRing  csRingDot  _  >  csBehTehRing  g__attachedRing  csNoRingDot$2:2;

// Break lower-and-upper-nuqta glyphs into two separate glyphs, so they can be positioned separately.

csLowerUpper  _  >  csLowerNoUpper  csUpperNoLower$1:1;


endif; // no small nuqtas


if (fullStopAlt == 1)

gFullStop  >  gFullStopDot;

endif;

table(glyph)
cKafKfNormal = (gKafIniKf      gGafIniKf      gKafMedDk      gGafMedDk);
cKafKfWide   = (gKafIniKf_wide gGafIniKf_wide gKafMedKf_wide gGafMedKf_wide);

cNarrowPreKaf = (gBehMed gJeemMed gAinMed gMeemMed gHehGoalMed gFehMed);
endtable;


// Special case: kaf w/3 dots + kaf/gaf; graf + kaf/gaf
cKafKfNormal  _ >  cKafKfWide g__kafTop_null:K
	/  _=K  _  (csNuqtaUpperWide  g__grafStroke)  cDiacritic?  cKafMF;

// Special case: use a tall final kaf to keep the upper diacritic from having to jump above the kaf stroke
// In a later pass, shift the nuqta and diacritic down.
csKafFin  >  csKafFinTall  /
	(cFehIM cAinIM) cNuqtaLikeUpper  cDiacriticUpper  cNarrowPreKaf  MARKS _=K;


// Special case: gaf + kaf + bariyeh (second kaf has no tall form)

// Tall final kaf
csKafFin  >  csKafFinTall  /  cNuqtaUpperLarge  cDiacriticUpper  _=K;




// Add a bogus null glyph in case we want to break the kafs into two pieces.
// We need to do it now because we can't do insertions in the positioning table.

cKafIM  _  >  @1  g__kafTop_null:1;


// Special forms of letters

g__bar  >  g__barNarrow  /  _  cDiacritic?  (cSadMed gSadFin);
////g__bar  >  g__barNarrow  /  (gLamAlef gLamAlefFin)  _;

if (hehDoachIni == round)
gHehDoIniQf  csQwFin_stfh  >  gHehDoIniQf_alt  csQwFin  /  _=HD  cDiacritic?  _=QW;
csHehDoIni_noAlt  >  csHehDoIni_alt;
endif;

if (sukunAlt == jazmLeft)
gJazm  >  gJazm_openleft;
endif;


// Mirroring - no, we aren't supposed to do this:
////csNeedsMirror  >  csMirrored  /  _ {directionality == 1};  // directionality is actually the segment direction


// kaf + lam-bar

// a few special forms for real-life words we know about:
cLam_noBar_postKaf  >  cLam_tallForBar_postKaf  /  (gKafIni gKafMed)  g__kafTop_null  MARKS  _  cbarDia;
cLam_noBar_postGaf  >  cLam_tallForBar_postGaf  /  (gGafIni gGafMed)  g__kafTop_null  MARKS  _  cbarDia;

// use the normal bar for these; extra context to increase precedence
cbarDia  >  @B  /  cKafIM  cKafTopInvis  MARKS  cLam_tallForBar  _=B;

cbarDia  >  g__barRaised_gaf  / (cKafIni_gaf cKafMed_gaf)  g__kafTop_null  MARKS  (cLamMed cLamFin)  _=B;
cbarDia  >  g__barRaised  / (cKafIni cKafMed)  g__kafTop_null  MARKS  (cLamMed cLamFin)  _=B;


// See also subtending rules below.


// Special case: khah + teh/theh + kaf/lam/alef
gJeemMedBeM2  (g__dot3u g__dot4u)  >  gJeemMedBeKl  (g__dot3u_small g__dot4u_small)
	/  _=J  _=N  gBehMed  (cNuqtaLikeUpper csLowerUpper) cDiacritic?  cKafMF;
gJeemMedBeM2  >  gJeemMedBeKl  /  _=J  cNuqtaLikeUpper  gBehMed  (cNuqtaLikeUpper csLowerUpper);

// Special case: nuqta-small-V + kaf/gaf
gBehMed  csNuqtaPlusMark  >  gBehMedKf_wide  csNuqtaPlusMarkKf   
	/  _  _  cDiacritic?  (cKafMed  cKafFin);
csNuqtaPlusMark  >  csNuqtaPlusMarkKf  /  _  [cBehMed MARKS]?  cKafMF;

// Special case: beh + khah + kaf/gaf, or noon/teh + jeem + kaf/gaf
gJeemMed  csNuqtaUpper_normal  >  gJeemMedKf_wide  csNuqtaUpper_small
	/  (gBehIniJm gBehMedJm) cNuqtaLikeLower?                  MARKS  _=J  _=N cDiacritic?              cKafMF;
gJeemMed  >  gJeemMedKf_wide
	/  (gBehIniJm gBehMedJm)                                   MARKS  _=J  cNuqtaLikeUpper cDiacritic?  cKafMF;
gJeemMed  >  gJeemMedKf_wide
	/  (gBehIniJm gBehMedJm) cNuqtaLikeLower? cNuqtaLikeUpper  MARKS  _=J  MARKS                        cKafMF;

// Same issue with a lam and stuff above it
gJeemMed  csNuqtaUpper_normal  >  gJeemMedKf_wide  csNuqtaUpper_small
	/  (gBehIniJm gBehMedJm) cNuqtaLikeLower?                  MARKS  _=J  _=N             cDiacritic?  cLamMF (cNuqtaLikeUpper cDiacriticUpper);
gJeemMed  >  gJeemMedKf_wide
	/  (gBehIniJm gBehMedJm)                                   MARKS  _=J  cNuqtaLikeUpper cDiacritic?  cLamMF (cNuqtaLikeUpper cDiacriticUpper);
gJeemMed  >  gJeemMedKf_wide
	/  (gBehIniJm gBehMedJm) cNuqtaLikeLower? cNuqtaLikeUpper  MARKS  _=J  MARKS                        cLamMF (cNuqtaLikeUpper cDiacriticUpper);

// Special case: jeem w/3dots + kaf/alef
gJeemMed  csNuqtaUpperWide  >  gJeemMedKf_wide  csNuqtaUpperWideSmallF  / _=J  _=N  cDiacritic?  cKafMF;
gJeemMed  csNuqtaUpperWide  >  gJeemMedKf_wide  @N                      / _=J  _=N  cDiacritic?  cAlefFin;

// Special case: feh/ghain + jeem + kaf
cNuqtaUpper  gJeemMed  >  csNuqtaUpperSmallF  gJeemMedKf_wide  /  (cFehIM cAinIM) _=N cDiacritic?    _=J  MARKS  cKafNoIso;
             gJeemMed  >                      gJeemMedKf_wide  /  (cFehIM cAinIM)   cDiacriticUpper  _=J  MARKS  cKafNoIso;

// Special case: tah + jeem + kaf/gaf
gJeemMed  >  gJeemMedKf_wide  /  (gTahIniJm gTahMedJm) MARKS _=J MARKS  cKafNoIso;

// Special case: teh + khah + lam + diac
gJeemMed  >  gJeemMedKf_wide
	/ gBehIniJm  (cNuqtaUpper csLowerUpper)  cDiacritic?  _=J  cNuqtaLikeUpper  cDiacritic?  cLamMed  cDiacritic;

// Special case: high-tooth nuqta-small-V + beh + kaf/gaf
g__dot1u_smallV  >  g__dot1u_smallVKf
	/  gBehMedBeM2  _=NV  cDiacritic?  cBehMed  MARKS  cKafMF;

// Special case: noon + vowel-small-V -> noon-small-V
g__dot1u  (gVowelSmallV gNoonGhunnaMark)  gBehMed  >  (g__dot1u_smallVKf g__dot1u_ngMark)$M:(N M)  _  gBehMedKf_wide
	/  _=N  cDiacritic? _=M  _=B MARKS  cKafMF;
g__dot1u  (gVowelSmallV gNoonGhunnaMark)   >  (g__dot1u_smallVKf g__dot1u_ngMark)$M:(N M)  _
	/  _=N  cDiacritic? _=M  cKafMF;

// Special case: nuqta + diac(s)
gBehMed  >  gBehMedKf_wide  /  _  cNuqtaLikeUpper  cDiacriticUpper cDiacriticUpper?  cKafMF;

// Special case below does not apply here:
gBehIniBe  g__dot1l  gBehMedJm  g__dot1l  gJeemFin;  // ok, don't change
// Special case: beh+beh+jeem
gBehIniBe  gBehMedJm  >  gBehIniBe_jmF  gBehMedJmR
	/ _=B1 ^ cNuqtaLikeLower cDiacritic?  _=B2 cNuqtaLikeLower cDiacritic?  gJeemFin;

// Special case: yeh + kaf + zair  TODO

endpass;  // 6


table(glyph)

cDigitArabic = (gZero, gOne, gTwo, gThree, gFour, gFive, gSix, gSeven, gEight, gNine);
cDigitArabic_small = (gZero_small, gOne_small, gTwo_small, gThree_small, gFour_small,
	gFive_small, gSix_small, gSeven_small, gEight_small, gNine_small);
cDigitArabic_smaller = (gZero_smaller, gOne_smaller, gTwo_smaller, gThree_smaller, gFour_smaller,
	gFive_smaller, gSix_smaller, gSeven_smaller, gEight_smaller, gNine_smaller);

cDigitEastern = (gEasternZero, gEasternOne, gEasternTwo, gEasternThree, gEasternFour, gEasternFive,
	gEasternSix, gEasternSeven, gEasternEight, gEasternNine);
cDigitEastern_small = (gEasternZero_small, gEasternOne_small, gEasternTwo_small,
	gEasternThree_small, gEasternFour_small, gEasternFive_small,
	gEasternSix_small, gEasternSeven_small, gEasternEight_small, gEasternNine_small);
cDigitEastern_smaller = (gEasternZero_smaller, gEasternOne_smaller, gEasternTwo_smaller,
	gEasternThree_smaller, gEasternFour_smaller, gEasternFive_smaller,
	gEasternSix_smaller, gEasternSeven_smaller, gEasternEight_smaller, gEasternNine_smaller);

cDigitLatin = (g_zero, g_one, g_two, g_three, g_four, g_five, g_six, g_seven, g_eight, g_nine);
cDigitLatin_small = (g_zero_small, g_one_small, g_two_small, g_three_small, g_four_small,
	g_five_small, g_six_small, g_seven_small, g_eight_small, g_nine_small);
cDigitLatin_smaller = (g_zero_smaller, g_one_smaller, g_two_smaller, g_three_smaller, g_four_smaller,
	g_five_smaller, g_six_smaller, g_seven_smaller, g_eight_smaller, g_nine_smaller);

//cDigitsAny = ( cDigitArabic cDigitEastern cDigitLatin );
cDigitAny = (cDigitLatin, cDigitArabic, cDigitEastern);
cDigitAnySmall = (cDigitLatin_small, cDigitArabic_small, cDigitEastern_small);
cDigitAnySmaller = (cDigitLatin_smaller, cDigitArabic_smaller, cDigitEastern_smaller);

cDigitAbsFullSize = (cDigitArabic, cDigitEastern);


cSignTakes4 = (gYearSign gNumberSign gPageSign gSamvat); // small
cSign4 = (gYearSign4 gNumberSign4 gPageSign4 gSamvat);

cSignTakes3Small = (gYearSign gNumberSign gPageSign);
cSign3Small = (gYearSign3 gNumberSign3 gPageSign3);
cSignTakes3Smaller  = (gEndOfAyah); // also alternative forms
cSign3Smaller  = (gEndOfAyah3);

cSignTakes2Small = (gYearSign gNumberSign gPageSign gFootnoteSign);
cSign2Small = (gYearSign2 gNumberSign2 gPageSign2 gFootnoteSign2);
cSignTakes2Smaller = (gEndOfAyah);
cSign2Smaller = (gEndOfAyah2);

cSignTakes1Small = (gYearSign gNumberSign gPageSign gFootnoteSign);
cSign1Small = (gYearSign gNumberSign gPageSign gFootnoteSign);
cSignTakes1Smaller = (gEndOfAyah);
cSign1Smaller = (gEndOfAyah);

cSign3 = (cSign3Small, cSign3Smaller);
cSign2 = (cSign2Small, cSign2Smaller);
cSign1 = (cSign1Small, cSign1Smaller);

cSignDigit = (cDigitAnySmall cDigitAnySmaller);


endtable;


pass(7) {Direction = LEFT_TO_RIGHT}
	// Subtending marks

	cSignTakes4 cDigitAny cDigitAny cDigitAny cDigitAny  >
		cSign4 cDigitAnySmall cDigitAnySmall cDigitAnySmall cDigitAnySmall;

	cSignTakes3Small cDigitAny cDigitAny cDigitAny  >
		cSign3Small cDigitAnySmall cDigitAnySmall cDigitAnySmall;

	cSignTakes3Smaller cDigitAny cDigitAny cDigitAny  >
		cSign3Smaller cDigitAnySmaller cDigitAnySmaller cDigitAnySmaller;

	cSignTakes2Small cDigitAny cDigitAny  >
		cSign2Small cDigitAnySmall cDigitAnySmall;

	cSignTakes2Smaller cDigitAny cDigitAny  >
		cSign2Smaller cDigitAnySmaller cDigitAnySmaller;

	cSignTakes1Small cDigitAny  >  cSign1Small  cDigitAnySmall;

	cSignTakes1Smaller cDigitAny  >  cSign1Smaller  cDigitAnySmaller;

#include "cp1252.gdh"

if (punctAlt == punctDefault)
	// Convert punctuation to either Latin or Arabic where there are not separate characters
	// for the two scripts:
	// These contextual rules aren't quite right.
////	csPunctLatin  >  @P  /  cLatin  _=P  cLatin;
////	csPunctLatin  >  @P  /  cSpace  _=P  cLatin;
////	csPunctLatin  >  @P  /  cLatin  _=P  cSpace;
////	csPunctLatin  >  csPunctArabic  /  ANY  _  ANY;  // not at beginning or end of segment.
////	csPunctLatin  >  @P  /  cLatin  _=P;
////	csPunctLatin  >  @P  /  _=P  cLatin;
////	csPunctLatin  >  csPunctArabic;

	csPunctLatin  >  csPunctArabic  /  _ {directionality == 1};  // directionality is actually the segment direction
endif;

if (punctAlt == punctArabic)
	csPunctLatin  >  csPunctArabic;
endif;

// if (punctAlt == punctLatin)
//   No need to convert to Latin; that's what it comes in as.
// endif;

    g_radical  >  g_radicalRtl   /  _ {directionality == 1};

endpass; // 7

// I don't think this is quite right:
/************
	// In theory, the rules above should be adequate to handle subtending marks.
	// But there is a bug where some applications don't put these in the right
	// direction. So we provide right-to-left rules as well.

pass(7)

	cDigitAny  cDigitAny  cDigitAny  cDigitAny  cSignTakes4  >
		cDigitAnySmall  cDigitAnySmall  cDigitAnySmall  cDigitAnySmall  cSign4;

	cDigitAny  cDigitAny  cDigitAny  cSignTakes3Small  >
		cDigitAnySmall  cDigitAnySmall  cDigitAnySmall  cSign3Small;

	cDigitAny  cDigitAny  cDigitAny  cSignTakes3Smaller  >
		cDigitAnySmaller  cDigitAnySmaller  cDigitAnySmaller  cSign3Smaller;

	cDigitAny  cDigitAny  cSignTakes2Small  >
		cDigitAnySmall  cDigitAnySmall  cSign2Small;

	cDigitAny  cDigitAny  cSignTakes2Smaller  >
		cDigitAnySmaller cDigitAnySmaller  cSign2Smaller;

	cDigitAny  cSignTakes1Small  >  cDigitAnySmall  cSign1Small;

	cDigitAny  cSignTakes1Smaller  >  cDigitAnySmaller  cSign1Smaller;

endpass;  // 6
************/


endtable;	// sub
